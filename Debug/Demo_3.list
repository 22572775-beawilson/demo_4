
Demo_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e27c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800e420  0800e420  0001e420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7b8  0800e7b8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800e7b8  0800e7b8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e7b8  0800e7b8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7b8  0800e7b8  0001e7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7bc  0800e7bc  0001e7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800e7c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e4  20000090  0800e850  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  0800e850  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170cb  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002957  00000000  00000000  0003718b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  00039ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  0003ac40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d31  00000000  00000000  0003bc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012818  00000000  00000000  0005e9b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d64f9  00000000  00000000  000711c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001476c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005074  00000000  00000000  00147740  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e404 	.word	0x0800e404

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800e404 	.word	0x0800e404

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000c6c:	b5b0      	push	{r4, r5, r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000c7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000c7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000c82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000c86:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c8a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000c8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c8e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f80e 	bl	8000cc2 <Lcd_init>

	return lcd;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	461d      	mov	r5, r3
 8000caa:	f107 0410 	add.w	r4, r7, #16
 8000cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cb6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bdb0      	pop	{r4, r5, r7, pc}

08000cc2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]

			lcd_write_command(lcd, 0x33);
 8000cca:	2133      	movs	r1, #51	; 0x33
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f875 	bl	8000dbc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000cd2:	2132      	movs	r1, #50	; 0x32
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 f871 	bl	8000dbc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000cda:	2128      	movs	r1, #40	; 0x28
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 f86d 	bl	8000dbc <lcd_write_command>




	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 f869 	bl	8000dbc <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D|OPT_B|OPT_C);		// Lcd-on, cursor-off, no-blink
 8000cea:	210f      	movs	r1, #15
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f865 	bl	8000dbc <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000cf2:	2103      	movs	r1, #3
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 f861 	bl	8000dbc <lcd_write_command>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	4906      	ldr	r1, [pc, #24]	; (8000d30 <Lcd_int+0x2c>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00b ff5a 	bl	800cbd0 <siprintf>

	Lcd_string(lcd, buffer);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f806 	bl	8000d34 <Lcd_string>
}
 8000d28:	bf00      	nop
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	0800e420 	.word	0x0800e420

08000d34 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e00a      	b.n	8000d5a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f862 	bl	8000e18 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	3301      	adds	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	7bfc      	ldrb	r4, [r7, #15]
 8000d5c:	6838      	ldr	r0, [r7, #0]
 8000d5e:	f7ff fa3f 	bl	80001e0 <strlen>
 8000d62:	4603      	mov	r3, r0
 8000d64:	429c      	cmp	r4, r3
 8000d66:	d3ed      	bcc.n	8000d44 <Lcd_string+0x10>
	}
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd90      	pop	{r4, r7, pc}

08000d70 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <Lcd_cursor+0x30>)
 8000d84:	5cd2      	ldrb	r2, [r2, r3]
 8000d86:	78bb      	ldrb	r3, [r7, #2]
 8000d88:	4413      	add	r3, r2
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	3b80      	subs	r3, #128	; 0x80
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f812 	bl	8000dbc <lcd_write_command>
	#endif
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	0800e56c 	.word	0x0800e56c

08000da4 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000dac:	2101      	movs	r1, #1
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f804 	bl	8000dbc <lcd_write_command>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6898      	ldr	r0, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	899b      	ldrh	r3, [r3, #12]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f007 fe22 	bl	8008a1c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7d9b      	ldrb	r3, [r3, #22]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d111      	bne.n	8000e04 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2204      	movs	r2, #4
 8000de8:	4619      	mov	r1, r3
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f842 	bl	8000e74 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2204      	movs	r2, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 f839 	bl	8000e74 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000e02:	e005      	b.n	8000e10 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	2208      	movs	r2, #8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f832 	bl	8000e74 <lcd_write>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6898      	ldr	r0, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	899b      	ldrh	r3, [r3, #12]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f007 fdf4 	bl	8008a1c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7d9b      	ldrb	r3, [r3, #22]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d111      	bne.n	8000e60 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2204      	movs	r2, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 f814 	bl	8000e74 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2204      	movs	r2, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f80b 	bl	8000e74 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000e5e:	e005      	b.n	8000e6c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	2208      	movs	r2, #8
 8000e64:	4619      	mov	r1, r3
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 f804 	bl	8000e74 <lcd_write>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
 8000e80:	4613      	mov	r3, r2
 8000e82:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e019      	b.n	8000ebe <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	8819      	ldrh	r1, [r3, #0]
 8000ea2:	78fa      	ldrb	r2, [r7, #3]
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	fa42 f303 	asr.w	r3, r2, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	f007 fdb2 	bl	8008a1c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	78bb      	ldrb	r3, [r7, #2]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3e1      	bcc.n	8000e8a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6918      	ldr	r0, [r3, #16]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	8a9b      	ldrh	r3, [r3, #20]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f007 fda3 	bl	8008a1c <HAL_GPIO_WritePin>
	DELAY(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f005 f8fa 	bl	80060d0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6918      	ldr	r0, [r3, #16]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	8a9b      	ldrh	r3, [r3, #20]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f007 fd98 	bl	8008a1c <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_UART_RxCpltCallback>:
uint8_t startupp = 1;
uint8_t currentflag;
//uint8_t start = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

	if(Rxdata[0] != 10){
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b0a      	cmp	r3, #10
 8000f02:	d00d      	beq.n	8000f20 <HAL_UART_RxCpltCallback+0x2c>

		Txdata[idx] = Rxdata[0];
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f0c:	7819      	ldrb	r1, [r3, #0]
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_UART_RxCpltCallback+0x70>)
 8000f10:	5499      	strb	r1, [r3, r2]
		idx++;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e013      	b.n	8000f48 <HAL_UART_RxCpltCallback+0x54>

	}
	else if (Rxdata[0] == 10){
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b0a      	cmp	r3, #10
 8000f26:	d10f      	bne.n	8000f48 <HAL_UART_RxCpltCallback+0x54>
		Txdata[idx] = Rxdata[0];
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f30:	7819      	ldrb	r1, [r3, #0]
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_UART_RxCpltCallback+0x70>)
 8000f34:	5499      	strb	r1, [r3, r2]
		idx = 0;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_UART_RxCpltCallback+0x74>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
		move = 1;
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_UART_RxCpltCallback+0x78>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]

	}

	HAL_UART_Receive_IT(&huart2,Rxdata, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4904      	ldr	r1, [pc, #16]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <HAL_UART_RxCpltCallback+0x7c>)
 8000f4e:	f00a fc85 	bl	800b85c <HAL_UART_Receive_IT>

}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000310 	.word	0x20000310
 8000f60:	200000ac 	.word	0x200000ac
 8000f64:	20000314 	.word	0x20000314
 8000f68:	200001a4 	.word	0x200001a4
 8000f6c:	2000030d 	.word	0x2000030d
 8000f70:	20001510 	.word	0x20001510
 8000f74:	00000000 	.word	0x00000000

08000f78 <get_Pulse_array>:

uint16_t DutyCycleinput[100];
uint16_t Amplitude_pulseinput[100];
uint16_t Offset_pulseinput[100];

void get_Pulse_array(float DutyC, float PulseAmp, float PulseOff) {
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f82:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f86:	ed87 1a01 	vstr	s2, [r7, #4]

	for(countt = 0; countt < DutyC; countt++) {
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <get_Pulse_array+0x100>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e027      	b.n	8000fe2 <get_Pulse_array+0x6a>

		Pulse_array[countt] = (PulseAmp + PulseOff)*(4096)/3.3; //scale
 8000f92:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800107c <get_Pulse_array+0x104>
 8000fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa6:	ee17 0a90 	vmov	r0, s15
 8000faa:	f7ff fad5 	bl	8000558 <__aeabi_f2d>
 8000fae:	a330      	add	r3, pc, #192	; (adr r3, 8001070 <get_Pulse_array+0xf8>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	f7ff fc52 	bl	800085c <__aeabi_ddiv>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	460c      	mov	r4, r1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4622      	mov	r2, r4
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <get_Pulse_array+0x100>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461c      	mov	r4, r3
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	4611      	mov	r1, r2
 8000fca:	f7ff fddf 	bl	8000b8c <__aeabi_d2uiz>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <get_Pulse_array+0x108>)
 8000fd2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(countt = 0; countt < DutyC; countt++) {
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <get_Pulse_array+0x100>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <get_Pulse_array+0x100>)
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <get_Pulse_array+0x100>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	dcca      	bgt.n	8000f92 <get_Pulse_array+0x1a>
	}

	for(countt = DutyC; countt< 100; countt++) {
 8000ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001004:	edc7 7a00 	vstr	s15, [r7]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <get_Pulse_array+0x100>)
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e023      	b.n	800105a <get_Pulse_array+0xe2>

		Pulse_array[countt] = (PulseOff)*(4096)/3.3;
 8001012:	edd7 7a01 	vldr	s15, [r7, #4]
 8001016:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800107c <get_Pulse_array+0x104>
 800101a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101e:	ee17 0a90 	vmov	r0, s15
 8001022:	f7ff fa99 	bl	8000558 <__aeabi_f2d>
 8001026:	a312      	add	r3, pc, #72	; (adr r3, 8001070 <get_Pulse_array+0xf8>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	f7ff fc16 	bl	800085c <__aeabi_ddiv>
 8001030:	4603      	mov	r3, r0
 8001032:	460c      	mov	r4, r1
 8001034:	4619      	mov	r1, r3
 8001036:	4622      	mov	r2, r4
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <get_Pulse_array+0x100>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461c      	mov	r4, r3
 800103e:	4608      	mov	r0, r1
 8001040:	4611      	mov	r1, r2
 8001042:	f7ff fda3 	bl	8000b8c <__aeabi_d2uiz>
 8001046:	4602      	mov	r2, r0
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <get_Pulse_array+0x108>)
 800104a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(countt = DutyC; countt< 100; countt++) {
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <get_Pulse_array+0x100>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <get_Pulse_array+0x100>)
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <get_Pulse_array+0x100>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b63      	cmp	r3, #99	; 0x63
 8001060:	d9d7      	bls.n	8001012 <get_Pulse_array+0x9a>
	}
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	f3af 8000 	nop.w
 8001070:	66666666 	.word	0x66666666
 8001074:	400a6666 	.word	0x400a6666
 8001078:	200000ad 	.word	0x200000ad
 800107c:	45800000 	.word	0x45800000
 8001080:	20000328 	.word	0x20000328
 8001084:	00000000 	.word	0x00000000

08001088 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001088:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800108c:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
 8001090:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001092:	f004 ffb7 	bl	8006004 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001096:	f004 fa03 	bl	80054a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800109a:	f004 fc49 	bl	8005930 <MX_GPIO_Init>
	MX_DMA_Init();
 800109e:	f004 fc29 	bl	80058f4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80010a2:	f004 fbf7 	bl	8005894 <MX_USART2_UART_Init>
	MX_ADC3_Init();
 80010a6:	f004 fa63 	bl	8005570 <MX_ADC3_Init>
	MX_TIM1_Init();
 80010aa:	f004 fafb 	bl	80056a4 <MX_TIM1_Init>
	MX_TIM2_Init();
 80010ae:	f004 fba5 	bl	80057fc <MX_TIM2_Init>
	MX_DAC1_Init();
 80010b2:	f004 facd 	bl	8005650 <MX_DAC1_Init>
	/* USER CODE BEGIN 2 */


	HAL_UART_Transmit(&huart2, StudentNUM, 13, 20);
 80010b6:	2314      	movs	r3, #20
 80010b8:	220d      	movs	r2, #13
 80010ba:	49d5      	ldr	r1, [pc, #852]	; (8001410 <main+0x388>)
 80010bc:	48d5      	ldr	r0, [pc, #852]	; (8001414 <main+0x38c>)
 80010be:	f00a fb39 	bl	800b734 <HAL_UART_Transmit>

	//	HAL_TIM_Base_Start(&htim2);

	HAL_UART_Receive_IT(&huart2, Rxdata, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	49d4      	ldr	r1, [pc, #848]	; (8001418 <main+0x390>)
 80010c6:	48d3      	ldr	r0, [pc, #844]	; (8001414 <main+0x38c>)
 80010c8:	f00a fbc8 	bl	800b85c <HAL_UART_Receive_IT>


	GPIO_PinState pinstate;

	uint32_t tLast1 = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
	uint8_t buttonState1 = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 32eb 	strb.w	r3, [r7, #747]	; 0x2eb

	GPIO_PinState pinstatel;

	uint32_t tLast1l = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
	uint8_t buttonState1l = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 32e3 	strb.w	r3, [r7, #739]	; 0x2e3

	GPIO_PinState pinstater;

	uint32_t tLast1r = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
	uint8_t buttonState1r = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db

	GPIO_PinState pinstateu;

	uint32_t tLast1u = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
	uint8_t buttonState1u = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 32d3 	strb.w	r3, [r7, #723]	; 0x2d3

	GPIO_PinState pinstated;

	uint32_t tLast1d = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
	uint8_t buttonState1d = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	f887 32cb 	strb.w	r3, [r7, #715]	; 0x2cb

	uint16_t DC_value[100];
	uint16_t AC_value[100];
	uint8_t measurment_mode = 1;
 8001108:	2301      	movs	r3, #1
 800110a:	f887 32ca 	strb.w	r3, [r7, #714]	; 0x2ca
	uint8_t menu_mode = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
	uint8_t DC_measure = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 32c9 	strb.w	r3, [r7, #713]	; 0x2c9
	uint8_t DCidx;
	uint16_t AC_measure = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
	uint16_t ACidx;
	uint32_t DC_CS = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
	uint32_t AC_CS = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
	volatile uint8_t parameter_a;
	volatile uint8_t parameter_o;
	volatile uint8_t parameter_f;
	volatile uint8_t parameter_d;
	volatile uint8_t parameter_c;
	volatile uint8_t signal_d = 1;
 800112c:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
	volatile uint8_t signal_s = 0;
 8001134:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
	volatile uint8_t signal_p =0;
 800113c:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]

	uint8_t output = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 32b3 	strb.w	r3, [r7, #691]	; 0x2b3
	uint8_t count = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 32b2 	strb.w	r3, [r7, #690]	; 0x2b2
	uint16_t f1 = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	f8a7 32b0 	strh.w	r3, [r7, #688]	; 0x2b0
	uint16_t f2 = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	f8a7 3280 	strh.w	r3, [r7, #640]	; 0x280
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800115c:	2100      	movs	r1, #0
 800115e:	48af      	ldr	r0, [pc, #700]	; (800141c <main+0x394>)
 8001160:	f009 f924 	bl	800a3ac <HAL_TIM_OC_Start_IT>
	display_msg = 1;
 8001164:	4bae      	ldr	r3, [pc, #696]	; (8001420 <main+0x398>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	//int row = 0;
	//int col = 0;

	uint8_t offset_output_value[4];
	offset_output_value[0] = 1;
 800116a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
	offset_output_value[1] = 2;
 8001172:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001176:	2202      	movs	r2, #2
 8001178:	705a      	strb	r2, [r3, #1]
	offset_output_value[2] = 0;
 800117a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800117e:	2200      	movs	r2, #0
 8001180:	709a      	strb	r2, [r3, #2]
	offset_output_value[3] = 0;
 8001182:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001186:	2200      	movs	r2, #0
 8001188:	70da      	strb	r2, [r3, #3]

	uint8_t amplitude_output_value[4];
	amplitude_output_value[0] = 1;
 800118a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
	amplitude_output_value[1] = 0;
 8001192:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001196:	2200      	movs	r2, #0
 8001198:	705a      	strb	r2, [r3, #1]
	amplitude_output_value[2] = 0;
 800119a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800119e:	2200      	movs	r2, #0
 80011a0:	709a      	strb	r2, [r3, #2]
	amplitude_output_value[3] = 0;
 80011a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011a6:	2200      	movs	r2, #0
 80011a8:	70da      	strb	r2, [r3, #3]

	uint8_t frequency_output_value[4];
	frequency_output_value[0] = 1;
 80011aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	frequency_output_value[1] = 0;
 80011b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011b6:	2200      	movs	r2, #0
 80011b8:	705a      	strb	r2, [r3, #1]
	frequency_output_value[2] = 0;
 80011ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011be:	2200      	movs	r2, #0
 80011c0:	709a      	strb	r2, [r3, #2]
	frequency_output_value[3] = 0;
 80011c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011c6:	2200      	movs	r2, #0
 80011c8:	70da      	strb	r2, [r3, #3]

	uint8_t DC_offset_output_value[4];
	DC_offset_output_value[0] = 1;
 80011ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
	DC_offset_output_value[1] = 2;
 80011d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011d6:	2202      	movs	r2, #2
 80011d8:	705a      	strb	r2, [r3, #1]
	DC_offset_output_value[2] = 0;
 80011da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011de:	2200      	movs	r2, #0
 80011e0:	709a      	strb	r2, [r3, #2]
	DC_offset_output_value[3] = 0;
 80011e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011e6:	2200      	movs	r2, #0
 80011e8:	70da      	strb	r2, [r3, #3]

	float DAC_amplitude_output = 1000;
 80011ea:	4b8e      	ldr	r3, [pc, #568]	; (8001424 <main+0x39c>)
 80011ec:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
	int DAC_amplitude_output_int = 1000;
 80011f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f4:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
	float DAC_offset_output = 1200;
 80011f8:	4b8b      	ldr	r3, [pc, #556]	; (8001428 <main+0x3a0>)
 80011fa:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
	int DAC_offset_output_int = 1200;
 80011fe:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001202:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
	int DAC_frequency_output_int =1000;
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	uint16_t DAC_frequency_output = 1000;
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	f8a7 329a 	strh.w	r3, [r7, #666]	; 0x29a
	float DAC_DC_offset = 1200;
 8001216:	4b84      	ldr	r3, [pc, #528]	; (8001428 <main+0x3a0>)
 8001218:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	int DAC_DC_Offset_int = 1200;
 800121c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001220:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
	float DAC_DC_val;
	TIM2->ARR = (72e6/(DAC_frequency_output*1000)) - 1;
 8001224:	f8b7 329a 	ldrh.w	r3, [r7, #666]	; 0x29a
 8001228:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f97f 	bl	8000534 <__aeabi_i2d>
 8001236:	4603      	mov	r3, r0
 8001238:	460c      	mov	r4, r1
 800123a:	461a      	mov	r2, r3
 800123c:	4623      	mov	r3, r4
 800123e:	a172      	add	r1, pc, #456	; (adr r1, 8001408 <main+0x380>)
 8001240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001244:	f7ff fb0a 	bl	800085c <__aeabi_ddiv>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4618      	mov	r0, r3
 800124e:	4621      	mov	r1, r4
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b75      	ldr	r3, [pc, #468]	; (800142c <main+0x3a4>)
 8001256:	f7ff f81f 	bl	8000298 <__aeabi_dsub>
 800125a:	4603      	mov	r3, r0
 800125c:	460c      	mov	r4, r1
 800125e:	461a      	mov	r2, r3
 8001260:	4623      	mov	r3, r4
 8001262:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff fc8f 	bl	8000b8c <__aeabi_d2uiz>
 800126e:	4603      	mov	r3, r0
 8001270:	62e3      	str	r3, [r4, #44]	; 0x2c
	uint8_t write_to_lcd = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
	// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
	uint8_t com_to_lcd = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	uint8_t command_2;
	uint32_t send_com_lcd;


	/////
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001284:	486a      	ldr	r0, [pc, #424]	; (8001430 <main+0x3a8>)
 8001286:	f007 fbc9 	bl	8008a1c <HAL_GPIO_WritePin>
	// Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
	Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOC, GPIOC };
 800128a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800128e:	4a69      	ldr	r2, [pc, #420]	; (8001434 <main+0x3ac>)
 8001290:	461c      	mov	r4, r3
 8001292:	4613      	mov	r3, r2
 8001294:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_PinType pins[] = {GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_6, GPIO_PIN_8};
 800129a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800129e:	4a66      	ldr	r2, [pc, #408]	; (8001438 <main+0x3b0>)
 80012a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a4:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	// Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	lcd = Lcd_create(ports, pins, GPIOC, GPIO_PIN_4, GPIOB, GPIO_PIN_11, LCD_4_BIT_MODE);
 80012a8:	f107 041c 	add.w	r4, r7, #28
 80012ac:	4638      	mov	r0, r7
 80012ae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80012b2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80012b6:	2300      	movs	r3, #0
 80012b8:	9303      	str	r3, [sp, #12]
 80012ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012be:	9302      	str	r3, [sp, #8]
 80012c0:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <main+0x3a8>)
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	2310      	movs	r3, #16
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	4b5c      	ldr	r3, [pc, #368]	; (800143c <main+0x3b4>)
 80012ca:	f7ff fccf 	bl	8000c6c <Lcd_create>
 80012ce:	463b      	mov	r3, r7
 80012d0:	461d      	mov	r5, r3
 80012d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012da:	e884 0003 	stmia.w	r4, {r0, r1}
	while (1)
	{


		//middle
		pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80012de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f007 fb81 	bl	80089ec <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
		if (buttonState1 == 0)
 80012f0:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d113      	bne.n	8001320 <main+0x298>
		{
			if ((pinstate == GPIO_PIN_RESET) && ((HAL_GetTick() - tLast1) >= 10))
 80012f8:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d129      	bne.n	8001354 <main+0x2cc>
 8001300:	f004 feda 	bl	80060b8 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b09      	cmp	r3, #9
 800130e:	d921      	bls.n	8001354 <main+0x2cc>
			{
				// button pushed down
				buttonState1 = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	f887 32eb 	strb.w	r3, [r7, #747]	; 0x2eb
				tLast1 = HAL_GetTick();
 8001316:	f004 fecf 	bl	80060b8 <HAL_GetTick>
 800131a:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
 800131e:	e019      	b.n	8001354 <main+0x2cc>
			}
		}
		else if (buttonState1 == 1)
 8001320:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8001324:	2b01      	cmp	r3, #1
 8001326:	d115      	bne.n	8001354 <main+0x2cc>
		{
			if ((pinstate == GPIO_PIN_SET) && ((HAL_GetTick() - tLast1) >= 10))
 8001328:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 800132c:	2b01      	cmp	r3, #1
 800132e:	d111      	bne.n	8001354 <main+0x2cc>
 8001330:	f004 fec2 	bl	80060b8 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b09      	cmp	r3, #9
 800133e:	d909      	bls.n	8001354 <main+0x2cc>
			{
				// button released
				run = 1;
 8001340:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <main+0x3b8>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
				buttonState1 = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	f887 32eb 	strb.w	r3, [r7, #747]	; 0x2eb
				tLast1 = HAL_GetTick();
 800134c:	f004 feb4 	bl	80060b8 <HAL_GetTick>
 8001350:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
		}
		//middle


		//down
		pinstated = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001354:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001358:	4838      	ldr	r0, [pc, #224]	; (800143c <main+0x3b4>)
 800135a:	f007 fb47 	bl	80089ec <HAL_GPIO_ReadPin>
 800135e:	4603      	mov	r3, r0
 8001360:	f887 327d 	strb.w	r3, [r7, #637]	; 0x27d
		if (buttonState1d == 0)
 8001364:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001368:	2b00      	cmp	r3, #0
 800136a:	d113      	bne.n	8001394 <main+0x30c>
		{
			if ((pinstated == GPIO_PIN_RESET) && ((HAL_GetTick() - tLast1d) >= 10))
 800136c:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 8001370:	2b00      	cmp	r3, #0
 8001372:	d129      	bne.n	80013c8 <main+0x340>
 8001374:	f004 fea0 	bl	80060b8 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b09      	cmp	r3, #9
 8001382:	d921      	bls.n	80013c8 <main+0x340>
			{
				// button pushed down
				buttonState1d = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	f887 32cb 	strb.w	r3, [r7, #715]	; 0x2cb
				tLast1d = HAL_GetTick();
 800138a:	f004 fe95 	bl	80060b8 <HAL_GetTick>
 800138e:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
 8001392:	e019      	b.n	80013c8 <main+0x340>
			}
		}
		else if (buttonState1d == 1)
 8001394:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001398:	2b01      	cmp	r3, #1
 800139a:	d115      	bne.n	80013c8 <main+0x340>
		{
			if ((pinstated == GPIO_PIN_SET) && ((HAL_GetTick() - tLast1d) >= 10))
 800139c:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d111      	bne.n	80013c8 <main+0x340>
 80013a4:	f004 fe88 	bl	80060b8 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b09      	cmp	r3, #9
 80013b2:	d909      	bls.n	80013c8 <main+0x340>
			{
				// button released
				run = 1;
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <main+0x3b8>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
				//				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);

				buttonState1d = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 32cb 	strb.w	r3, [r7, #715]	; 0x2cb
				tLast1d = HAL_GetTick();
 80013c0:	f004 fe7a 	bl	80060b8 <HAL_GetTick>
 80013c4:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
		}
		//down


		//up
		pinstateu = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80013c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013cc:	4818      	ldr	r0, [pc, #96]	; (8001430 <main+0x3a8>)
 80013ce:	f007 fb0d 	bl	80089ec <HAL_GPIO_ReadPin>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f887 327c 	strb.w	r3, [r7, #636]	; 0x27c
		if (buttonState1u == 0)
 80013d8:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d131      	bne.n	8001444 <main+0x3bc>
		{
			if ((pinstateu == GPIO_PIN_RESET) && ((HAL_GetTick() - tLast1u) >= 10))
 80013e0:	f897 327c 	ldrb.w	r3, [r7, #636]	; 0x27c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d147      	bne.n	8001478 <main+0x3f0>
 80013e8:	f004 fe66 	bl	80060b8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b09      	cmp	r3, #9
 80013f6:	d93f      	bls.n	8001478 <main+0x3f0>
			{
				// button pushed down
				buttonState1u = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	f887 32d3 	strb.w	r3, [r7, #723]	; 0x2d3
				tLast1u = HAL_GetTick();
 80013fe:	f004 fe5b 	bl	80060b8 <HAL_GetTick>
 8001402:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
 8001406:	e037      	b.n	8001478 <main+0x3f0>
 8001408:	00000000 	.word	0x00000000
 800140c:	41912a88 	.word	0x41912a88
 8001410:	20000000 	.word	0x20000000
 8001414:	20001510 	.word	0x20001510
 8001418:	20000310 	.word	0x20000310
 800141c:	200004c0 	.word	0x200004c0
 8001420:	20001596 	.word	0x20001596
 8001424:	447a0000 	.word	0x447a0000
 8001428:	44960000 	.word	0x44960000
 800142c:	3ff00000 	.word	0x3ff00000
 8001430:	48000400 	.word	0x48000400
 8001434:	0800e554 	.word	0x0800e554
 8001438:	0800e564 	.word	0x0800e564
 800143c:	48000800 	.word	0x48000800
 8001440:	2000000f 	.word	0x2000000f
			}
		}
		else if (buttonState1u == 1)
 8001444:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d115      	bne.n	8001478 <main+0x3f0>
		{
			if ((pinstateu == GPIO_PIN_SET) && ((HAL_GetTick() - tLast1u) >= 10))
 800144c:	f897 327c 	ldrb.w	r3, [r7, #636]	; 0x27c
 8001450:	2b01      	cmp	r3, #1
 8001452:	d111      	bne.n	8001478 <main+0x3f0>
 8001454:	f004 fe30 	bl	80060b8 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b09      	cmp	r3, #9
 8001462:	d909      	bls.n	8001478 <main+0x3f0>
			{
				// button released
				run = 1;
 8001464:	4b31      	ldr	r3, [pc, #196]	; (800152c <main+0x4a4>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
				//				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
				buttonState1u = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 32d3 	strb.w	r3, [r7, #723]	; 0x2d3
				tLast1u = HAL_GetTick();
 8001470:	f004 fe22 	bl	80060b8 <HAL_GetTick>
 8001474:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		}
		//up


		//left
		pinstatel = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147c:	482c      	ldr	r0, [pc, #176]	; (8001530 <main+0x4a8>)
 800147e:	f007 fab5 	bl	80089ec <HAL_GPIO_ReadPin>
 8001482:	4603      	mov	r3, r0
 8001484:	f887 327b 	strb.w	r3, [r7, #635]	; 0x27b
		if (buttonState1l == 0)
 8001488:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d113      	bne.n	80014b8 <main+0x430>
		{
			if ((pinstatel == GPIO_PIN_RESET) && ((HAL_GetTick() - tLast1l) >= 10))
 8001490:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 8001494:	2b00      	cmp	r3, #0
 8001496:	d129      	bne.n	80014ec <main+0x464>
 8001498:	f004 fe0e 	bl	80060b8 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b09      	cmp	r3, #9
 80014a6:	d921      	bls.n	80014ec <main+0x464>
			{
				// button pushed down
				buttonState1l = 1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	f887 32e3 	strb.w	r3, [r7, #739]	; 0x2e3
				tLast1l = HAL_GetTick();
 80014ae:	f004 fe03 	bl	80060b8 <HAL_GetTick>
 80014b2:	f8c7 02e4 	str.w	r0, [r7, #740]	; 0x2e4
 80014b6:	e019      	b.n	80014ec <main+0x464>
			}
		}
		else if (buttonState1l == 1)
 80014b8:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d115      	bne.n	80014ec <main+0x464>
		{
			if ((pinstatel == GPIO_PIN_SET) && ((HAL_GetTick() - tLast1l) >= 10))
 80014c0:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d111      	bne.n	80014ec <main+0x464>
 80014c8:	f004 fdf6 	bl	80060b8 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b09      	cmp	r3, #9
 80014d6:	d909      	bls.n	80014ec <main+0x464>
			{
				// button released
				run = 1;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <main+0x4a4>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
				//				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
				buttonState1l = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	f887 32e3 	strb.w	r3, [r7, #739]	; 0x2e3
				tLast1l = HAL_GetTick();
 80014e4:	f004 fde8 	bl	80060b8 <HAL_GetTick>
 80014e8:	f8c7 02e4 	str.w	r0, [r7, #740]	; 0x2e4
		}
		//left


		//right
		pinstater = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80014ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f0:	480f      	ldr	r0, [pc, #60]	; (8001530 <main+0x4a8>)
 80014f2:	f007 fa7b 	bl	80089ec <HAL_GPIO_ReadPin>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f887 327a 	strb.w	r3, [r7, #634]	; 0x27a
		if (buttonState1r == 0)
 80014fc:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8001500:	2b00      	cmp	r3, #0
 8001502:	d117      	bne.n	8001534 <main+0x4ac>
		{
			if ((pinstater == GPIO_PIN_RESET) && ((HAL_GetTick() - tLast1r) >= 10))
 8001504:	f897 327a 	ldrb.w	r3, [r7, #634]	; 0x27a
 8001508:	2b00      	cmp	r3, #0
 800150a:	d12d      	bne.n	8001568 <main+0x4e0>
 800150c:	f004 fdd4 	bl	80060b8 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b09      	cmp	r3, #9
 800151a:	d925      	bls.n	8001568 <main+0x4e0>
			{
				// button pushed down
				buttonState1r = 1;
 800151c:	2301      	movs	r3, #1
 800151e:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
				tLast1r = HAL_GetTick();
 8001522:	f004 fdc9 	bl	80060b8 <HAL_GetTick>
 8001526:	f8c7 02dc 	str.w	r0, [r7, #732]	; 0x2dc
 800152a:	e01d      	b.n	8001568 <main+0x4e0>
 800152c:	2000000f 	.word	0x2000000f
 8001530:	48000400 	.word	0x48000400
			}
		}
		else if (buttonState1r == 1)
 8001534:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8001538:	2b01      	cmp	r3, #1
 800153a:	d115      	bne.n	8001568 <main+0x4e0>
		{
			if ((pinstater == GPIO_PIN_SET) && ((HAL_GetTick() - tLast1r) >= 10))
 800153c:	f897 327a 	ldrb.w	r3, [r7, #634]	; 0x27a
 8001540:	2b01      	cmp	r3, #1
 8001542:	d111      	bne.n	8001568 <main+0x4e0>
 8001544:	f004 fdb8 	bl	80060b8 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b09      	cmp	r3, #9
 8001552:	d909      	bls.n	8001568 <main+0x4e0>
			{
				// button released
				run = 1;
 8001554:	4bb5      	ldr	r3, [pc, #724]	; (800182c <main+0x7a4>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
				//				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
				buttonState1r = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
				tLast1r = HAL_GetTick();
 8001560:	f004 fdaa 	bl	80060b8 <HAL_GetTick>
 8001564:	f8c7 02dc 	str.w	r0, [r7, #732]	; 0x2dc

		///////////////////////////////////////////////////////////////MENU//////////////////////


		//readings
		if(rows == 0 && cols == 1)
 8001568:	4bb1      	ldr	r3, [pc, #708]	; (8001830 <main+0x7a8>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d145      	bne.n	80015fc <main+0x574>
 8001570:	4bb0      	ldr	r3, [pc, #704]	; (8001834 <main+0x7ac>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d141      	bne.n	80015fc <main+0x574>
		{

			if (buttonState1d && run)
 8001578:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <main+0x506>
 8001580:	4baa      	ldr	r3, [pc, #680]	; (800182c <main+0x7a4>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <main+0x506>
			{
				run = 0;
 8001588:	4ba8      	ldr	r3, [pc, #672]	; (800182c <main+0x7a4>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 800158e:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d006      	beq.n	80015a4 <main+0x51c>
 8001596:	4ba5      	ldr	r3, [pc, #660]	; (800182c <main+0x7a4>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <main+0x51c>
			{
				run = 0;
 800159e:	4ba3      	ldr	r3, [pc, #652]	; (800182c <main+0x7a4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 80015a4:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d011      	beq.n	80015d0 <main+0x548>
 80015ac:	4b9f      	ldr	r3, [pc, #636]	; (800182c <main+0x7a4>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00d      	beq.n	80015d0 <main+0x548>
			{
				Lcd_clear(&lcd);
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fbf3 	bl	8000da4 <Lcd_clear>
				rows = 0;
 80015be:	4b9c      	ldr	r3, [pc, #624]	; (8001830 <main+0x7a8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80015c4:	4b9b      	ldr	r3, [pc, #620]	; (8001834 <main+0x7ac>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
				run = 0;
 80015ca:	4b98      	ldr	r3, [pc, #608]	; (800182c <main+0x7a4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 80015d0:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <main+0x55e>
 80015d8:	4b94      	ldr	r3, [pc, #592]	; (800182c <main+0x7a4>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <main+0x55e>
			{
				run = 0;
 80015e0:	4b92      	ldr	r3, [pc, #584]	; (800182c <main+0x7a4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 80015e6:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <main+0x574>
 80015ee:	4b8f      	ldr	r3, [pc, #572]	; (800182c <main+0x7a4>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <main+0x574>
			{
				run = 0;
 80015f6:	4b8d      	ldr	r3, [pc, #564]	; (800182c <main+0x7a4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
			}
			//			start = 1;
			//run = 0;
		}

		if (rows == 0 && cols == 0 && startupp == 1) {
 80015fc:	4b8c      	ldr	r3, [pc, #560]	; (8001830 <main+0x7a8>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d117      	bne.n	8001634 <main+0x5ac>
 8001604:	4b8b      	ldr	r3, [pc, #556]	; (8001834 <main+0x7ac>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d113      	bne.n	8001634 <main+0x5ac>
 800160c:	4b8a      	ldr	r3, [pc, #552]	; (8001838 <main+0x7b0>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d10f      	bne.n	8001634 <main+0x5ac>
			Lcd_cursor(&lcd, 0, 0);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fba7 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Start Message");
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	4985      	ldr	r1, [pc, #532]	; (800183c <main+0x7b4>)
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fb83 	bl	8000d34 <Lcd_string>
			startupp = 0;
 800162e:	4b82      	ldr	r3, [pc, #520]	; (8001838 <main+0x7b0>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
		}

		//startmsg default//////////////////////////////////////////////////////////
		if(rows == 0 && cols == 0)
 8001634:	4b7e      	ldr	r3, [pc, #504]	; (8001830 <main+0x7a8>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d150      	bne.n	80016de <main+0x656>
 800163c:	4b7d      	ldr	r3, [pc, #500]	; (8001834 <main+0x7ac>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d14c      	bne.n	80016de <main+0x656>
		{
			if (buttonState1d && run)
 8001644:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001648:	2b00      	cmp	r3, #0
 800164a:	d011      	beq.n	8001670 <main+0x5e8>
 800164c:	4b77      	ldr	r3, [pc, #476]	; (800182c <main+0x7a4>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00d      	beq.n	8001670 <main+0x5e8>
			{
				Lcd_clear(&lcd);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fba3 	bl	8000da4 <Lcd_clear>
				rows = 1;
 800165e:	4b74      	ldr	r3, [pc, #464]	; (8001830 <main+0x7a8>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001664:	4b73      	ldr	r3, [pc, #460]	; (8001834 <main+0x7ac>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
				run = 0;
 800166a:	4b70      	ldr	r3, [pc, #448]	; (800182c <main+0x7a4>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 8001670:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <main+0x5fe>
 8001678:	4b6c      	ldr	r3, [pc, #432]	; (800182c <main+0x7a4>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <main+0x5fe>
			{
				run = 0;
 8001680:	4b6a      	ldr	r3, [pc, #424]	; (800182c <main+0x7a4>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
			}

			if (buttonState1 && run)
 8001686:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 800168a:	2b00      	cmp	r3, #0
 800168c:	d011      	beq.n	80016b2 <main+0x62a>
 800168e:	4b67      	ldr	r3, [pc, #412]	; (800182c <main+0x7a4>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00d      	beq.n	80016b2 <main+0x62a>
			{
				Lcd_clear(&lcd);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fb82 	bl	8000da4 <Lcd_clear>
				rows = 0;
 80016a0:	4b63      	ldr	r3, [pc, #396]	; (8001830 <main+0x7a8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
				cols = 1;
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <main+0x7ac>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
				run = 0;
 80016ac:	4b5f      	ldr	r3, [pc, #380]	; (800182c <main+0x7a4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 80016b2:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <main+0x640>
 80016ba:	4b5c      	ldr	r3, [pc, #368]	; (800182c <main+0x7a4>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d002      	beq.n	80016c8 <main+0x640>
			{
				run = 0;
 80016c2:	4b5a      	ldr	r3, [pc, #360]	; (800182c <main+0x7a4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 80016c8:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <main+0x656>
 80016d0:	4b56      	ldr	r3, [pc, #344]	; (800182c <main+0x7a4>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <main+0x656>
			{
				run = 0;
 80016d8:	4b54      	ldr	r3, [pc, #336]	; (800182c <main+0x7a4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]

		}


		//measure mode//////////////////////////////////////////////////////////
		if (rows == 1 && cols == 0)
 80016de:	4b54      	ldr	r3, [pc, #336]	; (8001830 <main+0x7a8>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d161      	bne.n	80017aa <main+0x722>
 80016e6:	4b53      	ldr	r3, [pc, #332]	; (8001834 <main+0x7ac>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d15d      	bne.n	80017aa <main+0x722>
		{
			if (buttonState1u && run)
 80016ee:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d011      	beq.n	800171a <main+0x692>
 80016f6:	4b4d      	ldr	r3, [pc, #308]	; (800182c <main+0x7a4>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00d      	beq.n	800171a <main+0x692>
			{
				Lcd_clear(&lcd);
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fb4e 	bl	8000da4 <Lcd_clear>

				rows = 0;
 8001708:	4b49      	ldr	r3, [pc, #292]	; (8001830 <main+0x7a8>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
				cols = 0;
 800170e:	4b49      	ldr	r3, [pc, #292]	; (8001834 <main+0x7ac>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001714:	4b45      	ldr	r3, [pc, #276]	; (800182c <main+0x7a4>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 800171a:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 800171e:	2b00      	cmp	r3, #0
 8001720:	d006      	beq.n	8001730 <main+0x6a8>
 8001722:	4b42      	ldr	r3, [pc, #264]	; (800182c <main+0x7a4>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <main+0x6a8>
			{
				run = 0;
 800172a:	4b40      	ldr	r3, [pc, #256]	; (800182c <main+0x7a4>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 8001730:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <main+0x6be>
 8001738:	4b3c      	ldr	r3, [pc, #240]	; (800182c <main+0x7a4>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <main+0x6be>
			{
				run = 0;
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <main+0x7a4>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
			}

			if (buttonState1r && run == 1)
 8001746:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 800174a:	2b00      	cmp	r3, #0
 800174c:	d011      	beq.n	8001772 <main+0x6ea>
 800174e:	4b37      	ldr	r3, [pc, #220]	; (800182c <main+0x7a4>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10d      	bne.n	8001772 <main+0x6ea>
			{
				Lcd_clear(&lcd);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fb22 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001760:	4b33      	ldr	r3, [pc, #204]	; (8001830 <main+0x7a8>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8001766:	4b33      	ldr	r3, [pc, #204]	; (8001834 <main+0x7ac>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
				run = 0;
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <main+0x7a4>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1d && run)
 8001772:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001776:	2b00      	cmp	r3, #0
 8001778:	d017      	beq.n	80017aa <main+0x722>
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <main+0x7a4>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d013      	beq.n	80017aa <main+0x722>
			{
				Lcd_clear(&lcd);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fb0c 	bl	8000da4 <Lcd_clear>
				rows = 2;
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <main+0x7a8>)
 800178e:	2202      	movs	r2, #2
 8001790:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <main+0x7ac>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <main+0x7a4>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
				DC_measure = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	f887 32c9 	strb.w	r3, [r7, #713]	; 0x2c9
				AC_measure = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
			}
		}


		//sig gen mode//////////////////////////////////////////////////////////////////////////////////////////////
		if (rows == 1 && cols == 1)
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <main+0x7a8>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d167      	bne.n	8001882 <main+0x7fa>
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <main+0x7ac>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d163      	bne.n	8001882 <main+0x7fa>
		{
			if (buttonState1d && run)
 80017ba:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d011      	beq.n	80017e6 <main+0x75e>
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <main+0x7a4>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00d      	beq.n	80017e6 <main+0x75e>
			{
				Lcd_clear(&lcd);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fae8 	bl	8000da4 <Lcd_clear>
				rows = 2;
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <main+0x7a8>)
 80017d6:	2202      	movs	r2, #2
 80017d8:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <main+0x7ac>)
 80017dc:	2204      	movs	r2, #4
 80017de:	701a      	strb	r2, [r3, #0]
				run = 0;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <main+0x7a4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 80017e6:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d011      	beq.n	8001812 <main+0x78a>
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <main+0x7a4>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00d      	beq.n	8001812 <main+0x78a>
			{
				Lcd_clear(&lcd);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fad2 	bl	8000da4 <Lcd_clear>
				rows = 0;
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <main+0x7a8>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <main+0x7ac>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
				run = 0;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <main+0x7a4>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 8001812:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8001816:	2b00      	cmp	r3, #0
 8001818:	d012      	beq.n	8001840 <main+0x7b8>
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <main+0x7a4>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00e      	beq.n	8001840 <main+0x7b8>
			{
				run = 0;
 8001822:	4b02      	ldr	r3, [pc, #8]	; (800182c <main+0x7a4>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e00a      	b.n	8001840 <main+0x7b8>
 800182a:	bf00      	nop
 800182c:	2000000f 	.word	0x2000000f
 8001830:	200000af 	.word	0x200000af
 8001834:	200000ae 	.word	0x200000ae
 8001838:	20000010 	.word	0x20000010
 800183c:	0800e424 	.word	0x0800e424
			}
			if (buttonState1l && run)
 8001840:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d011      	beq.n	800186c <main+0x7e4>
 8001848:	4bb5      	ldr	r3, [pc, #724]	; (8001b20 <main+0xa98>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00d      	beq.n	800186c <main+0x7e4>
			{
				Lcd_clear(&lcd);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff faa5 	bl	8000da4 <Lcd_clear>
				rows = 1;
 800185a:	4bb2      	ldr	r3, [pc, #712]	; (8001b24 <main+0xa9c>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001860:	4bb1      	ldr	r3, [pc, #708]	; (8001b28 <main+0xaa0>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001866:	4bae      	ldr	r3, [pc, #696]	; (8001b20 <main+0xa98>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 800186c:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <main+0x7fa>
 8001874:	4baa      	ldr	r3, [pc, #680]	; (8001b20 <main+0xa98>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <main+0x7fa>
			{
				run = 0;
 800187c:	4ba8      	ldr	r3, [pc, #672]	; (8001b20 <main+0xa98>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
			}
		}


		//DCvoltage///////////////////////////////////////////////////////////////////
		if (rows == 2 && cols == 0)
 8001882:	4ba8      	ldr	r3, [pc, #672]	; (8001b24 <main+0xa9c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d156      	bne.n	8001938 <main+0x8b0>
 800188a:	4ba7      	ldr	r3, [pc, #668]	; (8001b28 <main+0xaa0>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d152      	bne.n	8001938 <main+0x8b0>
		{
			//			DC_measure = 1;
			//			AC_measure = 0;
			if (buttonState1d && run)
 8001892:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <main+0x820>
 800189a:	4ba1      	ldr	r3, [pc, #644]	; (8001b20 <main+0xa98>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <main+0x820>
			{
				run = 0;
 80018a2:	4b9f      	ldr	r3, [pc, #636]	; (8001b20 <main+0xa98>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 80018a8:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d011      	beq.n	80018d4 <main+0x84c>
 80018b0:	4b9b      	ldr	r3, [pc, #620]	; (8001b20 <main+0xa98>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00d      	beq.n	80018d4 <main+0x84c>
			{
				Lcd_clear(&lcd);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fa71 	bl	8000da4 <Lcd_clear>
				rows = 1;
 80018c2:	4b98      	ldr	r3, [pc, #608]	; (8001b24 <main+0xa9c>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80018c8:	4b97      	ldr	r3, [pc, #604]	; (8001b28 <main+0xaa0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
				run = 0;
 80018ce:	4b94      	ldr	r3, [pc, #592]	; (8001b20 <main+0xa98>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 80018d4:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00c      	beq.n	80018f6 <main+0x86e>
 80018dc:	4b90      	ldr	r3, [pc, #576]	; (8001b20 <main+0xa98>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <main+0x86e>
			{
				run = 0;
 80018e4:	4b8e      	ldr	r3, [pc, #568]	; (8001b20 <main+0xa98>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
				currentflag = 0;
 80018ea:	4b90      	ldr	r3, [pc, #576]	; (8001b2c <main+0xaa4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
				DC_measure = 1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f887 32c9 	strb.w	r3, [r7, #713]	; 0x2c9
			}
			if (buttonState1l && run)
 80018f6:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <main+0x884>
 80018fe:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <main+0xa98>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <main+0x884>
			{
				run = 0;
 8001906:	4b86      	ldr	r3, [pc, #536]	; (8001b20 <main+0xa98>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 800190c:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8001910:	2b00      	cmp	r3, #0
 8001912:	d011      	beq.n	8001938 <main+0x8b0>
 8001914:	4b82      	ldr	r3, [pc, #520]	; (8001b20 <main+0xa98>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00d      	beq.n	8001938 <main+0x8b0>
			{
				Lcd_clear(&lcd);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fa3f 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001926:	4b7f      	ldr	r3, [pc, #508]	; (8001b24 <main+0xa9c>)
 8001928:	2202      	movs	r2, #2
 800192a:	701a      	strb	r2, [r3, #0]
				cols = 1;
 800192c:	4b7e      	ldr	r3, [pc, #504]	; (8001b28 <main+0xaa0>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001932:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <main+0xa98>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
			}
		}


		//DCcurrent///////////////////////////////////////////////////////////////////////
		if (rows == 2 && cols == 1)
 8001938:	4b7a      	ldr	r3, [pc, #488]	; (8001b24 <main+0xa9c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d170      	bne.n	8001a22 <main+0x99a>
 8001940:	4b79      	ldr	r3, [pc, #484]	; (8001b28 <main+0xaa0>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d16c      	bne.n	8001a22 <main+0x99a>
		{
			if (buttonState1d && run)
 8001948:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <main+0x8d6>
 8001950:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <main+0xa98>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <main+0x8d6>
			{
				run = 0;
 8001958:	4b71      	ldr	r3, [pc, #452]	; (8001b20 <main+0xa98>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 800195e:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d011      	beq.n	800198a <main+0x902>
 8001966:	4b6e      	ldr	r3, [pc, #440]	; (8001b20 <main+0xa98>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00d      	beq.n	800198a <main+0x902>
			{
				Lcd_clear(&lcd);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fa16 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001978:	4b6a      	ldr	r3, [pc, #424]	; (8001b24 <main+0xa9c>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
				cols = 0;
 800197e:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <main+0xaa0>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001984:	4b66      	ldr	r3, [pc, #408]	; (8001b20 <main+0xa98>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 800198a:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00f      	beq.n	80019b2 <main+0x92a>
 8001992:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <main+0xa98>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <main+0x92a>
			{
				run = 0;
 800199a:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <main+0xa98>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
				DC_measure = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 32c9 	strb.w	r3, [r7, #713]	; 0x2c9
				AC_measure = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
				currentflag = 1;
 80019ac:	4b5f      	ldr	r3, [pc, #380]	; (8001b2c <main+0xaa4>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 80019b2:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d011      	beq.n	80019de <main+0x956>
 80019ba:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <main+0xa98>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00d      	beq.n	80019de <main+0x956>
			{
				Lcd_clear(&lcd);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f9ec 	bl	8000da4 <Lcd_clear>
				rows = 2;
 80019cc:	4b55      	ldr	r3, [pc, #340]	; (8001b24 <main+0xa9c>)
 80019ce:	2202      	movs	r2, #2
 80019d0:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80019d2:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <main+0xaa0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
				run = 0;
 80019d8:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <main+0xa98>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 80019de:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d01d      	beq.n	8001a22 <main+0x99a>
 80019e6:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <main+0xa98>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d019      	beq.n	8001a22 <main+0x99a>
			{
				DC_measure = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 32c9 	strb.w	r3, [r7, #713]	; 0x2c9
				AC_measure = 1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
				timer_interrupt = 1;
 80019fa:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <main+0xaa8>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
				measurment_mode = 1;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f887 32ca 	strb.w	r3, [r7, #714]	; 0x2ca
				Lcd_clear(&lcd);
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f9ca 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001a10:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <main+0xa9c>)
 8001a12:	2202      	movs	r2, #2
 8001a14:	701a      	strb	r2, [r3, #0]
				cols = 2;
 8001a16:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <main+0xaa0>)
 8001a18:	2202      	movs	r2, #2
 8001a1a:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001a1c:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <main+0xa98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
			}
		}


		//ACvoltage////////////////////////////////////////////////////////////////
		if (rows == 2 && cols == 2)
 8001a22:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <main+0xa9c>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d15e      	bne.n	8001ae8 <main+0xa60>
 8001a2a:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <main+0xaa0>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d15a      	bne.n	8001ae8 <main+0xa60>
		{
			//			AC_measure = 1;
			//			timer_interrupt = 1;
			//			measurment_mode = 1;

			if (buttonState1d && run)
 8001a32:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <main+0x9c0>
 8001a3a:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <main+0xa98>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <main+0x9c0>
			{
				run = 0;
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <main+0xa98>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 8001a48:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d011      	beq.n	8001a74 <main+0x9ec>
 8001a50:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <main+0xa98>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00d      	beq.n	8001a74 <main+0x9ec>
			{
				Lcd_clear(&lcd);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f9a1 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <main+0xa9c>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001a68:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <main+0xaa0>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <main+0xa98>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 8001a74:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d009      	beq.n	8001a90 <main+0xa08>
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <main+0xa98>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <main+0xa08>
			{
				AC_measure = 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
				run = 0;
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <main+0xa98>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]

			}
			if (buttonState1l && run)
 8001a90:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d011      	beq.n	8001abc <main+0xa34>
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <main+0xa98>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00d      	beq.n	8001abc <main+0xa34>
			{
				Lcd_clear(&lcd);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f97d 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <main+0xa9c>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <main+0xaa0>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <main+0xa98>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 8001abc:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d011      	beq.n	8001ae8 <main+0xa60>
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <main+0xa98>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00d      	beq.n	8001ae8 <main+0xa60>
			{
				Lcd_clear(&lcd);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f967 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <main+0xa9c>)
 8001ad8:	2202      	movs	r2, #2
 8001ada:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <main+0xaa0>)
 8001ade:	2203      	movs	r2, #3
 8001ae0:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <main+0xa98>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
			}
		}


		//ACcurrent//////////////////////////////////////////////////////////
		if (rows == 2 && cols == 3)
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <main+0xa9c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d164      	bne.n	8001bba <main+0xb32>
 8001af0:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <main+0xaa0>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d160      	bne.n	8001bba <main+0xb32>
		{
			if (buttonState1d && run)
 8001af8:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <main+0xa86>
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <main+0xa98>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <main+0xa86>
			{
				run = 0;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <main+0xa98>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 8001b0e:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01c      	beq.n	8001b50 <main+0xac8>
 8001b16:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <main+0xa98>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d018      	beq.n	8001b50 <main+0xac8>
 8001b1e:	e009      	b.n	8001b34 <main+0xaac>
 8001b20:	2000000f 	.word	0x2000000f
 8001b24:	200000af 	.word	0x200000af
 8001b28:	200000ae 	.word	0x200000ae
 8001b2c:	200002ba 	.word	0x200002ba
 8001b30:	20001665 	.word	0x20001665
			{
				Lcd_clear(&lcd);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f933 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001b3e:	4bb8      	ldr	r3, [pc, #736]	; (8001e20 <main+0xd98>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001b44:	4bb7      	ldr	r3, [pc, #732]	; (8001e24 <main+0xd9c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001b4a:	4bb7      	ldr	r3, [pc, #732]	; (8001e28 <main+0xda0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 8001b50:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00f      	beq.n	8001b78 <main+0xaf0>
 8001b58:	4bb3      	ldr	r3, [pc, #716]	; (8001e28 <main+0xda0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00b      	beq.n	8001b78 <main+0xaf0>
			{
				run = 0;
 8001b60:	4bb1      	ldr	r3, [pc, #708]	; (8001e28 <main+0xda0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
				//				AC_measure = 1;
				currentflag = 1;
 8001b66:	4bb1      	ldr	r3, [pc, #708]	; (8001e2c <main+0xda4>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
				DC_measure = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 32c9 	strb.w	r3, [r7, #713]	; 0x2c9
				AC_measure = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
			}
			if (buttonState1l && run)
 8001b78:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d011      	beq.n	8001ba4 <main+0xb1c>
 8001b80:	4ba9      	ldr	r3, [pc, #676]	; (8001e28 <main+0xda0>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <main+0xb1c>
			{
				Lcd_clear(&lcd);
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff f909 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001b92:	4ba3      	ldr	r3, [pc, #652]	; (8001e20 <main+0xd98>)
 8001b94:	2202      	movs	r2, #2
 8001b96:	701a      	strb	r2, [r3, #0]
				cols = 2;
 8001b98:	4ba2      	ldr	r3, [pc, #648]	; (8001e24 <main+0xd9c>)
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001b9e:	4ba2      	ldr	r3, [pc, #648]	; (8001e28 <main+0xda0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 8001ba4:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <main+0xb32>
 8001bac:	4b9e      	ldr	r3, [pc, #632]	; (8001e28 <main+0xda0>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <main+0xb32>
			{
				run = 0;
 8001bb4:	4b9c      	ldr	r3, [pc, #624]	; (8001e28 <main+0xda0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
			}
		}


		//Type/////////////////////////////////////////////////////////////////
		if (rows == 2 && cols == 4)
 8001bba:	4b99      	ldr	r3, [pc, #612]	; (8001e20 <main+0xd98>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d15b      	bne.n	8001c7a <main+0xbf2>
 8001bc2:	4b98      	ldr	r3, [pc, #608]	; (8001e24 <main+0xd9c>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d157      	bne.n	8001c7a <main+0xbf2>
		{
			if (buttonState1d && run)
 8001bca:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d011      	beq.n	8001bf6 <main+0xb6e>
 8001bd2:	4b95      	ldr	r3, [pc, #596]	; (8001e28 <main+0xda0>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00d      	beq.n	8001bf6 <main+0xb6e>
			{
				Lcd_clear(&lcd);
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f8e0 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001be4:	4b8e      	ldr	r3, [pc, #568]	; (8001e20 <main+0xd98>)
 8001be6:	2203      	movs	r2, #3
 8001be8:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001bea:	4b8e      	ldr	r3, [pc, #568]	; (8001e24 <main+0xd9c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001bf0:	4b8d      	ldr	r3, [pc, #564]	; (8001e28 <main+0xda0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 8001bf6:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d011      	beq.n	8001c22 <main+0xb9a>
 8001bfe:	4b8a      	ldr	r3, [pc, #552]	; (8001e28 <main+0xda0>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <main+0xb9a>
			{
				Lcd_clear(&lcd);
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f8ca 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001c10:	4b83      	ldr	r3, [pc, #524]	; (8001e20 <main+0xd98>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001c16:	4b83      	ldr	r3, [pc, #524]	; (8001e24 <main+0xd9c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001c1c:	4b82      	ldr	r3, [pc, #520]	; (8001e28 <main+0xda0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 8001c22:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d006      	beq.n	8001c38 <main+0xbb0>
 8001c2a:	4b7f      	ldr	r3, [pc, #508]	; (8001e28 <main+0xda0>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <main+0xbb0>
			{
				run = 0;
 8001c32:	4b7d      	ldr	r3, [pc, #500]	; (8001e28 <main+0xda0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 8001c38:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <main+0xbc6>
 8001c40:	4b79      	ldr	r3, [pc, #484]	; (8001e28 <main+0xda0>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <main+0xbc6>
			{
				run = 0;
 8001c48:	4b77      	ldr	r3, [pc, #476]	; (8001e28 <main+0xda0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 8001c4e:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d011      	beq.n	8001c7a <main+0xbf2>
 8001c56:	4b74      	ldr	r3, [pc, #464]	; (8001e28 <main+0xda0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00d      	beq.n	8001c7a <main+0xbf2>
			{
				Lcd_clear(&lcd);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f89e 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001c68:	4b6d      	ldr	r3, [pc, #436]	; (8001e20 <main+0xd98>)
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	701a      	strb	r2, [r3, #0]
				cols = 5;
 8001c6e:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <main+0xd9c>)
 8001c70:	2205      	movs	r2, #5
 8001c72:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001c74:	4b6c      	ldr	r3, [pc, #432]	; (8001e28 <main+0xda0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
			}
		}


		//Parameter/////////////////////////////////////////////////////////
		if (rows == 2 && cols == 5)
 8001c7a:	4b69      	ldr	r3, [pc, #420]	; (8001e20 <main+0xd98>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d166      	bne.n	8001d50 <main+0xcc8>
 8001c82:	4b68      	ldr	r3, [pc, #416]	; (8001e24 <main+0xd9c>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d162      	bne.n	8001d50 <main+0xcc8>
		{
			if (buttonState1d && run)
 8001c8a:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d011      	beq.n	8001cb6 <main+0xc2e>
 8001c92:	4b65      	ldr	r3, [pc, #404]	; (8001e28 <main+0xda0>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00d      	beq.n	8001cb6 <main+0xc2e>
			{
				Lcd_clear(&lcd);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f880 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001ca4:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <main+0xd98>)
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8001caa:	4b5e      	ldr	r3, [pc, #376]	; (8001e24 <main+0xd9c>)
 8001cac:	2203      	movs	r2, #3
 8001cae:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001cb0:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <main+0xda0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 8001cb6:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d011      	beq.n	8001ce2 <main+0xc5a>
 8001cbe:	4b5a      	ldr	r3, [pc, #360]	; (8001e28 <main+0xda0>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00d      	beq.n	8001ce2 <main+0xc5a>
			{
				Lcd_clear(&lcd);
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f86a 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001cd0:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <main+0xd98>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001cd6:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <main+0xd9c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001cdc:	4b52      	ldr	r3, [pc, #328]	; (8001e28 <main+0xda0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 8001ce2:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <main+0xc70>
 8001cea:	4b4f      	ldr	r3, [pc, #316]	; (8001e28 <main+0xda0>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <main+0xc70>
			{
				run = 0;
 8001cf2:	4b4d      	ldr	r3, [pc, #308]	; (8001e28 <main+0xda0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 8001cf8:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d011      	beq.n	8001d24 <main+0xc9c>
 8001d00:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <main+0xda0>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00d      	beq.n	8001d24 <main+0xc9c>
			{
				Lcd_clear(&lcd);
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff f849 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001d12:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <main+0xd98>)
 8001d14:	2202      	movs	r2, #2
 8001d16:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001d18:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <main+0xd9c>)
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001d1e:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <main+0xda0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 8001d24:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d011      	beq.n	8001d50 <main+0xcc8>
 8001d2c:	4b3e      	ldr	r3, [pc, #248]	; (8001e28 <main+0xda0>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00d      	beq.n	8001d50 <main+0xcc8>
			{
				Lcd_clear(&lcd);
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f833 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <main+0xd98>)
 8001d40:	2202      	movs	r2, #2
 8001d42:	701a      	strb	r2, [r3, #0]
				cols = 6;
 8001d44:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <main+0xd9c>)
 8001d46:	2206      	movs	r2, #6
 8001d48:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001d4a:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <main+0xda0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
			}
		}


		//Output/////////////////////////////////////////////////////////
		if (rows == 2 && cols == 6)
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <main+0xd98>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d15b      	bne.n	8001e10 <main+0xd88>
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <main+0xd9c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b06      	cmp	r3, #6
 8001d5e:	d157      	bne.n	8001e10 <main+0xd88>
		{
			if (buttonState1d && run)
 8001d60:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d011      	beq.n	8001d8c <main+0xd04>
 8001d68:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <main+0xda0>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <main+0xd04>
			{
				Lcd_clear(&lcd);
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f815 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <main+0xd98>)
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	701a      	strb	r2, [r3, #0]
				cols = 7;
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <main+0xd9c>)
 8001d82:	2207      	movs	r2, #7
 8001d84:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001d86:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <main+0xda0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 8001d8c:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d011      	beq.n	8001db8 <main+0xd30>
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <main+0xda0>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00d      	beq.n	8001db8 <main+0xd30>
			{
				Lcd_clear(&lcd);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe ffff 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <main+0xd98>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <main+0xd9c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <main+0xda0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 8001db8:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <main+0xd46>
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <main+0xda0>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <main+0xd46>
			{
				run = 0;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <main+0xda0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 8001dce:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d011      	beq.n	8001dfa <main+0xd72>
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <main+0xda0>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00d      	beq.n	8001dfa <main+0xd72>
			{
				Lcd_clear(&lcd);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe ffde 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <main+0xd98>)
 8001dea:	2202      	movs	r2, #2
 8001dec:	701a      	strb	r2, [r3, #0]
				cols = 5;
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <main+0xd9c>)
 8001df0:	2205      	movs	r2, #5
 8001df2:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <main+0xda0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 8001dfa:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <main+0xd88>
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <main+0xda0>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <main+0xd88>
			{
				run = 0;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <main+0xda0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
			}
		}


		//Type DC////////////////////////////////////////////////
		if (rows == 3 && cols == 0)
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <main+0xd98>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d169      	bne.n	8001eec <main+0xe64>
 8001e18:	4b02      	ldr	r3, [pc, #8]	; (8001e24 <main+0xd9c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	e008      	b.n	8001e30 <main+0xda8>
 8001e1e:	bf00      	nop
 8001e20:	200000af 	.word	0x200000af
 8001e24:	200000ae 	.word	0x200000ae
 8001e28:	2000000f 	.word	0x2000000f
 8001e2c:	200002ba 	.word	0x200002ba
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d15b      	bne.n	8001eec <main+0xe64>
		{
			if (buttonState1d && run)
 8001e34:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <main+0xdc2>
 8001e3c:	4bb9      	ldr	r3, [pc, #740]	; (8002124 <main+0x109c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <main+0xdc2>
			{
				run = 0;
 8001e44:	4bb7      	ldr	r3, [pc, #732]	; (8002124 <main+0x109c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 8001e4a:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d011      	beq.n	8001e76 <main+0xdee>
 8001e52:	4bb4      	ldr	r3, [pc, #720]	; (8002124 <main+0x109c>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00d      	beq.n	8001e76 <main+0xdee>
			{
				Lcd_clear(&lcd);
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe ffa0 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001e64:	4bb0      	ldr	r3, [pc, #704]	; (8002128 <main+0x10a0>)
 8001e66:	2202      	movs	r2, #2
 8001e68:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001e6a:	4bb0      	ldr	r3, [pc, #704]	; (800212c <main+0x10a4>)
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001e70:	4bac      	ldr	r3, [pc, #688]	; (8002124 <main+0x109c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 8001e76:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d015      	beq.n	8001eaa <main+0xe22>
 8001e7e:	4ba9      	ldr	r3, [pc, #676]	; (8002124 <main+0x109c>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d011      	beq.n	8001eaa <main+0xe22>
			{
				itsDC = 1;
 8001e86:	4baa      	ldr	r3, [pc, #680]	; (8002130 <main+0x10a8>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
				signal_d = 1;
 8001e8c:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
				signal_s = 0;
 8001e94:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
				signal_p = 0;
 8001e9c:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001ea4:	4b9f      	ldr	r3, [pc, #636]	; (8002124 <main+0x109c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 8001eaa:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d006      	beq.n	8001ec0 <main+0xe38>
 8001eb2:	4b9c      	ldr	r3, [pc, #624]	; (8002124 <main+0x109c>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <main+0xe38>
			{
				run = 0;
 8001eba:	4b9a      	ldr	r3, [pc, #616]	; (8002124 <main+0x109c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 8001ec0:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d011      	beq.n	8001eec <main+0xe64>
 8001ec8:	4b96      	ldr	r3, [pc, #600]	; (8002124 <main+0x109c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <main+0xe64>
			{
				Lcd_clear(&lcd);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe ff65 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001eda:	4b93      	ldr	r3, [pc, #588]	; (8002128 <main+0x10a0>)
 8001edc:	2203      	movs	r2, #3
 8001ede:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8001ee0:	4b92      	ldr	r3, [pc, #584]	; (800212c <main+0x10a4>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001ee6:	4b8f      	ldr	r3, [pc, #572]	; (8002124 <main+0x109c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
			}
		}


		//Type sinusoidal///////////////////////////////////////////////////
		if (rows == 3 && cols == 1)
 8001eec:	4b8e      	ldr	r3, [pc, #568]	; (8002128 <main+0x10a0>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d16a      	bne.n	8001fca <main+0xf42>
 8001ef4:	4b8d      	ldr	r3, [pc, #564]	; (800212c <main+0x10a4>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d166      	bne.n	8001fca <main+0xf42>
		{
			if (buttonState1d && run)
 8001efc:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d006      	beq.n	8001f12 <main+0xe8a>
 8001f04:	4b87      	ldr	r3, [pc, #540]	; (8002124 <main+0x109c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <main+0xe8a>
			{
				run = 0;
 8001f0c:	4b85      	ldr	r3, [pc, #532]	; (8002124 <main+0x109c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 8001f12:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d011      	beq.n	8001f3e <main+0xeb6>
 8001f1a:	4b82      	ldr	r3, [pc, #520]	; (8002124 <main+0x109c>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00d      	beq.n	8001f3e <main+0xeb6>
			{
				Lcd_clear(&lcd);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe ff3c 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001f2c:	4b7e      	ldr	r3, [pc, #504]	; (8002128 <main+0x10a0>)
 8001f2e:	2202      	movs	r2, #2
 8001f30:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001f32:	4b7e      	ldr	r3, [pc, #504]	; (800212c <main+0x10a4>)
 8001f34:	2204      	movs	r2, #4
 8001f36:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001f38:	4b7a      	ldr	r3, [pc, #488]	; (8002124 <main+0x109c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 8001f3e:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d015      	beq.n	8001f72 <main+0xeea>
 8001f46:	4b77      	ldr	r3, [pc, #476]	; (8002124 <main+0x109c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d011      	beq.n	8001f72 <main+0xeea>
			{
				itsAC = 1;
 8001f4e:	4b79      	ldr	r3, [pc, #484]	; (8002134 <main+0x10ac>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
				signal_d = 0;
 8001f54:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
				signal_p = 0;
 8001f5c:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
				signal_s = 1;
 8001f64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001f6c:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <main+0x109c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 8001f72:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d011      	beq.n	8001f9e <main+0xf16>
 8001f7a:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <main+0x109c>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00d      	beq.n	8001f9e <main+0xf16>
			{
				Lcd_clear(&lcd);
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe ff0c 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001f8c:	4b66      	ldr	r3, [pc, #408]	; (8002128 <main+0x10a0>)
 8001f8e:	2203      	movs	r2, #3
 8001f90:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001f92:	4b66      	ldr	r3, [pc, #408]	; (800212c <main+0x10a4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001f98:	4b62      	ldr	r3, [pc, #392]	; (8002124 <main+0x109c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 8001f9e:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d011      	beq.n	8001fca <main+0xf42>
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <main+0x109c>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00d      	beq.n	8001fca <main+0xf42>
			{
				Lcd_clear(&lcd);
 8001fae:	f107 031c 	add.w	r3, r7, #28
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fef6 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001fb8:	4b5b      	ldr	r3, [pc, #364]	; (8002128 <main+0x10a0>)
 8001fba:	2203      	movs	r2, #3
 8001fbc:	701a      	strb	r2, [r3, #0]
				cols = 2;
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	; (800212c <main+0x10a4>)
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	701a      	strb	r2, [r3, #0]
				run = 0;
 8001fc4:	4b57      	ldr	r3, [pc, #348]	; (8002124 <main+0x109c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
			}
		}


		//Type pulse///////////////////////////////////////////////////////////////////
		if (rows == 3 && cols == 2)
 8001fca:	4b57      	ldr	r3, [pc, #348]	; (8002128 <main+0x10a0>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d15c      	bne.n	800208c <main+0x1004>
 8001fd2:	4b56      	ldr	r3, [pc, #344]	; (800212c <main+0x10a4>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d158      	bne.n	800208c <main+0x1004>
		{
			if (buttonState1d && run)
 8001fda:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <main+0xf68>
 8001fe2:	4b50      	ldr	r3, [pc, #320]	; (8002124 <main+0x109c>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <main+0xf68>
			{
				run = 0;
 8001fea:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <main+0x109c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 8001ff0:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d011      	beq.n	800201c <main+0xf94>
 8001ff8:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <main+0x109c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00d      	beq.n	800201c <main+0xf94>
			{
				Lcd_clear(&lcd);
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fecd 	bl	8000da4 <Lcd_clear>
				rows = 2;
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <main+0x10a0>)
 800200c:	2202      	movs	r2, #2
 800200e:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8002010:	4b46      	ldr	r3, [pc, #280]	; (800212c <main+0x10a4>)
 8002012:	2204      	movs	r2, #4
 8002014:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002016:	4b43      	ldr	r3, [pc, #268]	; (8002124 <main+0x109c>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 800201c:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8002020:	2b00      	cmp	r3, #0
 8002022:	d012      	beq.n	800204a <main+0xfc2>
 8002024:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <main+0x109c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00e      	beq.n	800204a <main+0xfc2>
			{
				signal_p = 1;
 800202c:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
				signal_s = 0;
 8002034:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
				signal_d = 0;
 800203c:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002044:	4b37      	ldr	r3, [pc, #220]	; (8002124 <main+0x109c>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 800204a:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d011      	beq.n	8002076 <main+0xfee>
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <main+0x109c>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00d      	beq.n	8002076 <main+0xfee>
			{
				Lcd_clear(&lcd);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fea0 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002064:	4b30      	ldr	r3, [pc, #192]	; (8002128 <main+0x10a0>)
 8002066:	2203      	movs	r2, #3
 8002068:	701a      	strb	r2, [r3, #0]
				cols = 1;
 800206a:	4b30      	ldr	r3, [pc, #192]	; (800212c <main+0x10a4>)
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002070:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <main+0x109c>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 8002076:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <main+0x1004>
 800207e:	4b29      	ldr	r3, [pc, #164]	; (8002124 <main+0x109c>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <main+0x1004>
			{
				run = 0;
 8002086:	4b27      	ldr	r3, [pc, #156]	; (8002124 <main+0x109c>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
			}
		}


		//Param Amplitude///////////////////////////////////////////////////////////
		if (rows == 3 && cols == 3)
 800208c:	4b26      	ldr	r3, [pc, #152]	; (8002128 <main+0x10a0>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d167      	bne.n	8002164 <main+0x10dc>
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <main+0x10a4>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d163      	bne.n	8002164 <main+0x10dc>
		{
			if (buttonState1d && run)
 800209c:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d011      	beq.n	80020c8 <main+0x1040>
 80020a4:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <main+0x109c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <main+0x1040>
			{
				Lcd_clear(&lcd);
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fe77 	bl	8000da4 <Lcd_clear>
				rows = 4;
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <main+0x10a0>)
 80020b8:	2204      	movs	r2, #4
 80020ba:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <main+0x10a4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
				run = 0;
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <main+0x109c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 80020c8:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d011      	beq.n	80020f4 <main+0x106c>
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <main+0x109c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00d      	beq.n	80020f4 <main+0x106c>
			{
				Lcd_clear(&lcd);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fe61 	bl	8000da4 <Lcd_clear>
				rows = 2;
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <main+0x10a0>)
 80020e4:	2202      	movs	r2, #2
 80020e6:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <main+0x10a4>)
 80020ea:	2204      	movs	r2, #4
 80020ec:	701a      	strb	r2, [r3, #0]
				run = 0;
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <main+0x109c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 80020f4:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <main+0x1082>
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <main+0x109c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <main+0x1082>
			{
				run = 0;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <main+0x109c>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 800210a:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d012      	beq.n	8002138 <main+0x10b0>
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <main+0x109c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00e      	beq.n	8002138 <main+0x10b0>
			{
				run = 0;
 800211a:	4b02      	ldr	r3, [pc, #8]	; (8002124 <main+0x109c>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	e00a      	b.n	8002138 <main+0x10b0>
 8002122:	bf00      	nop
 8002124:	2000000f 	.word	0x2000000f
 8002128:	200000af 	.word	0x200000af
 800212c:	200000ae 	.word	0x200000ae
 8002130:	200000b0 	.word	0x200000b0
 8002134:	200000b1 	.word	0x200000b1
			}
			if (buttonState1r && run)
 8002138:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 800213c:	2b00      	cmp	r3, #0
 800213e:	d011      	beq.n	8002164 <main+0x10dc>
 8002140:	4bb7      	ldr	r3, [pc, #732]	; (8002420 <main+0x1398>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00d      	beq.n	8002164 <main+0x10dc>
			{
				Lcd_clear(&lcd);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fe29 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002152:	4bb4      	ldr	r3, [pc, #720]	; (8002424 <main+0x139c>)
 8002154:	2203      	movs	r2, #3
 8002156:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8002158:	4bb3      	ldr	r3, [pc, #716]	; (8002428 <main+0x13a0>)
 800215a:	2204      	movs	r2, #4
 800215c:	701a      	strb	r2, [r3, #0]
				run = 0;
 800215e:	4bb0      	ldr	r3, [pc, #704]	; (8002420 <main+0x1398>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
			}
		}


		//Param Offset//////////////////////////////////////////////////////////////////////
		if (rows == 3 && cols == 4)
 8002164:	4baf      	ldr	r3, [pc, #700]	; (8002424 <main+0x139c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d166      	bne.n	800223a <main+0x11b2>
 800216c:	4bae      	ldr	r3, [pc, #696]	; (8002428 <main+0x13a0>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d162      	bne.n	800223a <main+0x11b2>
		{
			if (buttonState1d && run)
 8002174:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8002178:	2b00      	cmp	r3, #0
 800217a:	d011      	beq.n	80021a0 <main+0x1118>
 800217c:	4ba8      	ldr	r3, [pc, #672]	; (8002420 <main+0x1398>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00d      	beq.n	80021a0 <main+0x1118>
			{

				Lcd_clear(&lcd);
 8002184:	f107 031c 	add.w	r3, r7, #28
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fe0b 	bl	8000da4 <Lcd_clear>
				rows = 4;
 800218e:	4ba5      	ldr	r3, [pc, #660]	; (8002424 <main+0x139c>)
 8002190:	2204      	movs	r2, #4
 8002192:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8002194:	4ba4      	ldr	r3, [pc, #656]	; (8002428 <main+0x13a0>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]

				run = 0;
 800219a:	4ba1      	ldr	r3, [pc, #644]	; (8002420 <main+0x1398>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 80021a0:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d011      	beq.n	80021cc <main+0x1144>
 80021a8:	4b9d      	ldr	r3, [pc, #628]	; (8002420 <main+0x1398>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00d      	beq.n	80021cc <main+0x1144>
			{
				Lcd_clear(&lcd);
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fdf5 	bl	8000da4 <Lcd_clear>
				rows = 2;
 80021ba:	4b9a      	ldr	r3, [pc, #616]	; (8002424 <main+0x139c>)
 80021bc:	2202      	movs	r2, #2
 80021be:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80021c0:	4b99      	ldr	r3, [pc, #612]	; (8002428 <main+0x13a0>)
 80021c2:	2204      	movs	r2, #4
 80021c4:	701a      	strb	r2, [r3, #0]
				run = 0;
 80021c6:	4b96      	ldr	r3, [pc, #600]	; (8002420 <main+0x1398>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 80021cc:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <main+0x115a>
 80021d4:	4b92      	ldr	r3, [pc, #584]	; (8002420 <main+0x1398>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <main+0x115a>
			{
				//itsDC = 0;
				run = 0;
 80021dc:	4b90      	ldr	r3, [pc, #576]	; (8002420 <main+0x1398>)
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 80021e2:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d011      	beq.n	800220e <main+0x1186>
 80021ea:	4b8d      	ldr	r3, [pc, #564]	; (8002420 <main+0x1398>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <main+0x1186>
			{
				Lcd_clear(&lcd);
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fdd4 	bl	8000da4 <Lcd_clear>
				rows = 3;
 80021fc:	4b89      	ldr	r3, [pc, #548]	; (8002424 <main+0x139c>)
 80021fe:	2203      	movs	r2, #3
 8002200:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <main+0x13a0>)
 8002204:	2203      	movs	r2, #3
 8002206:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002208:	4b85      	ldr	r3, [pc, #532]	; (8002420 <main+0x1398>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 800220e:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8002212:	2b00      	cmp	r3, #0
 8002214:	d011      	beq.n	800223a <main+0x11b2>
 8002216:	4b82      	ldr	r3, [pc, #520]	; (8002420 <main+0x1398>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00d      	beq.n	800223a <main+0x11b2>
			{
				Lcd_clear(&lcd);
 800221e:	f107 031c 	add.w	r3, r7, #28
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fdbe 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002228:	4b7e      	ldr	r3, [pc, #504]	; (8002424 <main+0x139c>)
 800222a:	2203      	movs	r2, #3
 800222c:	701a      	strb	r2, [r3, #0]
				cols = 5;
 800222e:	4b7e      	ldr	r3, [pc, #504]	; (8002428 <main+0x13a0>)
 8002230:	2205      	movs	r2, #5
 8002232:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002234:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <main+0x1398>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
			}
		}


		//Param Freq////////////////////////////////////////////////////////////
		if (rows == 3 && cols == 5)
 800223a:	4b7a      	ldr	r3, [pc, #488]	; (8002424 <main+0x139c>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d166      	bne.n	8002310 <main+0x1288>
 8002242:	4b79      	ldr	r3, [pc, #484]	; (8002428 <main+0x13a0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d162      	bne.n	8002310 <main+0x1288>
		{
			if (buttonState1d && run)
 800224a:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 800224e:	2b00      	cmp	r3, #0
 8002250:	d011      	beq.n	8002276 <main+0x11ee>
 8002252:	4b73      	ldr	r3, [pc, #460]	; (8002420 <main+0x1398>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00d      	beq.n	8002276 <main+0x11ee>
			{
				//if(output)
				//{
				Lcd_clear(&lcd);
 800225a:	f107 031c 	add.w	r3, r7, #28
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fda0 	bl	8000da4 <Lcd_clear>
				rows = 4;
 8002264:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <main+0x139c>)
 8002266:	2204      	movs	r2, #4
 8002268:	701a      	strb	r2, [r3, #0]
				cols = 2;
 800226a:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <main+0x13a0>)
 800226c:	2202      	movs	r2, #2
 800226e:	701a      	strb	r2, [r3, #0]

				//}
				run = 0;
 8002270:	4b6b      	ldr	r3, [pc, #428]	; (8002420 <main+0x1398>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]

			}
			if (buttonState1u && run)
 8002276:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d011      	beq.n	80022a2 <main+0x121a>
 800227e:	4b68      	ldr	r3, [pc, #416]	; (8002420 <main+0x1398>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <main+0x121a>
			{
				Lcd_clear(&lcd);
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fd8a 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8002290:	4b64      	ldr	r3, [pc, #400]	; (8002424 <main+0x139c>)
 8002292:	2202      	movs	r2, #2
 8002294:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8002296:	4b64      	ldr	r3, [pc, #400]	; (8002428 <main+0x13a0>)
 8002298:	2204      	movs	r2, #4
 800229a:	701a      	strb	r2, [r3, #0]
				run = 0;
 800229c:	4b60      	ldr	r3, [pc, #384]	; (8002420 <main+0x1398>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 80022a2:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <main+0x1230>
 80022aa:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <main+0x1398>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <main+0x1230>
			{
				run = 0;
 80022b2:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <main+0x1398>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 80022b8:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d011      	beq.n	80022e4 <main+0x125c>
 80022c0:	4b57      	ldr	r3, [pc, #348]	; (8002420 <main+0x1398>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <main+0x125c>
			{
				Lcd_clear(&lcd);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fd69 	bl	8000da4 <Lcd_clear>
				rows = 3;
 80022d2:	4b54      	ldr	r3, [pc, #336]	; (8002424 <main+0x139c>)
 80022d4:	2203      	movs	r2, #3
 80022d6:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80022d8:	4b53      	ldr	r3, [pc, #332]	; (8002428 <main+0x13a0>)
 80022da:	2204      	movs	r2, #4
 80022dc:	701a      	strb	r2, [r3, #0]
				run = 0;
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <main+0x1398>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 80022e4:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d011      	beq.n	8002310 <main+0x1288>
 80022ec:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <main+0x1398>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <main+0x1288>
			{
				Lcd_clear(&lcd);
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fd53 	bl	8000da4 <Lcd_clear>
				rows = 3;
 80022fe:	4b49      	ldr	r3, [pc, #292]	; (8002424 <main+0x139c>)
 8002300:	2203      	movs	r2, #3
 8002302:	701a      	strb	r2, [r3, #0]
				cols = 6;
 8002304:	4b48      	ldr	r3, [pc, #288]	; (8002428 <main+0x13a0>)
 8002306:	2206      	movs	r2, #6
 8002308:	701a      	strb	r2, [r3, #0]
				run = 0;
 800230a:	4b45      	ldr	r3, [pc, #276]	; (8002420 <main+0x1398>)
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
			}
		}


		//Param Duty Cycle////////////////////////////////////////////////////////////
		if (rows == 3 && cols == 6)
 8002310:	4b44      	ldr	r3, [pc, #272]	; (8002424 <main+0x139c>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d15b      	bne.n	80023d0 <main+0x1348>
 8002318:	4b43      	ldr	r3, [pc, #268]	; (8002428 <main+0x13a0>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b06      	cmp	r3, #6
 800231e:	d157      	bne.n	80023d0 <main+0x1348>
		{
			if (buttonState1d && run)
 8002320:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8002324:	2b00      	cmp	r3, #0
 8002326:	d011      	beq.n	800234c <main+0x12c4>
 8002328:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <main+0x1398>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <main+0x12c4>
			{
				Lcd_clear(&lcd);
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fd35 	bl	8000da4 <Lcd_clear>
				rows = 4;
 800233a:	4b3a      	ldr	r3, [pc, #232]	; (8002424 <main+0x139c>)
 800233c:	2204      	movs	r2, #4
 800233e:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8002340:	4b39      	ldr	r3, [pc, #228]	; (8002428 <main+0x13a0>)
 8002342:	2204      	movs	r2, #4
 8002344:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002346:	4b36      	ldr	r3, [pc, #216]	; (8002420 <main+0x1398>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 800234c:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d011      	beq.n	8002378 <main+0x12f0>
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <main+0x1398>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00d      	beq.n	8002378 <main+0x12f0>
			{
				Lcd_clear(&lcd);
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fd1f 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8002366:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <main+0x139c>)
 8002368:	2202      	movs	r2, #2
 800236a:	701a      	strb	r2, [r3, #0]
				cols = 4;
 800236c:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <main+0x13a0>)
 800236e:	2204      	movs	r2, #4
 8002370:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002372:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <main+0x1398>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 8002378:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <main+0x1306>
 8002380:	4b27      	ldr	r3, [pc, #156]	; (8002420 <main+0x1398>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <main+0x1306>
			{
				run = 0;
 8002388:	4b25      	ldr	r3, [pc, #148]	; (8002420 <main+0x1398>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 800238e:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d011      	beq.n	80023ba <main+0x1332>
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <main+0x1398>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00d      	beq.n	80023ba <main+0x1332>
			{
				Lcd_clear(&lcd);
 800239e:	f107 031c 	add.w	r3, r7, #28
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fcfe 	bl	8000da4 <Lcd_clear>
				rows = 3;
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <main+0x139c>)
 80023aa:	2203      	movs	r2, #3
 80023ac:	701a      	strb	r2, [r3, #0]
				cols = 5;
 80023ae:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <main+0x13a0>)
 80023b0:	2205      	movs	r2, #5
 80023b2:	701a      	strb	r2, [r3, #0]
				run = 0;
 80023b4:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <main+0x1398>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 80023ba:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d006      	beq.n	80023d0 <main+0x1348>
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <main+0x1398>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <main+0x1348>
			{
				run = 0;
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <main+0x1398>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
			}
		}


		//Output on///////////////////////////////////////////////////////////////////////
		if (rows == 3 && cols == 7)
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <main+0x139c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d15b      	bne.n	8002490 <main+0x1408>
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <main+0x13a0>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b07      	cmp	r3, #7
 80023de:	d157      	bne.n	8002490 <main+0x1408>
		{
			if (buttonState1d && run)
 80023e0:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <main+0x136e>
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <main+0x1398>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <main+0x136e>
			{
				run = 0;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <main+0x1398>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 80023f6:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d019      	beq.n	8002432 <main+0x13aa>
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <main+0x1398>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d015      	beq.n	8002432 <main+0x13aa>
			{
				Lcd_clear(&lcd);
 8002406:	f107 031c 	add.w	r3, r7, #28
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fcca 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <main+0x139c>)
 8002412:	2202      	movs	r2, #2
 8002414:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <main+0x13a0>)
 8002418:	2204      	movs	r2, #4
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	e006      	b.n	800242c <main+0x13a4>
 800241e:	bf00      	nop
 8002420:	2000000f 	.word	0x2000000f
 8002424:	200000af 	.word	0x200000af
 8002428:	200000ae 	.word	0x200000ae
				run = 0;
 800242c:	4bc8      	ldr	r3, [pc, #800]	; (8002750 <main+0x16c8>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 8002432:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <main+0x13c6>
 800243a:	4bc5      	ldr	r3, [pc, #788]	; (8002750 <main+0x16c8>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <main+0x13c6>
			{
				output = 1;
 8002442:	2301      	movs	r3, #1
 8002444:	f887 32b3 	strb.w	r3, [r7, #691]	; 0x2b3
				run = 0;
 8002448:	4bc1      	ldr	r3, [pc, #772]	; (8002750 <main+0x16c8>)
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 800244e:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <main+0x13dc>
 8002456:	4bbe      	ldr	r3, [pc, #760]	; (8002750 <main+0x16c8>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <main+0x13dc>
			{
				run = 0;
 800245e:	4bbc      	ldr	r3, [pc, #752]	; (8002750 <main+0x16c8>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 8002464:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8002468:	2b00      	cmp	r3, #0
 800246a:	d011      	beq.n	8002490 <main+0x1408>
 800246c:	4bb8      	ldr	r3, [pc, #736]	; (8002750 <main+0x16c8>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00d      	beq.n	8002490 <main+0x1408>
			{
				Lcd_clear(&lcd);
 8002474:	f107 031c 	add.w	r3, r7, #28
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe fc93 	bl	8000da4 <Lcd_clear>
				rows = 3;
 800247e:	4bb5      	ldr	r3, [pc, #724]	; (8002754 <main+0x16cc>)
 8002480:	2203      	movs	r2, #3
 8002482:	701a      	strb	r2, [r3, #0]
				cols = 8;
 8002484:	4bb4      	ldr	r3, [pc, #720]	; (8002758 <main+0x16d0>)
 8002486:	2208      	movs	r2, #8
 8002488:	701a      	strb	r2, [r3, #0]

				run = 0;
 800248a:	4bb1      	ldr	r3, [pc, #708]	; (8002750 <main+0x16c8>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
			}
		}


		//Output off/////////////////////////////////////////////////////////////////
		if (rows == 3 && cols == 8)
 8002490:	4bb0      	ldr	r3, [pc, #704]	; (8002754 <main+0x16cc>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d153      	bne.n	8002540 <main+0x14b8>
 8002498:	4baf      	ldr	r3, [pc, #700]	; (8002758 <main+0x16d0>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d14f      	bne.n	8002540 <main+0x14b8>
		{
			if (buttonState1d && run)
 80024a0:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <main+0x142e>
 80024a8:	4ba9      	ldr	r3, [pc, #676]	; (8002750 <main+0x16c8>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <main+0x142e>
			{
				run = 0;
 80024b0:	4ba7      	ldr	r3, [pc, #668]	; (8002750 <main+0x16c8>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 80024b6:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d011      	beq.n	80024e2 <main+0x145a>
 80024be:	4ba4      	ldr	r3, [pc, #656]	; (8002750 <main+0x16c8>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <main+0x145a>
			{
				Lcd_clear(&lcd);
 80024c6:	f107 031c 	add.w	r3, r7, #28
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fc6a 	bl	8000da4 <Lcd_clear>
				rows = 2;
 80024d0:	4ba0      	ldr	r3, [pc, #640]	; (8002754 <main+0x16cc>)
 80024d2:	2202      	movs	r2, #2
 80024d4:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80024d6:	4ba0      	ldr	r3, [pc, #640]	; (8002758 <main+0x16d0>)
 80024d8:	2204      	movs	r2, #4
 80024da:	701a      	strb	r2, [r3, #0]
				run = 0;
 80024dc:	4b9c      	ldr	r3, [pc, #624]	; (8002750 <main+0x16c8>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 80024e2:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <main+0x1476>
 80024ea:	4b99      	ldr	r3, [pc, #612]	; (8002750 <main+0x16c8>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <main+0x1476>
			{
				output = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 32b3 	strb.w	r3, [r7, #691]	; 0x2b3
				run = 0;
 80024f8:	4b95      	ldr	r3, [pc, #596]	; (8002750 <main+0x16c8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 80024fe:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d011      	beq.n	800252a <main+0x14a2>
 8002506:	4b92      	ldr	r3, [pc, #584]	; (8002750 <main+0x16c8>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00d      	beq.n	800252a <main+0x14a2>
			{
				Lcd_clear(&lcd);
 800250e:	f107 031c 	add.w	r3, r7, #28
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fc46 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002518:	4b8e      	ldr	r3, [pc, #568]	; (8002754 <main+0x16cc>)
 800251a:	2203      	movs	r2, #3
 800251c:	701a      	strb	r2, [r3, #0]
				cols = 7;
 800251e:	4b8e      	ldr	r3, [pc, #568]	; (8002758 <main+0x16d0>)
 8002520:	2207      	movs	r2, #7
 8002522:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002524:	4b8a      	ldr	r3, [pc, #552]	; (8002750 <main+0x16c8>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 800252a:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 800252e:	2b00      	cmp	r3, #0
 8002530:	d006      	beq.n	8002540 <main+0x14b8>
 8002532:	4b87      	ldr	r3, [pc, #540]	; (8002750 <main+0x16c8>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <main+0x14b8>
			{
				run = 0;
 800253a:	4b85      	ldr	r3, [pc, #532]	; (8002750 <main+0x16c8>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
			}
		}


		//parameter amplitude vals////////////////////////////////////////////////////
		if (rows == 4 && cols == 0)
 8002540:	4b84      	ldr	r3, [pc, #528]	; (8002754 <main+0x16cc>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b04      	cmp	r3, #4
 8002546:	f040 812c 	bne.w	80027a2 <main+0x171a>
 800254a:	4b83      	ldr	r3, [pc, #524]	; (8002758 <main+0x16d0>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 8127 	bne.w	80027a2 <main+0x171a>
		{
			if (buttonState1d && run)
 8002554:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <main+0x14e2>
 800255c:	4b7c      	ldr	r3, [pc, #496]	; (8002750 <main+0x16c8>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <main+0x14e2>
			{
				run = 0;
 8002564:	4b7a      	ldr	r3, [pc, #488]	; (8002750 <main+0x16c8>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 800256a:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d011      	beq.n	8002596 <main+0x150e>
 8002572:	4b77      	ldr	r3, [pc, #476]	; (8002750 <main+0x16c8>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00d      	beq.n	8002596 <main+0x150e>
			{
				Lcd_clear(&lcd);
 800257a:	f107 031c 	add.w	r3, r7, #28
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fc10 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002584:	4b73      	ldr	r3, [pc, #460]	; (8002754 <main+0x16cc>)
 8002586:	2203      	movs	r2, #3
 8002588:	701a      	strb	r2, [r3, #0]
				cols = 3;
 800258a:	4b73      	ldr	r3, [pc, #460]	; (8002758 <main+0x16d0>)
 800258c:	2203      	movs	r2, #3
 800258e:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002590:	4b6f      	ldr	r3, [pc, #444]	; (8002750 <main+0x16c8>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 8002596:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 800259a:	2b00      	cmp	r3, #0
 800259c:	d015      	beq.n	80025ca <main+0x1542>
 800259e:	4b6c      	ldr	r3, [pc, #432]	; (8002750 <main+0x16c8>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d011      	beq.n	80025ca <main+0x1542>
			{
				setAmplitude = 1;
 80025a6:	4b6d      	ldr	r3, [pc, #436]	; (800275c <main+0x16d4>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
				signal_p = 0;
 80025ac:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
				signal_s = 1;
 80025b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
				signal_d = 0;
 80025bc:	f107 0361 	add.w	r3, r7, #97	; 0x61
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
				run = 0;
 80025c4:	4b62      	ldr	r3, [pc, #392]	; (8002750 <main+0x16c8>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 80025ca:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d068      	beq.n	80026a4 <main+0x161c>
 80025d2:	4b5f      	ldr	r3, [pc, #380]	; (8002750 <main+0x16c8>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d064      	beq.n	80026a4 <main+0x161c>
			{
				DAC_amplitude_output_int = DAC_amplitude_output_int - 100;
 80025da:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80025de:	3b64      	subs	r3, #100	; 0x64
 80025e0:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
				if(DAC_amplitude_output_int <= 0)
 80025e4:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	dc02      	bgt.n	80025f2 <main+0x156a>
				{
					DAC_amplitude_output_int = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
				}
				amplitude_output_value[0] = ((DAC_amplitude_output_int/1000) % 10);
 80025f2:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80025f6:	4a5a      	ldr	r2, [pc, #360]	; (8002760 <main+0x16d8>)
 80025f8:	fb82 1203 	smull	r1, r2, r2, r3
 80025fc:	1192      	asrs	r2, r2, #6
 80025fe:	17db      	asrs	r3, r3, #31
 8002600:	1ad2      	subs	r2, r2, r3
 8002602:	4b58      	ldr	r3, [pc, #352]	; (8002764 <main+0x16dc>)
 8002604:	fb83 1302 	smull	r1, r3, r3, r2
 8002608:	1099      	asrs	r1, r3, #2
 800260a:	17d3      	asrs	r3, r2, #31
 800260c:	1ac9      	subs	r1, r1, r3
 800260e:	460b      	mov	r3, r1
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	1ad1      	subs	r1, r2, r3
 8002618:	b2ca      	uxtb	r2, r1
 800261a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800261e:	701a      	strb	r2, [r3, #0]
				amplitude_output_value[1] = ((DAC_amplitude_output_int/100) % 10);
 8002620:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002624:	4a50      	ldr	r2, [pc, #320]	; (8002768 <main+0x16e0>)
 8002626:	fb82 1203 	smull	r1, r2, r2, r3
 800262a:	1152      	asrs	r2, r2, #5
 800262c:	17db      	asrs	r3, r3, #31
 800262e:	1ad2      	subs	r2, r2, r3
 8002630:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <main+0x16dc>)
 8002632:	fb83 1302 	smull	r1, r3, r3, r2
 8002636:	1099      	asrs	r1, r3, #2
 8002638:	17d3      	asrs	r3, r2, #31
 800263a:	1ac9      	subs	r1, r1, r3
 800263c:	460b      	mov	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	1ad1      	subs	r1, r2, r3
 8002646:	b2ca      	uxtb	r2, r1
 8002648:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800264c:	705a      	strb	r2, [r3, #1]
				amplitude_output_value[2] = ((DAC_amplitude_output_int/10) % 10);
 800264e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002652:	4a44      	ldr	r2, [pc, #272]	; (8002764 <main+0x16dc>)
 8002654:	fb82 1203 	smull	r1, r2, r2, r3
 8002658:	1092      	asrs	r2, r2, #2
 800265a:	17db      	asrs	r3, r3, #31
 800265c:	1ad2      	subs	r2, r2, r3
 800265e:	4b41      	ldr	r3, [pc, #260]	; (8002764 <main+0x16dc>)
 8002660:	fb83 1302 	smull	r1, r3, r3, r2
 8002664:	1099      	asrs	r1, r3, #2
 8002666:	17d3      	asrs	r3, r2, #31
 8002668:	1ac9      	subs	r1, r1, r3
 800266a:	460b      	mov	r3, r1
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	1ad1      	subs	r1, r2, r3
 8002674:	b2ca      	uxtb	r2, r1
 8002676:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800267a:	709a      	strb	r2, [r3, #2]
				amplitude_output_value[3] = ((DAC_amplitude_output_int) % 10);
 800267c:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002680:	4b38      	ldr	r3, [pc, #224]	; (8002764 <main+0x16dc>)
 8002682:	fb83 1302 	smull	r1, r3, r3, r2
 8002686:	1099      	asrs	r1, r3, #2
 8002688:	17d3      	asrs	r3, r2, #31
 800268a:	1ac9      	subs	r1, r1, r3
 800268c:	460b      	mov	r3, r1
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	1ad1      	subs	r1, r2, r3
 8002696:	b2ca      	uxtb	r2, r1
 8002698:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800269c:	70da      	strb	r2, [r3, #3]
				run = 0;
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <main+0x16c8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 80026a4:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d07a      	beq.n	80027a2 <main+0x171a>
 80026ac:	4b28      	ldr	r3, [pc, #160]	; (8002750 <main+0x16c8>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d076      	beq.n	80027a2 <main+0x171a>
			{
				DAC_amplitude_output_int = DAC_amplitude_output_int + 100;
 80026b4:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80026b8:	3364      	adds	r3, #100	; 0x64
 80026ba:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
				if(DAC_amplitude_output_int >= 3100)
 80026be:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80026c2:	f640 421b 	movw	r2, #3099	; 0xc1b
 80026c6:	4293      	cmp	r3, r2
 80026c8:	dd03      	ble.n	80026d2 <main+0x164a>
				{
					DAC_amplitude_output_int = 3100;
 80026ca:	f640 431c 	movw	r3, #3100	; 0xc1c
 80026ce:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
				}
				amplitude_output_value[0] = ((DAC_amplitude_output_int/1000) % 10);
 80026d2:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80026d6:	4a22      	ldr	r2, [pc, #136]	; (8002760 <main+0x16d8>)
 80026d8:	fb82 1203 	smull	r1, r2, r2, r3
 80026dc:	1192      	asrs	r2, r2, #6
 80026de:	17db      	asrs	r3, r3, #31
 80026e0:	1ad2      	subs	r2, r2, r3
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <main+0x16dc>)
 80026e4:	fb83 1302 	smull	r1, r3, r3, r2
 80026e8:	1099      	asrs	r1, r3, #2
 80026ea:	17d3      	asrs	r3, r2, #31
 80026ec:	1ac9      	subs	r1, r1, r3
 80026ee:	460b      	mov	r3, r1
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	1ad1      	subs	r1, r2, r3
 80026f8:	b2ca      	uxtb	r2, r1
 80026fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026fe:	701a      	strb	r2, [r3, #0]
				amplitude_output_value[1] = ((DAC_amplitude_output_int/100) % 10);
 8002700:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002704:	4a18      	ldr	r2, [pc, #96]	; (8002768 <main+0x16e0>)
 8002706:	fb82 1203 	smull	r1, r2, r2, r3
 800270a:	1152      	asrs	r2, r2, #5
 800270c:	17db      	asrs	r3, r3, #31
 800270e:	1ad2      	subs	r2, r2, r3
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <main+0x16dc>)
 8002712:	fb83 1302 	smull	r1, r3, r3, r2
 8002716:	1099      	asrs	r1, r3, #2
 8002718:	17d3      	asrs	r3, r2, #31
 800271a:	1ac9      	subs	r1, r1, r3
 800271c:	460b      	mov	r3, r1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	1ad1      	subs	r1, r2, r3
 8002726:	b2ca      	uxtb	r2, r1
 8002728:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800272c:	705a      	strb	r2, [r3, #1]
				amplitude_output_value[2] = ((DAC_amplitude_output_int/10) % 10);
 800272e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002732:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <main+0x16dc>)
 8002734:	fb82 1203 	smull	r1, r2, r2, r3
 8002738:	1092      	asrs	r2, r2, #2
 800273a:	17db      	asrs	r3, r3, #31
 800273c:	1ad2      	subs	r2, r2, r3
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <main+0x16dc>)
 8002740:	fb83 1302 	smull	r1, r3, r3, r2
 8002744:	1099      	asrs	r1, r3, #2
 8002746:	17d3      	asrs	r3, r2, #31
 8002748:	1ac9      	subs	r1, r1, r3
 800274a:	460b      	mov	r3, r1
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	e00d      	b.n	800276c <main+0x16e4>
 8002750:	2000000f 	.word	0x2000000f
 8002754:	200000af 	.word	0x200000af
 8002758:	200000ae 	.word	0x200000ae
 800275c:	200000c0 	.word	0x200000c0
 8002760:	10624dd3 	.word	0x10624dd3
 8002764:	66666667 	.word	0x66666667
 8002768:	51eb851f 	.word	0x51eb851f
 800276c:	440b      	add	r3, r1
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	1ad1      	subs	r1, r2, r3
 8002772:	b2ca      	uxtb	r2, r1
 8002774:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002778:	709a      	strb	r2, [r3, #2]
				amplitude_output_value[3] = ((DAC_amplitude_output_int) % 10);
 800277a:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 800277e:	4bd5      	ldr	r3, [pc, #852]	; (8002ad4 <main+0x1a4c>)
 8002780:	fb83 1302 	smull	r1, r3, r3, r2
 8002784:	1099      	asrs	r1, r3, #2
 8002786:	17d3      	asrs	r3, r2, #31
 8002788:	1ac9      	subs	r1, r1, r3
 800278a:	460b      	mov	r3, r1
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	1ad1      	subs	r1, r2, r3
 8002794:	b2ca      	uxtb	r2, r1
 8002796:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800279a:	70da      	strb	r2, [r3, #3]
				run = 0;
 800279c:	4bce      	ldr	r3, [pc, #824]	; (8002ad8 <main+0x1a50>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
			}
		}


		//parameter off values///////////////////////////////////////////////////////
		if (rows == 4 && cols == 1)
 80027a2:	4bce      	ldr	r3, [pc, #824]	; (8002adc <main+0x1a54>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	f040 821d 	bne.w	8002be6 <main+0x1b5e>
 80027ac:	4bcc      	ldr	r3, [pc, #816]	; (8002ae0 <main+0x1a58>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 8218 	bne.w	8002be6 <main+0x1b5e>
		{
			if (buttonState1d && run)
 80027b6:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <main+0x1744>
 80027be:	4bc6      	ldr	r3, [pc, #792]	; (8002ad8 <main+0x1a50>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <main+0x1744>
			{
				run = 0;
 80027c6:	4bc4      	ldr	r3, [pc, #784]	; (8002ad8 <main+0x1a50>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 80027cc:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d011      	beq.n	80027f8 <main+0x1770>
 80027d4:	4bc0      	ldr	r3, [pc, #768]	; (8002ad8 <main+0x1a50>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <main+0x1770>
			{
				Lcd_clear(&lcd);
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fadf 	bl	8000da4 <Lcd_clear>
				rows = 3;
 80027e6:	4bbd      	ldr	r3, [pc, #756]	; (8002adc <main+0x1a54>)
 80027e8:	2203      	movs	r2, #3
 80027ea:	701a      	strb	r2, [r3, #0]
				cols = 3;
 80027ec:	4bbc      	ldr	r3, [pc, #752]	; (8002ae0 <main+0x1a58>)
 80027ee:	2203      	movs	r2, #3
 80027f0:	701a      	strb	r2, [r3, #0]
				run = 0;
 80027f2:	4bb9      	ldr	r3, [pc, #740]	; (8002ad8 <main+0x1a50>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 80027f8:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d029      	beq.n	8002854 <main+0x17cc>
 8002800:	4bb5      	ldr	r3, [pc, #724]	; (8002ad8 <main+0x1a50>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d025      	beq.n	8002854 <main+0x17cc>
			{
				setOffset = 1;
 8002808:	4bb6      	ldr	r3, [pc, #728]	; (8002ae4 <main+0x1a5c>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
				if (itsDC == 1) {
 800280e:	4bb6      	ldr	r3, [pc, #728]	; (8002ae8 <main+0x1a60>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10b      	bne.n	800282e <main+0x17a6>
					signal_d = 1;
 8002816:	f107 0361 	add.w	r3, r7, #97	; 0x61
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
					signal_p = 0;
 800281e:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
					signal_s = 0;
 8002826:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
				}
				if (itsAC == 1) {
 800282e:	4baf      	ldr	r3, [pc, #700]	; (8002aec <main+0x1a64>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d10b      	bne.n	800284e <main+0x17c6>
					signal_d = 0;
 8002836:	f107 0361 	add.w	r3, r7, #97	; 0x61
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
					signal_p = 0;
 800283e:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
					signal_s = 1;
 8002846:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
				}
				run = 0;
 800284e:	4ba2      	ldr	r3, [pc, #648]	; (8002ad8 <main+0x1a50>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 8002854:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80d4 	beq.w	8002a06 <main+0x197e>
 800285e:	4b9e      	ldr	r3, [pc, #632]	; (8002ad8 <main+0x1a50>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80cf 	beq.w	8002a06 <main+0x197e>
			{
				if (itsDC)
 8002868:	4b9f      	ldr	r3, [pc, #636]	; (8002ae8 <main+0x1a60>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d061      	beq.n	8002934 <main+0x18ac>
				{
					DAC_DC_Offset_int = DAC_DC_Offset_int - 100;
 8002870:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002874:	3b64      	subs	r3, #100	; 0x64
 8002876:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
					if(DAC_DC_Offset_int <= 100)
 800287a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	dc02      	bgt.n	8002888 <main+0x1800>
					{
						DAC_DC_Offset_int = 100;
 8002882:	2364      	movs	r3, #100	; 0x64
 8002884:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
					}
					DC_offset_output_value[0] = ((DAC_DC_Offset_int/1000) % 10);
 8002888:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800288c:	4a98      	ldr	r2, [pc, #608]	; (8002af0 <main+0x1a68>)
 800288e:	fb82 1203 	smull	r1, r2, r2, r3
 8002892:	1192      	asrs	r2, r2, #6
 8002894:	17db      	asrs	r3, r3, #31
 8002896:	1ad2      	subs	r2, r2, r3
 8002898:	4b8e      	ldr	r3, [pc, #568]	; (8002ad4 <main+0x1a4c>)
 800289a:	fb83 1302 	smull	r1, r3, r3, r2
 800289e:	1099      	asrs	r1, r3, #2
 80028a0:	17d3      	asrs	r3, r2, #31
 80028a2:	1ac9      	subs	r1, r1, r3
 80028a4:	460b      	mov	r3, r1
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	1ad1      	subs	r1, r2, r3
 80028ae:	b2ca      	uxtb	r2, r1
 80028b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028b4:	701a      	strb	r2, [r3, #0]
					DC_offset_output_value[1] = ((DAC_DC_Offset_int/100) % 10);
 80028b6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80028ba:	4a8e      	ldr	r2, [pc, #568]	; (8002af4 <main+0x1a6c>)
 80028bc:	fb82 1203 	smull	r1, r2, r2, r3
 80028c0:	1152      	asrs	r2, r2, #5
 80028c2:	17db      	asrs	r3, r3, #31
 80028c4:	1ad2      	subs	r2, r2, r3
 80028c6:	4b83      	ldr	r3, [pc, #524]	; (8002ad4 <main+0x1a4c>)
 80028c8:	fb83 1302 	smull	r1, r3, r3, r2
 80028cc:	1099      	asrs	r1, r3, #2
 80028ce:	17d3      	asrs	r3, r2, #31
 80028d0:	1ac9      	subs	r1, r1, r3
 80028d2:	460b      	mov	r3, r1
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	1ad1      	subs	r1, r2, r3
 80028dc:	b2ca      	uxtb	r2, r1
 80028de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028e2:	705a      	strb	r2, [r3, #1]
					DC_offset_output_value[2] = ((DAC_DC_Offset_int/10) % 10);
 80028e4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80028e8:	4a7a      	ldr	r2, [pc, #488]	; (8002ad4 <main+0x1a4c>)
 80028ea:	fb82 1203 	smull	r1, r2, r2, r3
 80028ee:	1092      	asrs	r2, r2, #2
 80028f0:	17db      	asrs	r3, r3, #31
 80028f2:	1ad2      	subs	r2, r2, r3
 80028f4:	4b77      	ldr	r3, [pc, #476]	; (8002ad4 <main+0x1a4c>)
 80028f6:	fb83 1302 	smull	r1, r3, r3, r2
 80028fa:	1099      	asrs	r1, r3, #2
 80028fc:	17d3      	asrs	r3, r2, #31
 80028fe:	1ac9      	subs	r1, r1, r3
 8002900:	460b      	mov	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	1ad1      	subs	r1, r2, r3
 800290a:	b2ca      	uxtb	r2, r1
 800290c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002910:	709a      	strb	r2, [r3, #2]
					DC_offset_output_value[3] = ((DAC_DC_Offset_int/1) % 10);
 8002912:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8002916:	4b6f      	ldr	r3, [pc, #444]	; (8002ad4 <main+0x1a4c>)
 8002918:	fb83 1302 	smull	r1, r3, r3, r2
 800291c:	1099      	asrs	r1, r3, #2
 800291e:	17d3      	asrs	r3, r2, #31
 8002920:	1ac9      	subs	r1, r1, r3
 8002922:	460b      	mov	r3, r1
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	1ad1      	subs	r1, r2, r3
 800292c:	b2ca      	uxtb	r2, r1
 800292e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002932:	70da      	strb	r2, [r3, #3]
				}
				if (itsAC)
 8002934:	4b6d      	ldr	r3, [pc, #436]	; (8002aec <main+0x1a64>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d061      	beq.n	8002a00 <main+0x1978>
				{
					DAC_offset_output_int = DAC_offset_output_int - 100;
 800293c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002940:	3b64      	subs	r3, #100	; 0x64
 8002942:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
					if(DAC_offset_output_int <= 100)
 8002946:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	dc02      	bgt.n	8002954 <main+0x18cc>
					{
						DAC_offset_output_int = 100;
 800294e:	2364      	movs	r3, #100	; 0x64
 8002950:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
					}
					offset_output_value[0] = ((DAC_offset_output_int/1000) % 10);
 8002954:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002958:	4a65      	ldr	r2, [pc, #404]	; (8002af0 <main+0x1a68>)
 800295a:	fb82 1203 	smull	r1, r2, r2, r3
 800295e:	1192      	asrs	r2, r2, #6
 8002960:	17db      	asrs	r3, r3, #31
 8002962:	1ad2      	subs	r2, r2, r3
 8002964:	4b5b      	ldr	r3, [pc, #364]	; (8002ad4 <main+0x1a4c>)
 8002966:	fb83 1302 	smull	r1, r3, r3, r2
 800296a:	1099      	asrs	r1, r3, #2
 800296c:	17d3      	asrs	r3, r2, #31
 800296e:	1ac9      	subs	r1, r1, r3
 8002970:	460b      	mov	r3, r1
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	1ad1      	subs	r1, r2, r3
 800297a:	b2ca      	uxtb	r2, r1
 800297c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002980:	701a      	strb	r2, [r3, #0]
					offset_output_value[1] = ((DAC_offset_output_int/100) % 10);
 8002982:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002986:	4a5b      	ldr	r2, [pc, #364]	; (8002af4 <main+0x1a6c>)
 8002988:	fb82 1203 	smull	r1, r2, r2, r3
 800298c:	1152      	asrs	r2, r2, #5
 800298e:	17db      	asrs	r3, r3, #31
 8002990:	1ad2      	subs	r2, r2, r3
 8002992:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <main+0x1a4c>)
 8002994:	fb83 1302 	smull	r1, r3, r3, r2
 8002998:	1099      	asrs	r1, r3, #2
 800299a:	17d3      	asrs	r3, r2, #31
 800299c:	1ac9      	subs	r1, r1, r3
 800299e:	460b      	mov	r3, r1
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	1ad1      	subs	r1, r2, r3
 80029a8:	b2ca      	uxtb	r2, r1
 80029aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029ae:	705a      	strb	r2, [r3, #1]
					offset_output_value[2] = ((DAC_offset_output_int/10) % 10);
 80029b0:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80029b4:	4a47      	ldr	r2, [pc, #284]	; (8002ad4 <main+0x1a4c>)
 80029b6:	fb82 1203 	smull	r1, r2, r2, r3
 80029ba:	1092      	asrs	r2, r2, #2
 80029bc:	17db      	asrs	r3, r3, #31
 80029be:	1ad2      	subs	r2, r2, r3
 80029c0:	4b44      	ldr	r3, [pc, #272]	; (8002ad4 <main+0x1a4c>)
 80029c2:	fb83 1302 	smull	r1, r3, r3, r2
 80029c6:	1099      	asrs	r1, r3, #2
 80029c8:	17d3      	asrs	r3, r2, #31
 80029ca:	1ac9      	subs	r1, r1, r3
 80029cc:	460b      	mov	r3, r1
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	1ad1      	subs	r1, r2, r3
 80029d6:	b2ca      	uxtb	r2, r1
 80029d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029dc:	709a      	strb	r2, [r3, #2]
					offset_output_value[3] = ((DAC_offset_output_int/1) % 10);
 80029de:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 80029e2:	4b3c      	ldr	r3, [pc, #240]	; (8002ad4 <main+0x1a4c>)
 80029e4:	fb83 1302 	smull	r1, r3, r3, r2
 80029e8:	1099      	asrs	r1, r3, #2
 80029ea:	17d3      	asrs	r3, r2, #31
 80029ec:	1ac9      	subs	r1, r1, r3
 80029ee:	460b      	mov	r3, r1
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	1ad1      	subs	r1, r2, r3
 80029f8:	b2ca      	uxtb	r2, r1
 80029fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029fe:	70da      	strb	r2, [r3, #3]
				}
				run = 0;
 8002a00:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <main+0x1a50>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 8002a06:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80eb 	beq.w	8002be6 <main+0x1b5e>
 8002a10:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <main+0x1a50>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80e6 	beq.w	8002be6 <main+0x1b5e>
			{
				if (itsDC)
 8002a1a:	4b33      	ldr	r3, [pc, #204]	; (8002ae8 <main+0x1a60>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d076      	beq.n	8002b10 <main+0x1a88>
				{
					DAC_DC_Offset_int = DAC_DC_Offset_int + 100;
 8002a22:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002a26:	3364      	adds	r3, #100	; 0x64
 8002a28:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
					if(DAC_DC_Offset_int >= 3200)
 8002a2c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002a30:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002a34:	db03      	blt.n	8002a3e <main+0x19b6>
					{
						DAC_DC_Offset_int = 3200;
 8002a36:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002a3a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
					}
					DC_offset_output_value[0] = ((DAC_DC_Offset_int/1000) % 10);
 8002a3e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002a42:	4a2b      	ldr	r2, [pc, #172]	; (8002af0 <main+0x1a68>)
 8002a44:	fb82 1203 	smull	r1, r2, r2, r3
 8002a48:	1192      	asrs	r2, r2, #6
 8002a4a:	17db      	asrs	r3, r3, #31
 8002a4c:	1ad2      	subs	r2, r2, r3
 8002a4e:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <main+0x1a4c>)
 8002a50:	fb83 1302 	smull	r1, r3, r3, r2
 8002a54:	1099      	asrs	r1, r3, #2
 8002a56:	17d3      	asrs	r3, r2, #31
 8002a58:	1ac9      	subs	r1, r1, r3
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	1ad1      	subs	r1, r2, r3
 8002a64:	b2ca      	uxtb	r2, r1
 8002a66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a6a:	701a      	strb	r2, [r3, #0]
					DC_offset_output_value[1] = ((DAC_DC_Offset_int/100) % 10);
 8002a6c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002a70:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <main+0x1a6c>)
 8002a72:	fb82 1203 	smull	r1, r2, r2, r3
 8002a76:	1152      	asrs	r2, r2, #5
 8002a78:	17db      	asrs	r3, r3, #31
 8002a7a:	1ad2      	subs	r2, r2, r3
 8002a7c:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <main+0x1a4c>)
 8002a7e:	fb83 1302 	smull	r1, r3, r3, r2
 8002a82:	1099      	asrs	r1, r3, #2
 8002a84:	17d3      	asrs	r3, r2, #31
 8002a86:	1ac9      	subs	r1, r1, r3
 8002a88:	460b      	mov	r3, r1
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	1ad1      	subs	r1, r2, r3
 8002a92:	b2ca      	uxtb	r2, r1
 8002a94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a98:	705a      	strb	r2, [r3, #1]
					DC_offset_output_value[2] = ((DAC_DC_Offset_int/10) % 10);
 8002a9a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002a9e:	4a0d      	ldr	r2, [pc, #52]	; (8002ad4 <main+0x1a4c>)
 8002aa0:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa4:	1092      	asrs	r2, r2, #2
 8002aa6:	17db      	asrs	r3, r3, #31
 8002aa8:	1ad2      	subs	r2, r2, r3
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <main+0x1a4c>)
 8002aac:	fb83 1302 	smull	r1, r3, r3, r2
 8002ab0:	1099      	asrs	r1, r3, #2
 8002ab2:	17d3      	asrs	r3, r2, #31
 8002ab4:	1ac9      	subs	r1, r1, r3
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	1ad1      	subs	r1, r2, r3
 8002ac0:	b2ca      	uxtb	r2, r1
 8002ac2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ac6:	709a      	strb	r2, [r3, #2]
					DC_offset_output_value[3] = ((DAC_DC_Offset_int/1) % 10);
 8002ac8:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8002acc:	4b01      	ldr	r3, [pc, #4]	; (8002ad4 <main+0x1a4c>)
 8002ace:	fb83 1302 	smull	r1, r3, r3, r2
 8002ad2:	e011      	b.n	8002af8 <main+0x1a70>
 8002ad4:	66666667 	.word	0x66666667
 8002ad8:	2000000f 	.word	0x2000000f
 8002adc:	200000af 	.word	0x200000af
 8002ae0:	200000ae 	.word	0x200000ae
 8002ae4:	200002b8 	.word	0x200002b8
 8002ae8:	200000b0 	.word	0x200000b0
 8002aec:	200000b1 	.word	0x200000b1
 8002af0:	10624dd3 	.word	0x10624dd3
 8002af4:	51eb851f 	.word	0x51eb851f
 8002af8:	1099      	asrs	r1, r3, #2
 8002afa:	17d3      	asrs	r3, r2, #31
 8002afc:	1ac9      	subs	r1, r1, r3
 8002afe:	460b      	mov	r3, r1
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	1ad1      	subs	r1, r2, r3
 8002b08:	b2ca      	uxtb	r2, r1
 8002b0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b0e:	70da      	strb	r2, [r3, #3]
				}
				if (itsAC)
 8002b10:	4bd0      	ldr	r3, [pc, #832]	; (8002e54 <main+0x1dcc>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d063      	beq.n	8002be0 <main+0x1b58>
				{
					DAC_offset_output_int = DAC_offset_output_int + 100;
 8002b18:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002b1c:	3364      	adds	r3, #100	; 0x64
 8002b1e:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
					if(DAC_offset_output_int >= 3200)
 8002b22:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002b26:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002b2a:	db03      	blt.n	8002b34 <main+0x1aac>
					{
						DAC_offset_output_int = 3200;
 8002b2c:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002b30:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
					}
					offset_output_value[0] = ((DAC_offset_output_int/1000) % 10);
 8002b34:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002b38:	4ac7      	ldr	r2, [pc, #796]	; (8002e58 <main+0x1dd0>)
 8002b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8002b3e:	1192      	asrs	r2, r2, #6
 8002b40:	17db      	asrs	r3, r3, #31
 8002b42:	1ad2      	subs	r2, r2, r3
 8002b44:	4bc5      	ldr	r3, [pc, #788]	; (8002e5c <main+0x1dd4>)
 8002b46:	fb83 1302 	smull	r1, r3, r3, r2
 8002b4a:	1099      	asrs	r1, r3, #2
 8002b4c:	17d3      	asrs	r3, r2, #31
 8002b4e:	1ac9      	subs	r1, r1, r3
 8002b50:	460b      	mov	r3, r1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	1ad1      	subs	r1, r2, r3
 8002b5a:	b2ca      	uxtb	r2, r1
 8002b5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b60:	701a      	strb	r2, [r3, #0]
					offset_output_value[1] = ((DAC_offset_output_int/100) % 10);
 8002b62:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002b66:	4abe      	ldr	r2, [pc, #760]	; (8002e60 <main+0x1dd8>)
 8002b68:	fb82 1203 	smull	r1, r2, r2, r3
 8002b6c:	1152      	asrs	r2, r2, #5
 8002b6e:	17db      	asrs	r3, r3, #31
 8002b70:	1ad2      	subs	r2, r2, r3
 8002b72:	4bba      	ldr	r3, [pc, #744]	; (8002e5c <main+0x1dd4>)
 8002b74:	fb83 1302 	smull	r1, r3, r3, r2
 8002b78:	1099      	asrs	r1, r3, #2
 8002b7a:	17d3      	asrs	r3, r2, #31
 8002b7c:	1ac9      	subs	r1, r1, r3
 8002b7e:	460b      	mov	r3, r1
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	1ad1      	subs	r1, r2, r3
 8002b88:	b2ca      	uxtb	r2, r1
 8002b8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b8e:	705a      	strb	r2, [r3, #1]
					offset_output_value[2] = ((DAC_offset_output_int/10) % 10);
 8002b90:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002b94:	4ab1      	ldr	r2, [pc, #708]	; (8002e5c <main+0x1dd4>)
 8002b96:	fb82 1203 	smull	r1, r2, r2, r3
 8002b9a:	1092      	asrs	r2, r2, #2
 8002b9c:	17db      	asrs	r3, r3, #31
 8002b9e:	1ad2      	subs	r2, r2, r3
 8002ba0:	4bae      	ldr	r3, [pc, #696]	; (8002e5c <main+0x1dd4>)
 8002ba2:	fb83 1302 	smull	r1, r3, r3, r2
 8002ba6:	1099      	asrs	r1, r3, #2
 8002ba8:	17d3      	asrs	r3, r2, #31
 8002baa:	1ac9      	subs	r1, r1, r3
 8002bac:	460b      	mov	r3, r1
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	1ad1      	subs	r1, r2, r3
 8002bb6:	b2ca      	uxtb	r2, r1
 8002bb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bbc:	709a      	strb	r2, [r3, #2]
					offset_output_value[3] = ((DAC_offset_output_int/1) % 10);
 8002bbe:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002bc2:	4ba6      	ldr	r3, [pc, #664]	; (8002e5c <main+0x1dd4>)
 8002bc4:	fb83 1302 	smull	r1, r3, r3, r2
 8002bc8:	1099      	asrs	r1, r3, #2
 8002bca:	17d3      	asrs	r3, r2, #31
 8002bcc:	1ac9      	subs	r1, r1, r3
 8002bce:	460b      	mov	r3, r1
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	1ad1      	subs	r1, r2, r3
 8002bd8:	b2ca      	uxtb	r2, r1
 8002bda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bde:	70da      	strb	r2, [r3, #3]
				}
				run = 0;
 8002be0:	4ba0      	ldr	r3, [pc, #640]	; (8002e64 <main+0x1ddc>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
			}
		}


		//parameter frequency values////////////////////////////////////////////////////////////////////
		if (rows == 4 && cols == 2)
 8002be6:	4ba0      	ldr	r3, [pc, #640]	; (8002e68 <main+0x1de0>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	f040 811d 	bne.w	8002e2a <main+0x1da2>
 8002bf0:	4b9e      	ldr	r3, [pc, #632]	; (8002e6c <main+0x1de4>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	f040 8118 	bne.w	8002e2a <main+0x1da2>
		{
			if (buttonState1d && run)
 8002bfa:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <main+0x1b88>
 8002c02:	4b98      	ldr	r3, [pc, #608]	; (8002e64 <main+0x1ddc>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <main+0x1b88>
			{
				run = 0;
 8002c0a:	4b96      	ldr	r3, [pc, #600]	; (8002e64 <main+0x1ddc>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1u && run)
 8002c10:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d011      	beq.n	8002c3c <main+0x1bb4>
 8002c18:	4b92      	ldr	r3, [pc, #584]	; (8002e64 <main+0x1ddc>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00d      	beq.n	8002c3c <main+0x1bb4>
			{
				Lcd_clear(&lcd);
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe f8bd 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002c2a:	4b8f      	ldr	r3, [pc, #572]	; (8002e68 <main+0x1de0>)
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8002c30:	4b8e      	ldr	r3, [pc, #568]	; (8002e6c <main+0x1de4>)
 8002c32:	2203      	movs	r2, #3
 8002c34:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002c36:	4b8b      	ldr	r3, [pc, #556]	; (8002e64 <main+0x1ddc>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 && run)
 8002c3c:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d015      	beq.n	8002c70 <main+0x1be8>
 8002c44:	4b87      	ldr	r3, [pc, #540]	; (8002e64 <main+0x1ddc>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d011      	beq.n	8002c70 <main+0x1be8>
			{
				frequencyflag = 1;
 8002c4c:	4b88      	ldr	r3, [pc, #544]	; (8002e70 <main+0x1de8>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
				signal_d = 0;
 8002c52:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
				signal_p = 0;
 8002c5a:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
				signal_s = 1;
 8002c62:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002c6a:	4b7e      	ldr	r3, [pc, #504]	; (8002e64 <main+0x1ddc>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l && run)
 8002c70:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d068      	beq.n	8002d4a <main+0x1cc2>
 8002c78:	4b7a      	ldr	r3, [pc, #488]	; (8002e64 <main+0x1ddc>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d064      	beq.n	8002d4a <main+0x1cc2>
			{
				DAC_frequency_output_int = DAC_frequency_output_int -100;
 8002c80:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002c84:	3b64      	subs	r3, #100	; 0x64
 8002c86:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
				if (DAC_frequency_output_int <= 0)
 8002c8a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	dc02      	bgt.n	8002c98 <main+0x1c10>
				{
					DAC_frequency_output_int = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
				}
				frequency_output_value[0] = ((DAC_frequency_output_int/1000)%10);
 8002c98:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002c9c:	4a6e      	ldr	r2, [pc, #440]	; (8002e58 <main+0x1dd0>)
 8002c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8002ca2:	1192      	asrs	r2, r2, #6
 8002ca4:	17db      	asrs	r3, r3, #31
 8002ca6:	1ad2      	subs	r2, r2, r3
 8002ca8:	4b6c      	ldr	r3, [pc, #432]	; (8002e5c <main+0x1dd4>)
 8002caa:	fb83 1302 	smull	r1, r3, r3, r2
 8002cae:	1099      	asrs	r1, r3, #2
 8002cb0:	17d3      	asrs	r3, r2, #31
 8002cb2:	1ac9      	subs	r1, r1, r3
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	1ad1      	subs	r1, r2, r3
 8002cbe:	b2ca      	uxtb	r2, r1
 8002cc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cc4:	701a      	strb	r2, [r3, #0]
				frequency_output_value[1] = ((DAC_frequency_output_int/100)%10);
 8002cc6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002cca:	4a65      	ldr	r2, [pc, #404]	; (8002e60 <main+0x1dd8>)
 8002ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8002cd0:	1152      	asrs	r2, r2, #5
 8002cd2:	17db      	asrs	r3, r3, #31
 8002cd4:	1ad2      	subs	r2, r2, r3
 8002cd6:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <main+0x1dd4>)
 8002cd8:	fb83 1302 	smull	r1, r3, r3, r2
 8002cdc:	1099      	asrs	r1, r3, #2
 8002cde:	17d3      	asrs	r3, r2, #31
 8002ce0:	1ac9      	subs	r1, r1, r3
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	1ad1      	subs	r1, r2, r3
 8002cec:	b2ca      	uxtb	r2, r1
 8002cee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cf2:	705a      	strb	r2, [r3, #1]
				frequency_output_value[2] = ((DAC_frequency_output_int/10)%10);
 8002cf4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002cf8:	4a58      	ldr	r2, [pc, #352]	; (8002e5c <main+0x1dd4>)
 8002cfa:	fb82 1203 	smull	r1, r2, r2, r3
 8002cfe:	1092      	asrs	r2, r2, #2
 8002d00:	17db      	asrs	r3, r3, #31
 8002d02:	1ad2      	subs	r2, r2, r3
 8002d04:	4b55      	ldr	r3, [pc, #340]	; (8002e5c <main+0x1dd4>)
 8002d06:	fb83 1302 	smull	r1, r3, r3, r2
 8002d0a:	1099      	asrs	r1, r3, #2
 8002d0c:	17d3      	asrs	r3, r2, #31
 8002d0e:	1ac9      	subs	r1, r1, r3
 8002d10:	460b      	mov	r3, r1
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	1ad1      	subs	r1, r2, r3
 8002d1a:	b2ca      	uxtb	r2, r1
 8002d1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d20:	709a      	strb	r2, [r3, #2]
				frequency_output_value[3] = ((DAC_frequency_output_int/1)%10);
 8002d22:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002d26:	4b4d      	ldr	r3, [pc, #308]	; (8002e5c <main+0x1dd4>)
 8002d28:	fb83 1302 	smull	r1, r3, r3, r2
 8002d2c:	1099      	asrs	r1, r3, #2
 8002d2e:	17d3      	asrs	r3, r2, #31
 8002d30:	1ac9      	subs	r1, r1, r3
 8002d32:	460b      	mov	r3, r1
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	1ad1      	subs	r1, r2, r3
 8002d3c:	b2ca      	uxtb	r2, r1
 8002d3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d42:	70da      	strb	r2, [r3, #3]
				run = 0;
 8002d44:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <main+0x1ddc>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r && run)
 8002d4a:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d06b      	beq.n	8002e2a <main+0x1da2>
 8002d52:	4b44      	ldr	r3, [pc, #272]	; (8002e64 <main+0x1ddc>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d067      	beq.n	8002e2a <main+0x1da2>
			{
				DAC_frequency_output_int = DAC_frequency_output_int +100;
 8002d5a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002d5e:	3364      	adds	r3, #100	; 0x64
 8002d60:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
				if (DAC_frequency_output_int >= 5000)
 8002d64:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002d68:	f241 3287 	movw	r2, #4999	; 0x1387
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	dd03      	ble.n	8002d78 <main+0x1cf0>
				{
					DAC_frequency_output_int = 5000;
 8002d70:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d74:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
				}
				frequency_output_value[0] = ((DAC_frequency_output_int/1000)%10);
 8002d78:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002d7c:	4a36      	ldr	r2, [pc, #216]	; (8002e58 <main+0x1dd0>)
 8002d7e:	fb82 1203 	smull	r1, r2, r2, r3
 8002d82:	1192      	asrs	r2, r2, #6
 8002d84:	17db      	asrs	r3, r3, #31
 8002d86:	1ad2      	subs	r2, r2, r3
 8002d88:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <main+0x1dd4>)
 8002d8a:	fb83 1302 	smull	r1, r3, r3, r2
 8002d8e:	1099      	asrs	r1, r3, #2
 8002d90:	17d3      	asrs	r3, r2, #31
 8002d92:	1ac9      	subs	r1, r1, r3
 8002d94:	460b      	mov	r3, r1
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	1ad1      	subs	r1, r2, r3
 8002d9e:	b2ca      	uxtb	r2, r1
 8002da0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002da4:	701a      	strb	r2, [r3, #0]
				frequency_output_value[1] = ((DAC_frequency_output_int/100)%10);
 8002da6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002daa:	4a2d      	ldr	r2, [pc, #180]	; (8002e60 <main+0x1dd8>)
 8002dac:	fb82 1203 	smull	r1, r2, r2, r3
 8002db0:	1152      	asrs	r2, r2, #5
 8002db2:	17db      	asrs	r3, r3, #31
 8002db4:	1ad2      	subs	r2, r2, r3
 8002db6:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <main+0x1dd4>)
 8002db8:	fb83 1302 	smull	r1, r3, r3, r2
 8002dbc:	1099      	asrs	r1, r3, #2
 8002dbe:	17d3      	asrs	r3, r2, #31
 8002dc0:	1ac9      	subs	r1, r1, r3
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	1ad1      	subs	r1, r2, r3
 8002dcc:	b2ca      	uxtb	r2, r1
 8002dce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dd2:	705a      	strb	r2, [r3, #1]
				frequency_output_value[2] = ((DAC_frequency_output_int/10)%10);
 8002dd4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002dd8:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <main+0x1dd4>)
 8002dda:	fb82 1203 	smull	r1, r2, r2, r3
 8002dde:	1092      	asrs	r2, r2, #2
 8002de0:	17db      	asrs	r3, r3, #31
 8002de2:	1ad2      	subs	r2, r2, r3
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <main+0x1dd4>)
 8002de6:	fb83 1302 	smull	r1, r3, r3, r2
 8002dea:	1099      	asrs	r1, r3, #2
 8002dec:	17d3      	asrs	r3, r2, #31
 8002dee:	1ac9      	subs	r1, r1, r3
 8002df0:	460b      	mov	r3, r1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	1ad1      	subs	r1, r2, r3
 8002dfa:	b2ca      	uxtb	r2, r1
 8002dfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e00:	709a      	strb	r2, [r3, #2]
				frequency_output_value[3] = ((DAC_frequency_output_int/1)%10);
 8002e02:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <main+0x1dd4>)
 8002e08:	fb83 1302 	smull	r1, r3, r3, r2
 8002e0c:	1099      	asrs	r1, r3, #2
 8002e0e:	17d3      	asrs	r3, r2, #31
 8002e10:	1ac9      	subs	r1, r1, r3
 8002e12:	460b      	mov	r3, r1
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	1ad1      	subs	r1, r2, r3
 8002e1c:	b2ca      	uxtb	r2, r1
 8002e1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e22:	70da      	strb	r2, [r3, #3]
				run = 0;
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <main+0x1ddc>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]
			}
		}

		//duty cycle stuff//////////////////////////////////////////////////////

		if (rows == 4 && cols == 3) {
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <main+0x1de0>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d15d      	bne.n	8002eee <main+0x1e66>
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <main+0x1de4>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d159      	bne.n	8002eee <main+0x1e66>
			if (buttonState1d ==1 && run == 1) {
 8002e3a:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d118      	bne.n	8002e74 <main+0x1dec>
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <main+0x1ddc>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d114      	bne.n	8002e74 <main+0x1dec>
				run = 0;
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <main+0x1ddc>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e010      	b.n	8002e74 <main+0x1dec>
 8002e52:	bf00      	nop
 8002e54:	200000b1 	.word	0x200000b1
 8002e58:	10624dd3 	.word	0x10624dd3
 8002e5c:	66666667 	.word	0x66666667
 8002e60:	51eb851f 	.word	0x51eb851f
 8002e64:	2000000f 	.word	0x2000000f
 8002e68:	200000af 	.word	0x200000af
 8002e6c:	200000ae 	.word	0x200000ae
 8002e70:	20001595 	.word	0x20001595
			}
			if (buttonState1u ==1 && run == 1) {
 8002e74:	f897 32d3 	ldrb.w	r3, [r7, #723]	; 0x2d3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d10c      	bne.n	8002e96 <main+0x1e0e>
 8002e7c:	4bd1      	ldr	r3, [pc, #836]	; (80031c4 <main+0x213c>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d108      	bne.n	8002e96 <main+0x1e0e>

				rows = 3;
 8002e84:	4bd0      	ldr	r3, [pc, #832]	; (80031c8 <main+0x2140>)
 8002e86:	2203      	movs	r2, #3
 8002e88:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8002e8a:	4bd0      	ldr	r3, [pc, #832]	; (80031cc <main+0x2144>)
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002e90:	4bcc      	ldr	r3, [pc, #816]	; (80031c4 <main+0x213c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1 ==1 && run == 1) {
 8002e96:	f897 32eb 	ldrb.w	r3, [r7, #747]	; 0x2eb
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d106      	bne.n	8002eac <main+0x1e24>
 8002e9e:	4bc9      	ldr	r3, [pc, #804]	; (80031c4 <main+0x213c>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d102      	bne.n	8002eac <main+0x1e24>
				run = 0;
 8002ea6:	4bc7      	ldr	r3, [pc, #796]	; (80031c4 <main+0x213c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1r ==1 && run == 1) {
 8002eac:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d106      	bne.n	8002ec2 <main+0x1e3a>
 8002eb4:	4bc3      	ldr	r3, [pc, #780]	; (80031c4 <main+0x213c>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d102      	bne.n	8002ec2 <main+0x1e3a>
				run = 0;
 8002ebc:	4bc1      	ldr	r3, [pc, #772]	; (80031c4 <main+0x213c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState1l ==1 && run == 1) {
 8002ec2:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d111      	bne.n	8002eee <main+0x1e66>
 8002eca:	4bbe      	ldr	r3, [pc, #760]	; (80031c4 <main+0x213c>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d10d      	bne.n	8002eee <main+0x1e66>

				Lcd_clear(&lcd);
 8002ed2:	f107 031c 	add.w	r3, r7, #28
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd ff64 	bl	8000da4 <Lcd_clear>
				rows = 4;
 8002edc:	4bba      	ldr	r3, [pc, #744]	; (80031c8 <main+0x2140>)
 8002ede:	2204      	movs	r2, #4
 8002ee0:	701a      	strb	r2, [r3, #0]
				cols = 2;
 8002ee2:	4bba      	ldr	r3, [pc, #744]	; (80031cc <main+0x2144>)
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	701a      	strb	r2, [r3, #0]
				run = 0;
 8002ee8:	4bb6      	ldr	r3, [pc, #728]	; (80031c4 <main+0x213c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
			}
		}

//now LCD messages:

		if (cols == 0 && rows == 0)
 8002eee:	4bb7      	ldr	r3, [pc, #732]	; (80031cc <main+0x2144>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d110      	bne.n	8002f18 <main+0x1e90>
 8002ef6:	4bb4      	ldr	r3, [pc, #720]	; (80031c8 <main+0x2140>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <main+0x1e90>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002efe:	f107 031c 	add.w	r3, r7, #28
 8002f02:	2200      	movs	r2, #0
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd ff32 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Start Message");
 8002f0c:	f107 031c 	add.w	r3, r7, #28
 8002f10:	49af      	ldr	r1, [pc, #700]	; (80031d0 <main+0x2148>)
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd ff0e 	bl	8000d34 <Lcd_string>
		}
		if(cols == 0 && rows == 1)
 8002f18:	4bac      	ldr	r3, [pc, #688]	; (80031cc <main+0x2144>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d11d      	bne.n	8002f5c <main+0x1ed4>
 8002f20:	4ba9      	ldr	r3, [pc, #676]	; (80031c8 <main+0x2140>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d119      	bne.n	8002f5c <main+0x1ed4>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd ff1d 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Measure");
 8002f36:	f107 031c 	add.w	r3, r7, #28
 8002f3a:	49a6      	ldr	r1, [pc, #664]	; (80031d4 <main+0x214c>)
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd fef9 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8002f42:	f107 031c 	add.w	r3, r7, #28
 8002f46:	2200      	movs	r2, #0
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd ff10 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Mode");
 8002f50:	f107 031c 	add.w	r3, r7, #28
 8002f54:	49a0      	ldr	r1, [pc, #640]	; (80031d8 <main+0x2150>)
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd feec 	bl	8000d34 <Lcd_string>
		}
		if(cols == 1 && rows == 1)
 8002f5c:	4b9b      	ldr	r3, [pc, #620]	; (80031cc <main+0x2144>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d11d      	bne.n	8002fa0 <main+0x1f18>
 8002f64:	4b98      	ldr	r3, [pc, #608]	; (80031c8 <main+0x2140>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d119      	bne.n	8002fa0 <main+0x1f18>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002f6c:	f107 031c 	add.w	r3, r7, #28
 8002f70:	2200      	movs	r2, #0
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd fefb 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Sig gen");
 8002f7a:	f107 031c 	add.w	r3, r7, #28
 8002f7e:	4997      	ldr	r1, [pc, #604]	; (80031dc <main+0x2154>)
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd fed7 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd feee 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Mode");
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	498f      	ldr	r1, [pc, #572]	; (80031d8 <main+0x2150>)
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd feca 	bl	8000d34 <Lcd_string>
		}

		if(cols == 0 && rows == 2)
 8002fa0:	4b8a      	ldr	r3, [pc, #552]	; (80031cc <main+0x2144>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d14f      	bne.n	8003048 <main+0x1fc0>
 8002fa8:	4b87      	ldr	r3, [pc, #540]	; (80031c8 <main+0x2140>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d14b      	bne.n	8003048 <main+0x1fc0>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002fb0:	f107 031c 	add.w	r3, r7, #28
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd fed9 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "DC Voltage");
 8002fbe:	f107 031c 	add.w	r3, r7, #28
 8002fc2:	4987      	ldr	r1, [pc, #540]	; (80031e0 <main+0x2158>)
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd feb5 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8002fca:	f107 031c 	add.w	r3, r7, #28
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd fecc 	bl	8000d70 <Lcd_cursor>
			Lcd_int(&lcd, (DCdisplayoffset[6] - 48));
 8002fd8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fdc:	799b      	ldrb	r3, [r3, #6]
 8002fde:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002fe2:	f107 031c 	add.w	r3, r7, #28
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fe8b 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "." );
 8002fee:	f107 031c 	add.w	r3, r7, #28
 8002ff2:	497c      	ldr	r1, [pc, #496]	; (80031e4 <main+0x215c>)
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fe9d 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (DCdisplayoffset[7]-48));
 8002ffa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ffe:	79db      	ldrb	r3, [r3, #7]
 8003000:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003004:	f107 031c 	add.w	r3, r7, #28
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fe7a 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (DCdisplayoffset[8]-48));
 8003010:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003014:	7a1b      	ldrb	r3, [r3, #8]
 8003016:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800301a:	f107 031c 	add.w	r3, r7, #28
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fe6f 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (DCdisplayoffset[9] - 48));
 8003026:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800302a:	7a5b      	ldrb	r3, [r3, #9]
 800302c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003030:	f107 031c 	add.w	r3, r7, #28
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fe64 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "V");
 800303c:	f107 031c 	add.w	r3, r7, #28
 8003040:	4969      	ldr	r1, [pc, #420]	; (80031e8 <main+0x2160>)
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fe76 	bl	8000d34 <Lcd_string>
		}

		if(cols == 1 && rows == 2)
 8003048:	4b60      	ldr	r3, [pc, #384]	; (80031cc <main+0x2144>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d11d      	bne.n	800308c <main+0x2004>
 8003050:	4b5d      	ldr	r3, [pc, #372]	; (80031c8 <main+0x2140>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d119      	bne.n	800308c <main+0x2004>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003058:	f107 031c 	add.w	r3, r7, #28
 800305c:	2200      	movs	r2, #0
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fe85 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "DC Current");
 8003066:	f107 031c 	add.w	r3, r7, #28
 800306a:	4960      	ldr	r1, [pc, #384]	; (80031ec <main+0x2164>)
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fe61 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003072:	f107 031c 	add.w	r3, r7, #28
 8003076:	2200      	movs	r2, #0
 8003078:	2101      	movs	r1, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fe78 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "-");
 8003080:	f107 031c 	add.w	r3, r7, #28
 8003084:	495a      	ldr	r1, [pc, #360]	; (80031f0 <main+0x2168>)
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fe54 	bl	8000d34 <Lcd_string>
		}

		if(cols == 2 && rows == 2 && AC_measure==1 && timer_interrupt==1 && measurment_mode==1)
 800308c:	4b4f      	ldr	r3, [pc, #316]	; (80031cc <main+0x2144>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b02      	cmp	r3, #2
 8003092:	f040 8104 	bne.w	800329e <main+0x2216>
 8003096:	4b4c      	ldr	r3, [pc, #304]	; (80031c8 <main+0x2140>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b02      	cmp	r3, #2
 800309c:	f040 80ff 	bne.w	800329e <main+0x2216>
 80030a0:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	f040 80fa 	bne.w	800329e <main+0x2216>
 80030aa:	4b52      	ldr	r3, [pc, #328]	; (80031f4 <main+0x216c>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	f040 80f5 	bne.w	800329e <main+0x2216>
 80030b4:	f897 32ca 	ldrb.w	r3, [r7, #714]	; 0x2ca
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f040 80f0 	bne.w	800329e <main+0x2216>
		{
			//DC_measure = 0;
			//AC_measure = 1;

			Lcd_cursor(&lcd, 0, 0);
 80030be:	f107 031c 	add.w	r3, r7, #28
 80030c2:	2200      	movs	r2, #0
 80030c4:	2100      	movs	r1, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fe52 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "AC Voltage");
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	4949      	ldr	r1, [pc, #292]	; (80031f8 <main+0x2170>)
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fe2e 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80030d8:	f107 031c 	add.w	r3, r7, #28
 80030dc:	2200      	movs	r2, #0
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd fe45 	bl	8000d70 <Lcd_cursor>

			LCD_scroll_count++;
 80030e6:	f8b7 328c 	ldrh.w	r3, [r7, #652]	; 0x28c
 80030ea:	3301      	adds	r3, #1
 80030ec:	f8a7 328c 	strh.w	r3, [r7, #652]	; 0x28c

			///// SEND TO LCD /////////
			//offset//
			//Lcd_clear(&lcd);
			Lcd_string(&lcd, "O:");
 80030f0:	f107 031c 	add.w	r3, r7, #28
 80030f4:	4941      	ldr	r1, [pc, #260]	; (80031fc <main+0x2174>)
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd fe1c 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (ACdisplayoffset[6]-48));
 80030fc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003100:	799b      	ldrb	r3, [r3, #6]
 8003102:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003106:	f107 031c 	add.w	r3, r7, #28
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fdf9 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "." );
 8003112:	f107 031c 	add.w	r3, r7, #28
 8003116:	4933      	ldr	r1, [pc, #204]	; (80031e4 <main+0x215c>)
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd fe0b 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (ACdisplayoffset[7]-48));
 800311e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003122:	79db      	ldrb	r3, [r3, #7]
 8003124:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd fde8 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (ACdisplayoffset[8]-48));
 8003134:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003138:	7a1b      	ldrb	r3, [r3, #8]
 800313a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800313e:	f107 031c 	add.w	r3, r7, #28
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd fddd 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (ACdisplayoffset[9]-48));
 800314a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800314e:	7a5b      	ldrb	r3, [r3, #9]
 8003150:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003154:	f107 031c 	add.w	r3, r7, #28
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd fdd2 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "V");
 8003160:	f107 031c 	add.w	r3, r7, #28
 8003164:	4920      	ldr	r1, [pc, #128]	; (80031e8 <main+0x2160>)
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd fde4 	bl	8000d34 <Lcd_string>
			Lcd_string(&lcd, ",");
 800316c:	f107 031c 	add.w	r3, r7, #28
 8003170:	4923      	ldr	r1, [pc, #140]	; (8003200 <main+0x2178>)
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd fdde 	bl	8000d34 <Lcd_string>

			//Amplitude //
			Lcd_string(&lcd, "A:");
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	4921      	ldr	r1, [pc, #132]	; (8003204 <main+0x217c>)
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd fdd8 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (AC_disp_pk_pk[6]-48));
 8003184:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003188:	799b      	ldrb	r3, [r3, #6]
 800318a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800318e:	f107 031c 	add.w	r3, r7, #28
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd fdb5 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "." );
 800319a:	f107 031c 	add.w	r3, r7, #28
 800319e:	4911      	ldr	r1, [pc, #68]	; (80031e4 <main+0x215c>)
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd fdc7 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (AC_disp_pk_pk[7]-48));
 80031a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031aa:	79db      	ldrb	r3, [r3, #7]
 80031ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80031b0:	f107 031c 	add.w	r3, r7, #28
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd fda4 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (AC_disp_pk_pk[8]-48));
 80031bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031c0:	7a1b      	ldrb	r3, [r3, #8]
 80031c2:	e021      	b.n	8003208 <main+0x2180>
 80031c4:	2000000f 	.word	0x2000000f
 80031c8:	200000af 	.word	0x200000af
 80031cc:	200000ae 	.word	0x200000ae
 80031d0:	0800e424 	.word	0x0800e424
 80031d4:	0800e434 	.word	0x0800e434
 80031d8:	0800e43c 	.word	0x0800e43c
 80031dc:	0800e444 	.word	0x0800e444
 80031e0:	0800e44c 	.word	0x0800e44c
 80031e4:	0800e458 	.word	0x0800e458
 80031e8:	0800e45c 	.word	0x0800e45c
 80031ec:	0800e460 	.word	0x0800e460
 80031f0:	0800e46c 	.word	0x0800e46c
 80031f4:	20001665 	.word	0x20001665
 80031f8:	0800e470 	.word	0x0800e470
 80031fc:	0800e47c 	.word	0x0800e47c
 8003200:	0800e480 	.word	0x0800e480
 8003204:	0800e484 	.word	0x0800e484
 8003208:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800320c:	f107 031c 	add.w	r3, r7, #28
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fd76 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (AC_disp_pk_pk[9] -48));
 8003218:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800321c:	7a5b      	ldrb	r3, [r3, #9]
 800321e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003222:	f107 031c 	add.w	r3, r7, #28
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd fd6b 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "V");
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	49c8      	ldr	r1, [pc, #800]	; (8003554 <main+0x24cc>)
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd fd7d 	bl	8000d34 <Lcd_string>
			Lcd_string(&lcd, ",");
 800323a:	f107 031c 	add.w	r3, r7, #28
 800323e:	49c6      	ldr	r1, [pc, #792]	; (8003558 <main+0x24d0>)
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd fd77 	bl	8000d34 <Lcd_string>

			//Frequency//
			if(AC_freq<1000)
 8003246:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800324a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800324e:	d205      	bcs.n	800325c <main+0x21d4>
			{
				Lcd_string(&lcd, "0");
 8003250:	f107 031c 	add.w	r3, r7, #28
 8003254:	49c1      	ldr	r1, [pc, #772]	; (800355c <main+0x24d4>)
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd fd6c 	bl	8000d34 <Lcd_string>
			}
			Lcd_string(&lcd, "F:");
 800325c:	f107 031c 	add.w	r3, r7, #28
 8003260:	49bf      	ldr	r1, [pc, #764]	; (8003560 <main+0x24d8>)
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd fd66 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, AC_freq);
 8003268:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 800326c:	f107 031c 	add.w	r3, r7, #28
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd fd46 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "Hz");
 8003278:	f107 031c 	add.w	r3, r7, #28
 800327c:	49b9      	ldr	r1, [pc, #740]	; (8003564 <main+0x24dc>)
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd fd58 	bl	8000d34 <Lcd_string>
			if(LCD_scroll_count > 8){
 8003284:	f8b7 328c 	ldrh.w	r3, [r7, #652]	; 0x28c
 8003288:	2b08      	cmp	r3, #8
 800328a:	d908      	bls.n	800329e <main+0x2216>
				lcd_write_command(&lcd, 0x1A);
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	211a      	movs	r1, #26
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd fd92 	bl	8000dbc <lcd_write_command>
				LCD_scroll_count = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	f8a7 328c 	strh.w	r3, [r7, #652]	; 0x28c
			}

		}

		if(cols == 3 && rows == 2)
 800329e:	4bb2      	ldr	r3, [pc, #712]	; (8003568 <main+0x24e0>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d11d      	bne.n	80032e2 <main+0x225a>
 80032a6:	4bb1      	ldr	r3, [pc, #708]	; (800356c <main+0x24e4>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d119      	bne.n	80032e2 <main+0x225a>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80032ae:	f107 031c 	add.w	r3, r7, #28
 80032b2:	2200      	movs	r2, #0
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd fd5a 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "AC Current");
 80032bc:	f107 031c 	add.w	r3, r7, #28
 80032c0:	49ab      	ldr	r1, [pc, #684]	; (8003570 <main+0x24e8>)
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd fd36 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80032c8:	f107 031c 	add.w	r3, r7, #28
 80032cc:	2200      	movs	r2, #0
 80032ce:	2101      	movs	r1, #1
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd fd4d 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "-");
 80032d6:	f107 031c 	add.w	r3, r7, #28
 80032da:	49a6      	ldr	r1, [pc, #664]	; (8003574 <main+0x24ec>)
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd fd29 	bl	8000d34 <Lcd_string>
		}

		if(cols == 4 && rows == 2)
 80032e2:	4ba1      	ldr	r3, [pc, #644]	; (8003568 <main+0x24e0>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d117      	bne.n	800331a <main+0x2292>
 80032ea:	4ba0      	ldr	r3, [pc, #640]	; (800356c <main+0x24e4>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d113      	bne.n	800331a <main+0x2292>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80032f2:	f107 031c 	add.w	r3, r7, #28
 80032f6:	2200      	movs	r2, #0
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd fd38 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Type");
 8003300:	f107 031c 	add.w	r3, r7, #28
 8003304:	499c      	ldr	r1, [pc, #624]	; (8003578 <main+0x24f0>)
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fd14 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800330c:	f107 031c 	add.w	r3, r7, #28
 8003310:	2200      	movs	r2, #0
 8003312:	2101      	movs	r1, #1
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd fd2b 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 5 && rows == 2)
 800331a:	4b93      	ldr	r3, [pc, #588]	; (8003568 <main+0x24e0>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b05      	cmp	r3, #5
 8003320:	d117      	bne.n	8003352 <main+0x22ca>
 8003322:	4b92      	ldr	r3, [pc, #584]	; (800356c <main+0x24e4>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d113      	bne.n	8003352 <main+0x22ca>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 800332a:	f107 031c 	add.w	r3, r7, #28
 800332e:	2200      	movs	r2, #0
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd fd1c 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Parameter");
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	498f      	ldr	r1, [pc, #572]	; (800357c <main+0x24f4>)
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd fcf8 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003344:	f107 031c 	add.w	r3, r7, #28
 8003348:	2200      	movs	r2, #0
 800334a:	2101      	movs	r1, #1
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd fd0f 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 6 && rows == 2)
 8003352:	4b85      	ldr	r3, [pc, #532]	; (8003568 <main+0x24e0>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d117      	bne.n	800338a <main+0x2302>
 800335a:	4b84      	ldr	r3, [pc, #528]	; (800356c <main+0x24e4>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d113      	bne.n	800338a <main+0x2302>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003362:	f107 031c 	add.w	r3, r7, #28
 8003366:	2200      	movs	r2, #0
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fd00 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Output");
 8003370:	f107 031c 	add.w	r3, r7, #28
 8003374:	4982      	ldr	r1, [pc, #520]	; (8003580 <main+0x24f8>)
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fcdc 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800337c:	f107 031c 	add.w	r3, r7, #28
 8003380:	2200      	movs	r2, #0
 8003382:	2101      	movs	r1, #1
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd fcf3 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 0 && rows == 3)
 800338a:	4b77      	ldr	r3, [pc, #476]	; (8003568 <main+0x24e0>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d11d      	bne.n	80033ce <main+0x2346>
 8003392:	4b76      	ldr	r3, [pc, #472]	; (800356c <main+0x24e4>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d119      	bne.n	80033ce <main+0x2346>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 800339a:	f107 031c 	add.w	r3, r7, #28
 800339e:	2200      	movs	r2, #0
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd fce4 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Type");
 80033a8:	f107 031c 	add.w	r3, r7, #28
 80033ac:	4972      	ldr	r1, [pc, #456]	; (8003578 <main+0x24f0>)
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd fcc0 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80033b4:	f107 031c 	add.w	r3, r7, #28
 80033b8:	2200      	movs	r2, #0
 80033ba:	2101      	movs	r1, #1
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd fcd7 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "DC");
 80033c2:	f107 031c 	add.w	r3, r7, #28
 80033c6:	496f      	ldr	r1, [pc, #444]	; (8003584 <main+0x24fc>)
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fcb3 	bl	8000d34 <Lcd_string>
		}

		if(cols == 1 && rows == 3)
 80033ce:	4b66      	ldr	r3, [pc, #408]	; (8003568 <main+0x24e0>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d11d      	bne.n	8003412 <main+0x238a>
 80033d6:	4b65      	ldr	r3, [pc, #404]	; (800356c <main+0x24e4>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d119      	bne.n	8003412 <main+0x238a>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80033de:	f107 031c 	add.w	r3, r7, #28
 80033e2:	2200      	movs	r2, #0
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fcc2 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Type");
 80033ec:	f107 031c 	add.w	r3, r7, #28
 80033f0:	4961      	ldr	r1, [pc, #388]	; (8003578 <main+0x24f0>)
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd fc9e 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80033f8:	f107 031c 	add.w	r3, r7, #28
 80033fc:	2200      	movs	r2, #0
 80033fe:	2101      	movs	r1, #1
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd fcb5 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Sinusoidal");
 8003406:	f107 031c 	add.w	r3, r7, #28
 800340a:	495f      	ldr	r1, [pc, #380]	; (8003588 <main+0x2500>)
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd fc91 	bl	8000d34 <Lcd_string>
		}

		if(cols == 2 && rows == 3)
 8003412:	4b55      	ldr	r3, [pc, #340]	; (8003568 <main+0x24e0>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d11d      	bne.n	8003456 <main+0x23ce>
 800341a:	4b54      	ldr	r3, [pc, #336]	; (800356c <main+0x24e4>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b03      	cmp	r3, #3
 8003420:	d119      	bne.n	8003456 <main+0x23ce>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003422:	f107 031c 	add.w	r3, r7, #28
 8003426:	2200      	movs	r2, #0
 8003428:	2100      	movs	r1, #0
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fca0 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Type");
 8003430:	f107 031c 	add.w	r3, r7, #28
 8003434:	4950      	ldr	r1, [pc, #320]	; (8003578 <main+0x24f0>)
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fc7c 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800343c:	f107 031c 	add.w	r3, r7, #28
 8003440:	2200      	movs	r2, #0
 8003442:	2101      	movs	r1, #1
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd fc93 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Pulse");
 800344a:	f107 031c 	add.w	r3, r7, #28
 800344e:	494f      	ldr	r1, [pc, #316]	; (800358c <main+0x2504>)
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd fc6f 	bl	8000d34 <Lcd_string>
		}

		if(cols == 3 && rows == 3)
 8003456:	4b44      	ldr	r3, [pc, #272]	; (8003568 <main+0x24e0>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d117      	bne.n	800348e <main+0x2406>
 800345e:	4b43      	ldr	r3, [pc, #268]	; (800356c <main+0x24e4>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d113      	bne.n	800348e <main+0x2406>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003466:	f107 031c 	add.w	r3, r7, #28
 800346a:	2200      	movs	r2, #0
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd fc7e 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Amplitude");
 8003474:	f107 031c 	add.w	r3, r7, #28
 8003478:	4945      	ldr	r1, [pc, #276]	; (8003590 <main+0x2508>)
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd fc5a 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003480:	f107 031c 	add.w	r3, r7, #28
 8003484:	2200      	movs	r2, #0
 8003486:	2101      	movs	r1, #1
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd fc71 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 4 && rows == 3)
 800348e:	4b36      	ldr	r3, [pc, #216]	; (8003568 <main+0x24e0>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b04      	cmp	r3, #4
 8003494:	d117      	bne.n	80034c6 <main+0x243e>
 8003496:	4b35      	ldr	r3, [pc, #212]	; (800356c <main+0x24e4>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d113      	bne.n	80034c6 <main+0x243e>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 800349e:	f107 031c 	add.w	r3, r7, #28
 80034a2:	2200      	movs	r2, #0
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd fc62 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Offset");
 80034ac:	f107 031c 	add.w	r3, r7, #28
 80034b0:	4938      	ldr	r1, [pc, #224]	; (8003594 <main+0x250c>)
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd fc3e 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80034b8:	f107 031c 	add.w	r3, r7, #28
 80034bc:	2200      	movs	r2, #0
 80034be:	2101      	movs	r1, #1
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd fc55 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 5 && rows == 3)
 80034c6:	4b28      	ldr	r3, [pc, #160]	; (8003568 <main+0x24e0>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d117      	bne.n	80034fe <main+0x2476>
 80034ce:	4b27      	ldr	r3, [pc, #156]	; (800356c <main+0x24e4>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d113      	bne.n	80034fe <main+0x2476>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80034d6:	f107 031c 	add.w	r3, r7, #28
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fc46 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Frequency");
 80034e4:	f107 031c 	add.w	r3, r7, #28
 80034e8:	492b      	ldr	r1, [pc, #172]	; (8003598 <main+0x2510>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd fc22 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80034f0:	f107 031c 	add.w	r3, r7, #28
 80034f4:	2200      	movs	r2, #0
 80034f6:	2101      	movs	r1, #1
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd fc39 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 6 && rows == 3)
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <main+0x24e0>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b06      	cmp	r3, #6
 8003504:	d11d      	bne.n	8003542 <main+0x24ba>
 8003506:	4b19      	ldr	r3, [pc, #100]	; (800356c <main+0x24e4>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b03      	cmp	r3, #3
 800350c:	d119      	bne.n	8003542 <main+0x24ba>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 800350e:	f107 031c 	add.w	r3, r7, #28
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fc2a 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Parameter");
 800351c:	f107 031c 	add.w	r3, r7, #28
 8003520:	4916      	ldr	r1, [pc, #88]	; (800357c <main+0x24f4>)
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd fc06 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003528:	f107 031c 	add.w	r3, r7, #28
 800352c:	2200      	movs	r2, #0
 800352e:	2101      	movs	r1, #1
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd fc1d 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Duty Cycle");
 8003536:	f107 031c 	add.w	r3, r7, #28
 800353a:	4918      	ldr	r1, [pc, #96]	; (800359c <main+0x2514>)
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd fbf9 	bl	8000d34 <Lcd_string>
		}

		if(cols == 7 && rows == 3)
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <main+0x24e0>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b07      	cmp	r3, #7
 8003548:	d144      	bne.n	80035d4 <main+0x254c>
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <main+0x24e4>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d140      	bne.n	80035d4 <main+0x254c>
 8003552:	e025      	b.n	80035a0 <main+0x2518>
 8003554:	0800e45c 	.word	0x0800e45c
 8003558:	0800e480 	.word	0x0800e480
 800355c:	0800e488 	.word	0x0800e488
 8003560:	0800e48c 	.word	0x0800e48c
 8003564:	0800e490 	.word	0x0800e490
 8003568:	200000ae 	.word	0x200000ae
 800356c:	200000af 	.word	0x200000af
 8003570:	0800e494 	.word	0x0800e494
 8003574:	0800e46c 	.word	0x0800e46c
 8003578:	0800e4a0 	.word	0x0800e4a0
 800357c:	0800e4a8 	.word	0x0800e4a8
 8003580:	0800e4b4 	.word	0x0800e4b4
 8003584:	0800e4bc 	.word	0x0800e4bc
 8003588:	0800e4c0 	.word	0x0800e4c0
 800358c:	0800e4cc 	.word	0x0800e4cc
 8003590:	0800e4d4 	.word	0x0800e4d4
 8003594:	0800e4e0 	.word	0x0800e4e0
 8003598:	0800e4e8 	.word	0x0800e4e8
 800359c:	0800e4f4 	.word	0x0800e4f4
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80035a0:	f107 031c 	add.w	r3, r7, #28
 80035a4:	2200      	movs	r2, #0
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fd fbe1 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Output");
 80035ae:	f107 031c 	add.w	r3, r7, #28
 80035b2:	49dd      	ldr	r1, [pc, #884]	; (8003928 <main+0x28a0>)
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd fbbd 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80035ba:	f107 031c 	add.w	r3, r7, #28
 80035be:	2200      	movs	r2, #0
 80035c0:	2101      	movs	r1, #1
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fbd4 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "On");
 80035c8:	f107 031c 	add.w	r3, r7, #28
 80035cc:	49d7      	ldr	r1, [pc, #860]	; (800392c <main+0x28a4>)
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd fbb0 	bl	8000d34 <Lcd_string>
		}

		if(cols == 8 && rows == 3)
 80035d4:	4bd6      	ldr	r3, [pc, #856]	; (8003930 <main+0x28a8>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d11d      	bne.n	8003618 <main+0x2590>
 80035dc:	4bd5      	ldr	r3, [pc, #852]	; (8003934 <main+0x28ac>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d119      	bne.n	8003618 <main+0x2590>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80035e4:	f107 031c 	add.w	r3, r7, #28
 80035e8:	2200      	movs	r2, #0
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fd fbbf 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Output");
 80035f2:	f107 031c 	add.w	r3, r7, #28
 80035f6:	49cc      	ldr	r1, [pc, #816]	; (8003928 <main+0x28a0>)
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fb9b 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80035fe:	f107 031c 	add.w	r3, r7, #28
 8003602:	2200      	movs	r2, #0
 8003604:	2101      	movs	r1, #1
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd fbb2 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Off");
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	49c9      	ldr	r1, [pc, #804]	; (8003938 <main+0x28b0>)
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fb8e 	bl	8000d34 <Lcd_string>
		}

		if(cols == 1 && rows == 0)
 8003618:	4bc5      	ldr	r3, [pc, #788]	; (8003930 <main+0x28a8>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	f040 8276 	bne.w	8003b0e <main+0x2a86>
 8003622:	4bc4      	ldr	r3, [pc, #784]	; (8003934 <main+0x28ac>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 8271 	bne.w	8003b0e <main+0x2a86>
		{
			Lcd_cursor(&lcd, 0, 0);
 800362c:	f107 031c 	add.w	r3, r7, #28
 8003630:	2200      	movs	r2, #0
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f7fd fb9b 	bl	8000d70 <Lcd_cursor>
			if(currentflag)
 800363a:	4bc0      	ldr	r3, [pc, #768]	; (800393c <main+0x28b4>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <main+0x25c6>
			{
				Lcd_string(&lcd, "None");
 8003642:	f107 031c 	add.w	r3, r7, #28
 8003646:	49be      	ldr	r1, [pc, #760]	; (8003940 <main+0x28b8>)
 8003648:	4618      	mov	r0, r3
 800364a:	f7fd fb73 	bl	8000d34 <Lcd_string>
			}
			if (DC_measure) {
 800364e:	f897 32c9 	ldrb.w	r3, [r7, #713]	; 0x2c9
 8003652:	2b00      	cmp	r3, #0
 8003654:	d037      	beq.n	80036c6 <main+0x263e>

				Lcd_int(&lcd, (DCdisplayoffset[6] - 48));
 8003656:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800365a:	799b      	ldrb	r3, [r3, #6]
 800365c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003660:	f107 031c 	add.w	r3, r7, #28
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f7fd fb4c 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "." );
 800366c:	f107 031c 	add.w	r3, r7, #28
 8003670:	49b4      	ldr	r1, [pc, #720]	; (8003944 <main+0x28bc>)
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd fb5e 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, (DCdisplayoffset[7]-48));
 8003678:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800367c:	79db      	ldrb	r3, [r3, #7]
 800367e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003682:	f107 031c 	add.w	r3, r7, #28
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f7fd fb3b 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (DCdisplayoffset[8]-48));
 800368e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003692:	7a1b      	ldrb	r3, [r3, #8]
 8003694:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003698:	f107 031c 	add.w	r3, r7, #28
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd fb30 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (DCdisplayoffset[9] - 48));
 80036a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036a8:	7a5b      	ldrb	r3, [r3, #9]
 80036aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80036ae:	f107 031c 	add.w	r3, r7, #28
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fd fb25 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "V");
 80036ba:	f107 031c 	add.w	r3, r7, #28
 80036be:	49a2      	ldr	r1, [pc, #648]	; (8003948 <main+0x28c0>)
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd fb37 	bl	8000d34 <Lcd_string>
			}
			if (AC_measure) {
 80036c6:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80ad 	beq.w	800382a <main+0x27a2>
				LCD_scroll_count++;
 80036d0:	f8b7 328c 	ldrh.w	r3, [r7, #652]	; 0x28c
 80036d4:	3301      	adds	r3, #1
 80036d6:	f8a7 328c 	strh.w	r3, [r7, #652]	; 0x28c
				//				Lcd_cursor(&lcd, 0, 0);
				Lcd_string(&lcd, "O:");
 80036da:	f107 031c 	add.w	r3, r7, #28
 80036de:	499b      	ldr	r1, [pc, #620]	; (800394c <main+0x28c4>)
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fd fb27 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, (ACdisplayoffset[6]-48));
 80036e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036ea:	799b      	ldrb	r3, [r3, #6]
 80036ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80036f0:	f107 031c 	add.w	r3, r7, #28
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fb04 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "." );
 80036fc:	f107 031c 	add.w	r3, r7, #28
 8003700:	4990      	ldr	r1, [pc, #576]	; (8003944 <main+0x28bc>)
 8003702:	4618      	mov	r0, r3
 8003704:	f7fd fb16 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, (ACdisplayoffset[7]-48));
 8003708:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800370c:	79db      	ldrb	r3, [r3, #7]
 800370e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003712:	f107 031c 	add.w	r3, r7, #28
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f7fd faf3 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (ACdisplayoffset[8]-48));
 800371e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003722:	7a1b      	ldrb	r3, [r3, #8]
 8003724:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003728:	f107 031c 	add.w	r3, r7, #28
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f7fd fae8 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (ACdisplayoffset[9]-48));
 8003734:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003738:	7a5b      	ldrb	r3, [r3, #9]
 800373a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800373e:	f107 031c 	add.w	r3, r7, #28
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd fadd 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "V");
 800374a:	f107 031c 	add.w	r3, r7, #28
 800374e:	497e      	ldr	r1, [pc, #504]	; (8003948 <main+0x28c0>)
 8003750:	4618      	mov	r0, r3
 8003752:	f7fd faef 	bl	8000d34 <Lcd_string>

				//Amplitude //
				Lcd_string(&lcd, "A:");
 8003756:	f107 031c 	add.w	r3, r7, #28
 800375a:	497d      	ldr	r1, [pc, #500]	; (8003950 <main+0x28c8>)
 800375c:	4618      	mov	r0, r3
 800375e:	f7fd fae9 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, (AC_disp_pk_pk[6]-48));
 8003762:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003766:	799b      	ldrb	r3, [r3, #6]
 8003768:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800376c:	f107 031c 	add.w	r3, r7, #28
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7fd fac6 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "." );
 8003778:	f107 031c 	add.w	r3, r7, #28
 800377c:	4971      	ldr	r1, [pc, #452]	; (8003944 <main+0x28bc>)
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd fad8 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, (AC_disp_pk_pk[7]-48));
 8003784:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003788:	79db      	ldrb	r3, [r3, #7]
 800378a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800378e:	f107 031c 	add.w	r3, r7, #28
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f7fd fab5 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (AC_disp_pk_pk[8]-48));
 800379a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800379e:	7a1b      	ldrb	r3, [r3, #8]
 80037a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80037a4:	f107 031c 	add.w	r3, r7, #28
 80037a8:	4611      	mov	r1, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd faaa 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (AC_disp_pk_pk[9] -48));
 80037b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037b4:	7a5b      	ldrb	r3, [r3, #9]
 80037b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80037ba:	f107 031c 	add.w	r3, r7, #28
 80037be:	4611      	mov	r1, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fd fa9f 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "V");
 80037c6:	f107 031c 	add.w	r3, r7, #28
 80037ca:	495f      	ldr	r1, [pc, #380]	; (8003948 <main+0x28c0>)
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fd fab1 	bl	8000d34 <Lcd_string>

				//Frequency//
				if(AC_freq<1000)
 80037d2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80037d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037da:	d205      	bcs.n	80037e8 <main+0x2760>
				{
					Lcd_string(&lcd, "0");
 80037dc:	f107 031c 	add.w	r3, r7, #28
 80037e0:	495c      	ldr	r1, [pc, #368]	; (8003954 <main+0x28cc>)
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd faa6 	bl	8000d34 <Lcd_string>
				}
				Lcd_string(&lcd, "F:");
 80037e8:	f107 031c 	add.w	r3, r7, #28
 80037ec:	495a      	ldr	r1, [pc, #360]	; (8003958 <main+0x28d0>)
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd faa0 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, AC_freq);
 80037f4:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 80037f8:	f107 031c 	add.w	r3, r7, #28
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd fa80 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "Hz");
 8003804:	f107 031c 	add.w	r3, r7, #28
 8003808:	4954      	ldr	r1, [pc, #336]	; (800395c <main+0x28d4>)
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd fa92 	bl	8000d34 <Lcd_string>
				if(LCD_scroll_count > 8){
 8003810:	f8b7 328c 	ldrh.w	r3, [r7, #652]	; 0x28c
 8003814:	2b08      	cmp	r3, #8
 8003816:	d908      	bls.n	800382a <main+0x27a2>
					lcd_write_command(&lcd, 0x1A);
 8003818:	f107 031c 	add.w	r3, r7, #28
 800381c:	211a      	movs	r1, #26
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd facc 	bl	8000dbc <lcd_write_command>
					LCD_scroll_count = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	f8a7 328c 	strh.w	r3, [r7, #652]	; 0x28c
				}
			}
			Lcd_cursor(&lcd, 1, 0);
 800382a:	f107 031c 	add.w	r3, r7, #28
 800382e:	2200      	movs	r2, #0
 8003830:	2101      	movs	r1, #1
 8003832:	4618      	mov	r0, r3
 8003834:	f7fd fa9c 	bl	8000d70 <Lcd_cursor>
			if(output == 0)
 8003838:	f897 32b3 	ldrb.w	r3, [r7, #691]	; 0x2b3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10c      	bne.n	800385a <main+0x27d2>
			{
				Lcd_cursor(&lcd, 1, 0);
 8003840:	f107 031c 	add.w	r3, r7, #28
 8003844:	2200      	movs	r2, #0
 8003846:	2101      	movs	r1, #1
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd fa91 	bl	8000d70 <Lcd_cursor>
				Lcd_string(&lcd, "OUTPUT OFF");
 800384e:	f107 031c 	add.w	r3, r7, #28
 8003852:	4943      	ldr	r1, [pc, #268]	; (8003960 <main+0x28d8>)
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fa6d 	bl	8000d34 <Lcd_string>
			}
			if(output == 1)
 800385a:	f897 32b3 	ldrb.w	r3, [r7, #691]	; 0x2b3
 800385e:	2b01      	cmp	r3, #1
 8003860:	f040 8155 	bne.w	8003b0e <main+0x2a86>
			{
				if(itsDC)
 8003864:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <main+0x28dc>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d03f      	beq.n	80038ec <main+0x2864>
				{
					scrollflag = 0;
 800386c:	4b3e      	ldr	r3, [pc, #248]	; (8003968 <main+0x28e0>)
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
					//Lcd_cursor(&lcd, 1, 0);
					Lcd_string(&lcd, "O:");
 8003872:	f107 031c 	add.w	r3, r7, #28
 8003876:	4935      	ldr	r1, [pc, #212]	; (800394c <main+0x28c4>)
 8003878:	4618      	mov	r0, r3
 800387a:	f7fd fa5b 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, DC_offset_output_value[0]);
 800387e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	f107 031c 	add.w	r3, r7, #28
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd fa39 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, ".");
 8003892:	f107 031c 	add.w	r3, r7, #28
 8003896:	492b      	ldr	r1, [pc, #172]	; (8003944 <main+0x28bc>)
 8003898:	4618      	mov	r0, r3
 800389a:	f7fd fa4b 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, DC_offset_output_value[1]);
 800389e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038a2:	785b      	ldrb	r3, [r3, #1]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f107 031c 	add.w	r3, r7, #28
 80038aa:	4611      	mov	r1, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fd fa29 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, DC_offset_output_value[2]);
 80038b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038b6:	789b      	ldrb	r3, [r3, #2]
 80038b8:	461a      	mov	r2, r3
 80038ba:	f107 031c 	add.w	r3, r7, #28
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd fa1f 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, DC_offset_output_value[3]);
 80038c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038ca:	78db      	ldrb	r3, [r3, #3]
 80038cc:	461a      	mov	r2, r3
 80038ce:	f107 031c 	add.w	r3, r7, #28
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fa15 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, "V");
 80038da:	f107 031c 	add.w	r3, r7, #28
 80038de:	491a      	ldr	r1, [pc, #104]	; (8003948 <main+0x28c0>)
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd fa27 	bl	8000d34 <Lcd_string>
					itsDC = 0;
 80038e6:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <main+0x28dc>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
				}
				if(itsAC)
 80038ec:	4b1f      	ldr	r3, [pc, #124]	; (800396c <main+0x28e4>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80e0 	beq.w	8003ab6 <main+0x2a2e>
				{
					scrollflag = 1;
 80038f6:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <main+0x28e0>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
					//Lcd_cursor(&lcd, 1, 0);
					//										LCD_scroll_count++;

					Lcd_string(&lcd, "O:");
 80038fc:	f107 031c 	add.w	r3, r7, #28
 8003900:	4912      	ldr	r1, [pc, #72]	; (800394c <main+0x28c4>)
 8003902:	4618      	mov	r0, r3
 8003904:	f7fd fa16 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, DC_offset_output_value[0]);
 8003908:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	f107 031c 	add.w	r3, r7, #28
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd f9f4 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, ".");
 800391c:	f107 031c 	add.w	r3, r7, #28
 8003920:	4908      	ldr	r1, [pc, #32]	; (8003944 <main+0x28bc>)
 8003922:	4618      	mov	r0, r3
 8003924:	e024      	b.n	8003970 <main+0x28e8>
 8003926:	bf00      	nop
 8003928:	0800e4b4 	.word	0x0800e4b4
 800392c:	0800e500 	.word	0x0800e500
 8003930:	200000ae 	.word	0x200000ae
 8003934:	200000af 	.word	0x200000af
 8003938:	0800e504 	.word	0x0800e504
 800393c:	200002ba 	.word	0x200002ba
 8003940:	0800e508 	.word	0x0800e508
 8003944:	0800e458 	.word	0x0800e458
 8003948:	0800e45c 	.word	0x0800e45c
 800394c:	0800e47c 	.word	0x0800e47c
 8003950:	0800e484 	.word	0x0800e484
 8003954:	0800e488 	.word	0x0800e488
 8003958:	0800e48c 	.word	0x0800e48c
 800395c:	0800e490 	.word	0x0800e490
 8003960:	0800e510 	.word	0x0800e510
 8003964:	200000b0 	.word	0x200000b0
 8003968:	200002b9 	.word	0x200002b9
 800396c:	200000b1 	.word	0x200000b1
 8003970:	f7fd f9e0 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, DC_offset_output_value[1]);
 8003974:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	461a      	mov	r2, r3
 800397c:	f107 031c 	add.w	r3, r7, #28
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd f9be 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, DC_offset_output_value[2]);
 8003988:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800398c:	789b      	ldrb	r3, [r3, #2]
 800398e:	461a      	mov	r2, r3
 8003990:	f107 031c 	add.w	r3, r7, #28
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd f9b4 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, DC_offset_output_value[3]);
 800399c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039a0:	78db      	ldrb	r3, [r3, #3]
 80039a2:	461a      	mov	r2, r3
 80039a4:	f107 031c 	add.w	r3, r7, #28
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd f9aa 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, "V");
 80039b0:	f107 031c 	add.w	r3, r7, #28
 80039b4:	49da      	ldr	r1, [pc, #872]	; (8003d20 <main+0x2c98>)
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd f9bc 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, ",");
 80039bc:	f107 031c 	add.w	r3, r7, #28
 80039c0:	49d8      	ldr	r1, [pc, #864]	; (8003d24 <main+0x2c9c>)
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd f9b6 	bl	8000d34 <Lcd_string>

					Lcd_string(&lcd, "A:");
 80039c8:	f107 031c 	add.w	r3, r7, #28
 80039cc:	49d6      	ldr	r1, [pc, #856]	; (8003d28 <main+0x2ca0>)
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd f9b0 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, (amplitude_output_value[0]));
 80039d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	f107 031c 	add.w	r3, r7, #28
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd f98e 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, "." );
 80039e8:	f107 031c 	add.w	r3, r7, #28
 80039ec:	49cf      	ldr	r1, [pc, #828]	; (8003d2c <main+0x2ca4>)
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd f9a0 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, (amplitude_output_value[1]));
 80039f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039f8:	785b      	ldrb	r3, [r3, #1]
 80039fa:	461a      	mov	r2, r3
 80039fc:	f107 031c 	add.w	r3, r7, #28
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd f97e 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (amplitude_output_value[2]));
 8003a08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a0c:	789b      	ldrb	r3, [r3, #2]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f107 031c 	add.w	r3, r7, #28
 8003a14:	4611      	mov	r1, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd f974 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (amplitude_output_value[3]));
 8003a1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a20:	78db      	ldrb	r3, [r3, #3]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f107 031c 	add.w	r3, r7, #28
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd f96a 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, "V");
 8003a30:	f107 031c 	add.w	r3, r7, #28
 8003a34:	49ba      	ldr	r1, [pc, #744]	; (8003d20 <main+0x2c98>)
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd f97c 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, ",");
 8003a3c:	f107 031c 	add.w	r3, r7, #28
 8003a40:	49b8      	ldr	r1, [pc, #736]	; (8003d24 <main+0x2c9c>)
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fd f976 	bl	8000d34 <Lcd_string>

					Lcd_string(&lcd, "F:");
 8003a48:	f107 031c 	add.w	r3, r7, #28
 8003a4c:	49b8      	ldr	r1, [pc, #736]	; (8003d30 <main+0x2ca8>)
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fd f970 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, (frequency_output_value[0]));
 8003a54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd f94e 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (frequency_output_value[1]));
 8003a68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a6c:	785b      	ldrb	r3, [r3, #1]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f107 031c 	add.w	r3, r7, #28
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fd f944 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (frequency_output_value[2]));
 8003a7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a80:	789b      	ldrb	r3, [r3, #2]
 8003a82:	461a      	mov	r2, r3
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fd f93a 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (frequency_output_value[3]));
 8003a90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a94:	78db      	ldrb	r3, [r3, #3]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f107 031c 	add.w	r3, r7, #28
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd f930 	bl	8000d04 <Lcd_int>

					Lcd_string(&lcd, "Hz");
 8003aa4:	f107 031c 	add.w	r3, r7, #28
 8003aa8:	49a2      	ldr	r1, [pc, #648]	; (8003d34 <main+0x2cac>)
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd f942 	bl	8000d34 <Lcd_string>
					itsAC = 0;
 8003ab0:	4ba1      	ldr	r3, [pc, #644]	; (8003d38 <main+0x2cb0>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
				}

				if (signal_p == 1) {
 8003ab6:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d10f      	bne.n	8003ae2 <main+0x2a5a>
					scrollflag = 1;
 8003ac2:	4b9e      	ldr	r3, [pc, #632]	; (8003d3c <main+0x2cb4>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
					Lcd_cursor(&lcd, 1, 0);
 8003ac8:	f107 031c 	add.w	r3, r7, #28
 8003acc:	2200      	movs	r2, #0
 8003ace:	2101      	movs	r1, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fd f94d 	bl	8000d70 <Lcd_cursor>
					Lcd_string(&lcd, "O:1200V;A:1000V;F:1000Hz;D:025%");
 8003ad6:	f107 031c 	add.w	r3, r7, #28
 8003ada:	4999      	ldr	r1, [pc, #612]	; (8003d40 <main+0x2cb8>)
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fd f929 	bl	8000d34 <Lcd_string>
				}

				if(scrollflag)
 8003ae2:	4b96      	ldr	r3, [pc, #600]	; (8003d3c <main+0x2cb4>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d011      	beq.n	8003b0e <main+0x2a86>
				{
					LCD_scroll_count++;
 8003aea:	f8b7 328c 	ldrh.w	r3, [r7, #652]	; 0x28c
 8003aee:	3301      	adds	r3, #1
 8003af0:	f8a7 328c 	strh.w	r3, [r7, #652]	; 0x28c
					if(LCD_scroll_count > 8){
 8003af4:	f8b7 328c 	ldrh.w	r3, [r7, #652]	; 0x28c
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d908      	bls.n	8003b0e <main+0x2a86>
						lcd_write_command(&lcd, 0x1A);
 8003afc:	f107 031c 	add.w	r3, r7, #28
 8003b00:	211a      	movs	r1, #26
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd f95a 	bl	8000dbc <lcd_write_command>
						LCD_scroll_count = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8a7 328c 	strh.w	r3, [r7, #652]	; 0x28c
			}


		}

		if(cols == 0 && rows == 4)
 8003b0e:	4b8d      	ldr	r3, [pc, #564]	; (8003d44 <main+0x2cbc>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 8089 	bne.w	8003c2a <main+0x2ba2>
 8003b18:	4b8b      	ldr	r3, [pc, #556]	; (8003d48 <main+0x2cc0>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	f040 8084 	bne.w	8003c2a <main+0x2ba2>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003b22:	f107 031c 	add.w	r3, r7, #28
 8003b26:	2200      	movs	r2, #0
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd f920 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Amplitude");
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	4985      	ldr	r1, [pc, #532]	; (8003d4c <main+0x2cc4>)
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd f8fc 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003b3c:	f107 031c 	add.w	r3, r7, #28
 8003b40:	2200      	movs	r2, #0
 8003b42:	2101      	movs	r1, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fd f913 	bl	8000d70 <Lcd_cursor>
			Lcd_int(&lcd, (amplitude_output_value[0]));
 8003b4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	f107 031c 	add.w	r3, r7, #28
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fd f8d3 	bl	8000d04 <Lcd_int>
			//			Lcd_string(&lcd, "." );
			Lcd_int(&lcd, (amplitude_output_value[1]));
 8003b5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	461a      	mov	r2, r3
 8003b66:	f107 031c 	add.w	r3, r7, #28
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fd f8c9 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (amplitude_output_value[2]));
 8003b72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b76:	789b      	ldrb	r3, [r3, #2]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f107 031c 	add.w	r3, r7, #28
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fd f8bf 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (amplitude_output_value[3]));
 8003b86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b8a:	78db      	ldrb	r3, [r3, #3]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f107 031c 	add.w	r3, r7, #28
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fd f8b5 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "mV");
 8003b9a:	f107 031c 	add.w	r3, r7, #28
 8003b9e:	496c      	ldr	r1, [pc, #432]	; (8003d50 <main+0x2cc8>)
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fd f8c7 	bl	8000d34 <Lcd_string>
			if (setAmplitude == 1)
 8003ba6:	4b6b      	ldr	r3, [pc, #428]	; (8003d54 <main+0x2ccc>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d13d      	bne.n	8003c2a <main+0x2ba2>
			{
				Lcd_string(&lcd, " ");
 8003bae:	f107 031c 	add.w	r3, r7, #28
 8003bb2:	4969      	ldr	r1, [pc, #420]	; (8003d58 <main+0x2cd0>)
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fd f8bd 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "S");
 8003bba:	f107 031c 	add.w	r3, r7, #28
 8003bbe:	4967      	ldr	r1, [pc, #412]	; (8003d5c <main+0x2cd4>)
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fd f8b7 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "e");
 8003bc6:	f107 031c 	add.w	r3, r7, #28
 8003bca:	4965      	ldr	r1, [pc, #404]	; (8003d60 <main+0x2cd8>)
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd f8b1 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "t");
 8003bd2:	f107 031c 	add.w	r3, r7, #28
 8003bd6:	4963      	ldr	r1, [pc, #396]	; (8003d64 <main+0x2cdc>)
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd f8ab 	bl	8000d34 <Lcd_string>
				DAC_amplitude_output = (amplitude_output_value[0])*1000 + (amplitude_output_value[1])*100 + (amplitude_output_value[2])*10 + (amplitude_output_value[3]);
 8003bde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bea:	fb03 f202 	mul.w	r2, r3, r2
 8003bee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bf2:	785b      	ldrb	r3, [r3, #1]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	2364      	movs	r3, #100	; 0x64
 8003bf8:	fb03 f301 	mul.w	r3, r3, r1
 8003bfc:	441a      	add	r2, r3
 8003bfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c02:	789b      	ldrb	r3, [r3, #2]
 8003c04:	4619      	mov	r1, r3
 8003c06:	460b      	mov	r3, r1
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003c14:	78d2      	ldrb	r2, [r2, #3]
 8003c16:	4413      	add	r3, r2
 8003c18:	ee07 3a90 	vmov	s15, r3
 8003c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c20:	edc7 7aab 	vstr	s15, [r7, #684]	; 0x2ac
				setAmplitude = 0;
 8003c24:	4b4b      	ldr	r3, [pc, #300]	; (8003d54 <main+0x2ccc>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
			}


		}
		if(cols == 1 && rows == 4)
 8003c2a:	4b46      	ldr	r3, [pc, #280]	; (8003d44 <main+0x2cbc>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	f040 8142 	bne.w	8003eb8 <main+0x2e30>
 8003c34:	4b44      	ldr	r3, [pc, #272]	; (8003d48 <main+0x2cc0>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	f040 813d 	bne.w	8003eb8 <main+0x2e30>
		{
			//			Lcd_clear(&lcd);
			if (itsDC)
 8003c3e:	4b4a      	ldr	r3, [pc, #296]	; (8003d68 <main+0x2ce0>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80af 	beq.w	8003da6 <main+0x2d1e>
			{
				Lcd_cursor(&lcd, 0, 0);
 8003c48:	f107 031c 	add.w	r3, r7, #28
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fd f88d 	bl	8000d70 <Lcd_cursor>
				Lcd_string(&lcd, "Offset");
 8003c56:	f107 031c 	add.w	r3, r7, #28
 8003c5a:	4944      	ldr	r1, [pc, #272]	; (8003d6c <main+0x2ce4>)
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd f869 	bl	8000d34 <Lcd_string>
				Lcd_cursor(&lcd, 1, 0);
 8003c62:	f107 031c 	add.w	r3, r7, #28
 8003c66:	2200      	movs	r2, #0
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fd f880 	bl	8000d70 <Lcd_cursor>
				Lcd_int(&lcd, DC_offset_output_value[0]);
 8003c70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	f107 031c 	add.w	r3, r7, #28
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fd f840 	bl	8000d04 <Lcd_int>
				//				Lcd_string(&lcd, ".");
				Lcd_int(&lcd, DC_offset_output_value[1]);
 8003c84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f107 031c 	add.w	r3, r7, #28
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fd f836 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, DC_offset_output_value[2]);
 8003c98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c9c:	789b      	ldrb	r3, [r3, #2]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fd f82c 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, DC_offset_output_value[3]);
 8003cac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cb0:	78db      	ldrb	r3, [r3, #3]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f107 031c 	add.w	r3, r7, #28
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fd f822 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "mV");
 8003cc0:	f107 031c 	add.w	r3, r7, #28
 8003cc4:	4922      	ldr	r1, [pc, #136]	; (8003d50 <main+0x2cc8>)
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fd f834 	bl	8000d34 <Lcd_string>

				if (setOffset == 1)
 8003ccc:	4b28      	ldr	r3, [pc, #160]	; (8003d70 <main+0x2ce8>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d168      	bne.n	8003da6 <main+0x2d1e>
				{
					//signal_d = 1;
					//					DCDACMENU = 1;
					Lcd_string(&lcd, " ");
 8003cd4:	f107 031c 	add.w	r3, r7, #28
 8003cd8:	491f      	ldr	r1, [pc, #124]	; (8003d58 <main+0x2cd0>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd f82a 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "S");
 8003ce0:	f107 031c 	add.w	r3, r7, #28
 8003ce4:	491d      	ldr	r1, [pc, #116]	; (8003d5c <main+0x2cd4>)
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fd f824 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "e");
 8003cec:	f107 031c 	add.w	r3, r7, #28
 8003cf0:	491b      	ldr	r1, [pc, #108]	; (8003d60 <main+0x2cd8>)
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd f81e 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "t");
 8003cf8:	f107 031c 	add.w	r3, r7, #28
 8003cfc:	4919      	ldr	r1, [pc, #100]	; (8003d64 <main+0x2cdc>)
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fd f818 	bl	8000d34 <Lcd_string>
					//					DC_offset_output_value[0] = DC_offset_output_value[0] - 48;
					//					DC_offset_output_value[1] = DC_offset_output_value[1] - 48;
					//					DC_offset_output_value[2] = DC_offset_output_value[2] - 48;
					//					DC_offset_output_value[3] = DC_offset_output_value[3] - 48;
					DAC_DC_offset = DC_offset_output_value[0]*1000 + DC_offset_output_value[1]*100 + DC_offset_output_value[2]*10 + DC_offset_output_value[3];
 8003d04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d10:	fb03 f202 	mul.w	r2, r3, r2
 8003d14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d18:	785b      	ldrb	r3, [r3, #1]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	2364      	movs	r3, #100	; 0x64
 8003d1e:	e029      	b.n	8003d74 <main+0x2cec>
 8003d20:	0800e45c 	.word	0x0800e45c
 8003d24:	0800e480 	.word	0x0800e480
 8003d28:	0800e484 	.word	0x0800e484
 8003d2c:	0800e458 	.word	0x0800e458
 8003d30:	0800e48c 	.word	0x0800e48c
 8003d34:	0800e490 	.word	0x0800e490
 8003d38:	200000b1 	.word	0x200000b1
 8003d3c:	200002b9 	.word	0x200002b9
 8003d40:	0800e51c 	.word	0x0800e51c
 8003d44:	200000ae 	.word	0x200000ae
 8003d48:	200000af 	.word	0x200000af
 8003d4c:	0800e4d4 	.word	0x0800e4d4
 8003d50:	0800e53c 	.word	0x0800e53c
 8003d54:	200000c0 	.word	0x200000c0
 8003d58:	0800e540 	.word	0x0800e540
 8003d5c:	0800e544 	.word	0x0800e544
 8003d60:	0800e548 	.word	0x0800e548
 8003d64:	0800e54c 	.word	0x0800e54c
 8003d68:	200000b0 	.word	0x200000b0
 8003d6c:	0800e4e0 	.word	0x0800e4e0
 8003d70:	200002b8 	.word	0x200002b8
 8003d74:	fb03 f301 	mul.w	r3, r3, r1
 8003d78:	441a      	add	r2, r3
 8003d7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d7e:	789b      	ldrb	r3, [r3, #2]
 8003d80:	4619      	mov	r1, r3
 8003d82:	460b      	mov	r3, r1
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003d90:	78d2      	ldrb	r2, [r2, #3]
 8003d92:	4413      	add	r3, r2
 8003d94:	ee07 3a90 	vmov	s15, r3
 8003d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d9c:	edc7 7aa5 	vstr	s15, [r7, #660]	; 0x294
					setOffset = 0;
 8003da0:	4bca      	ldr	r3, [pc, #808]	; (80040cc <main+0x3044>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
				}
			}

			if (itsAC)
 8003da6:	4bca      	ldr	r3, [pc, #808]	; (80040d0 <main+0x3048>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8084 	beq.w	8003eb8 <main+0x2e30>
			{
				//				signal_s = 1;
				Lcd_cursor(&lcd, 0, 0);
 8003db0:	f107 031c 	add.w	r3, r7, #28
 8003db4:	2200      	movs	r2, #0
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc ffd9 	bl	8000d70 <Lcd_cursor>
				Lcd_string(&lcd, "Offset");
 8003dbe:	f107 031c 	add.w	r3, r7, #28
 8003dc2:	49c4      	ldr	r1, [pc, #784]	; (80040d4 <main+0x304c>)
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc ffb5 	bl	8000d34 <Lcd_string>
				Lcd_cursor(&lcd, 1, 0);
 8003dca:	f107 031c 	add.w	r3, r7, #28
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc ffcc 	bl	8000d70 <Lcd_cursor>
				Lcd_int(&lcd, (offset_output_value[0]));
 8003dd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	f107 031c 	add.w	r3, r7, #28
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fc ff8c 	bl	8000d04 <Lcd_int>
				//				Lcd_string(&lcd, "." );
				Lcd_int(&lcd, (offset_output_value[1]));
 8003dec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003df0:	785b      	ldrb	r3, [r3, #1]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f107 031c 	add.w	r3, r7, #28
 8003df8:	4611      	mov	r1, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fc ff82 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (offset_output_value[2]));
 8003e00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e04:	789b      	ldrb	r3, [r3, #2]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fc ff78 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (offset_output_value[3]));
 8003e14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e18:	78db      	ldrb	r3, [r3, #3]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f107 031c 	add.w	r3, r7, #28
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc ff6e 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "mV");
 8003e28:	f107 031c 	add.w	r3, r7, #28
 8003e2c:	49aa      	ldr	r1, [pc, #680]	; (80040d8 <main+0x3050>)
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fc ff80 	bl	8000d34 <Lcd_string>
				if (setOffset == 1)
 8003e34:	4ba5      	ldr	r3, [pc, #660]	; (80040cc <main+0x3044>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d13d      	bne.n	8003eb8 <main+0x2e30>
				{
					Lcd_string(&lcd, " ");
 8003e3c:	f107 031c 	add.w	r3, r7, #28
 8003e40:	49a6      	ldr	r1, [pc, #664]	; (80040dc <main+0x3054>)
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc ff76 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "S");
 8003e48:	f107 031c 	add.w	r3, r7, #28
 8003e4c:	49a4      	ldr	r1, [pc, #656]	; (80040e0 <main+0x3058>)
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fc ff70 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "e");
 8003e54:	f107 031c 	add.w	r3, r7, #28
 8003e58:	49a2      	ldr	r1, [pc, #648]	; (80040e4 <main+0x305c>)
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fc ff6a 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "t");
 8003e60:	f107 031c 	add.w	r3, r7, #28
 8003e64:	49a0      	ldr	r1, [pc, #640]	; (80040e8 <main+0x3060>)
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fc ff64 	bl	8000d34 <Lcd_string>
					DAC_offset_output = offset_output_value[0]*1000 + offset_output_value[1]*100 + offset_output_value[2]*10 + offset_output_value[3];
 8003e6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e78:	fb03 f202 	mul.w	r2, r3, r2
 8003e7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e80:	785b      	ldrb	r3, [r3, #1]
 8003e82:	4619      	mov	r1, r3
 8003e84:	2364      	movs	r3, #100	; 0x64
 8003e86:	fb03 f301 	mul.w	r3, r3, r1
 8003e8a:	441a      	add	r2, r3
 8003e8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e90:	789b      	ldrb	r3, [r3, #2]
 8003e92:	4619      	mov	r1, r3
 8003e94:	460b      	mov	r3, r1
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003ea2:	78d2      	ldrb	r2, [r2, #3]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eae:	edc7 7aa9 	vstr	s15, [r7, #676]	; 0x2a4
					setOffset = 0;
 8003eb2:	4b86      	ldr	r3, [pc, #536]	; (80040cc <main+0x3044>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		if(cols == 2 && rows == 4)
 8003eb8:	4b8c      	ldr	r3, [pc, #560]	; (80040ec <main+0x3064>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	f040 8093 	bne.w	8003fe8 <main+0x2f60>
 8003ec2:	4b8b      	ldr	r3, [pc, #556]	; (80040f0 <main+0x3068>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	f040 808e 	bne.w	8003fe8 <main+0x2f60>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003ecc:	f107 031c 	add.w	r3, r7, #28
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fc ff4b 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Frequency");
 8003eda:	f107 031c 	add.w	r3, r7, #28
 8003ede:	4985      	ldr	r1, [pc, #532]	; (80040f4 <main+0x306c>)
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fc ff27 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003ee6:	f107 031c 	add.w	r3, r7, #28
 8003eea:	2200      	movs	r2, #0
 8003eec:	2101      	movs	r1, #1
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc ff3e 	bl	8000d70 <Lcd_cursor>

			Lcd_int(&lcd, (frequency_output_value[0]));
 8003ef4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f107 031c 	add.w	r3, r7, #28
 8003f00:	4611      	mov	r1, r2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fc fefe 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (frequency_output_value[1]));
 8003f08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f0c:	785b      	ldrb	r3, [r3, #1]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f107 031c 	add.w	r3, r7, #28
 8003f14:	4611      	mov	r1, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc fef4 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (frequency_output_value[2]));
 8003f1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f20:	789b      	ldrb	r3, [r3, #2]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f107 031c 	add.w	r3, r7, #28
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc feea 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (frequency_output_value[3]));
 8003f30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f34:	78db      	ldrb	r3, [r3, #3]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f107 031c 	add.w	r3, r7, #28
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc fee0 	bl	8000d04 <Lcd_int>


			Lcd_string(&lcd, "Hz");
 8003f44:	f107 031c 	add.w	r3, r7, #28
 8003f48:	496b      	ldr	r1, [pc, #428]	; (80040f8 <main+0x3070>)
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fc fef2 	bl	8000d34 <Lcd_string>
			if (frequencyflag == 1)
 8003f50:	4b6a      	ldr	r3, [pc, #424]	; (80040fc <main+0x3074>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d147      	bne.n	8003fe8 <main+0x2f60>
			{
				Lcd_string(&lcd, " ");
 8003f58:	f107 031c 	add.w	r3, r7, #28
 8003f5c:	495f      	ldr	r1, [pc, #380]	; (80040dc <main+0x3054>)
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fc fee8 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "S");
 8003f64:	f107 031c 	add.w	r3, r7, #28
 8003f68:	495d      	ldr	r1, [pc, #372]	; (80040e0 <main+0x3058>)
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fc fee2 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "e");
 8003f70:	f107 031c 	add.w	r3, r7, #28
 8003f74:	495b      	ldr	r1, [pc, #364]	; (80040e4 <main+0x305c>)
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc fedc 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "t");
 8003f7c:	f107 031c 	add.w	r3, r7, #28
 8003f80:	4959      	ldr	r1, [pc, #356]	; (80040e8 <main+0x3060>)
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fc fed6 	bl	8000d34 <Lcd_string>
				DAC_frequency_output = frequency_output_value[0]*1000 + frequency_output_value[1]*100 + frequency_output_value[2]*10 + frequency_output_value[3];
 8003f88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	0152      	lsls	r2, r2, #5
 8003f94:	1ad2      	subs	r2, r2, r3
 8003f96:	0092      	lsls	r2, r2, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fa2:	785b      	ldrb	r3, [r3, #1]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	0089      	lsls	r1, r1, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	4619      	mov	r1, r3
 8003fae:	0088      	lsls	r0, r1, #2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	440b      	add	r3, r1
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	4413      	add	r3, r2
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fc2:	789b      	ldrb	r3, [r3, #2]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	0089      	lsls	r1, r1, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fd8:	78db      	ldrb	r3, [r3, #3]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	f8a7 329a 	strh.w	r3, [r7, #666]	; 0x29a

				frequencyflag = 0;
 8003fe2:	4b46      	ldr	r3, [pc, #280]	; (80040fc <main+0x3074>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
			}

		}

		if (rows == 4 && cols == 3) { //duty cycle default
 8003fe8:	4b41      	ldr	r3, [pc, #260]	; (80040f0 <main+0x3068>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d11d      	bne.n	800402c <main+0x2fa4>
 8003ff0:	4b3e      	ldr	r3, [pc, #248]	; (80040ec <main+0x3064>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d119      	bne.n	800402c <main+0x2fa4>

			Lcd_cursor(&lcd, 0, 0);
 8003ff8:	f107 031c 	add.w	r3, r7, #28
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2100      	movs	r1, #0
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc feb5 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Duty Cycle");
 8004006:	f107 031c 	add.w	r3, r7, #28
 800400a:	493d      	ldr	r1, [pc, #244]	; (8004100 <main+0x3078>)
 800400c:	4618      	mov	r0, r3
 800400e:	f7fc fe91 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8004012:	f107 031c 	add.w	r3, r7, #28
 8004016:	2200      	movs	r2, #0
 8004018:	2101      	movs	r1, #1
 800401a:	4618      	mov	r0, r3
 800401c:	f7fc fea8 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "25%");
 8004020:	f107 031c 	add.w	r3, r7, #28
 8004024:	4937      	ldr	r1, [pc, #220]	; (8004104 <main+0x307c>)
 8004026:	4618      	mov	r0, r3
 8004028:	f7fc fe84 	bl	8000d34 <Lcd_string>



		//////////////////////////LEDS//////////////////////////

		if(rows==0 && cols==1) //D2
 800402c:	4b30      	ldr	r3, [pc, #192]	; (80040f0 <main+0x3068>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <main+0x2fc0>
 8004034:	4b2d      	ldr	r3, [pc, #180]	; (80040ec <main+0x3064>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d105      	bne.n	8004048 <main+0x2fc0>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800403c:	2200      	movs	r2, #0
 800403e:	2110      	movs	r1, #16
 8004040:	4831      	ldr	r0, [pc, #196]	; (8004108 <main+0x3080>)
 8004042:	f004 fceb 	bl	8008a1c <HAL_GPIO_WritePin>
 8004046:	e004      	b.n	8004052 <main+0x2fca>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8004048:	2201      	movs	r2, #1
 800404a:	2110      	movs	r1, #16
 800404c:	482e      	ldr	r0, [pc, #184]	; (8004108 <main+0x3080>)
 800404e:	f004 fce5 	bl	8008a1c <HAL_GPIO_WritePin>
		}

		if(rows==0 && cols==1) //D3
 8004052:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <main+0x3068>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <main+0x2fe8>
 800405a:	4b24      	ldr	r3, [pc, #144]	; (80040ec <main+0x3064>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d106      	bne.n	8004070 <main+0x2fe8>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8004062:	2201      	movs	r2, #1
 8004064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004068:	4827      	ldr	r0, [pc, #156]	; (8004108 <main+0x3080>)
 800406a:	f004 fcd7 	bl	8008a1c <HAL_GPIO_WritePin>
 800406e:	e005      	b.n	800407c <main+0x2ff4>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8004070:	2200      	movs	r2, #0
 8004072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004076:	4824      	ldr	r0, [pc, #144]	; (8004108 <main+0x3080>)
 8004078:	f004 fcd0 	bl	8008a1c <HAL_GPIO_WritePin>
		}

		if(currentflag) //D4
 800407c:	4b23      	ldr	r3, [pc, #140]	; (800410c <main+0x3084>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <main+0x3008>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8004084:	2201      	movs	r2, #1
 8004086:	2180      	movs	r1, #128	; 0x80
 8004088:	4821      	ldr	r0, [pc, #132]	; (8004110 <main+0x3088>)
 800408a:	f004 fcc7 	bl	8008a1c <HAL_GPIO_WritePin>
 800408e:	e004      	b.n	800409a <main+0x3012>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8004090:	2200      	movs	r2, #0
 8004092:	2180      	movs	r1, #128	; 0x80
 8004094:	481e      	ldr	r0, [pc, #120]	; (8004110 <main+0x3088>)
 8004096:	f004 fcc1 	bl	8008a1c <HAL_GPIO_WritePin>
		}

		if(output == 1) //D5
 800409a:	f897 32b3 	ldrb.w	r3, [r7, #691]	; 0x2b3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d106      	bne.n	80040b0 <main+0x3028>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80040a2:	2201      	movs	r2, #1
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040aa:	f004 fcb7 	bl	8008a1c <HAL_GPIO_WritePin>
 80040ae:	e005      	b.n	80040bc <main+0x3034>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80040b0:	2200      	movs	r2, #0
 80040b2:	2180      	movs	r1, #128	; 0x80
 80040b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040b8:	f004 fcb0 	bl	8008a1c <HAL_GPIO_WritePin>




		////////////////////   UART Processing    /////////////////////
		if(move){
 80040bc:	4b15      	ldr	r3, [pc, #84]	; (8004114 <main+0x308c>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d048      	beq.n	8004156 <main+0x30ce>
			for(i = 0; i < 21; i++){
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <main+0x3090>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e03d      	b.n	8004148 <main+0x30c0>
 80040cc:	200002b8 	.word	0x200002b8
 80040d0:	200000b1 	.word	0x200000b1
 80040d4:	0800e4e0 	.word	0x0800e4e0
 80040d8:	0800e53c 	.word	0x0800e53c
 80040dc:	0800e540 	.word	0x0800e540
 80040e0:	0800e544 	.word	0x0800e544
 80040e4:	0800e548 	.word	0x0800e548
 80040e8:	0800e54c 	.word	0x0800e54c
 80040ec:	200000ae 	.word	0x200000ae
 80040f0:	200000af 	.word	0x200000af
 80040f4:	0800e4e8 	.word	0x0800e4e8
 80040f8:	0800e490 	.word	0x0800e490
 80040fc:	20001595 	.word	0x20001595
 8004100:	0800e4f4 	.word	0x0800e4f4
 8004104:	0800e550 	.word	0x0800e550
 8004108:	48000400 	.word	0x48000400
 800410c:	200002ba 	.word	0x200002ba
 8004110:	48000800 	.word	0x48000800
 8004114:	2000030d 	.word	0x2000030d
 8004118:	2000030c 	.word	0x2000030c
				Tempdata[i] = Txdata[i];
 800411c:	4ba3      	ldr	r3, [pc, #652]	; (80043ac <main+0x3324>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	4619      	mov	r1, r3
 8004122:	4ba2      	ldr	r3, [pc, #648]	; (80043ac <main+0x3324>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	4ba1      	ldr	r3, [pc, #644]	; (80043b0 <main+0x3328>)
 800412a:	5c59      	ldrb	r1, [r3, r1]
 800412c:	4ba1      	ldr	r3, [pc, #644]	; (80043b4 <main+0x332c>)
 800412e:	5499      	strb	r1, [r3, r2]
				Txdata[i] = 0;
 8004130:	4b9e      	ldr	r3, [pc, #632]	; (80043ac <main+0x3324>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	4b9e      	ldr	r3, [pc, #632]	; (80043b0 <main+0x3328>)
 8004138:	2100      	movs	r1, #0
 800413a:	5499      	strb	r1, [r3, r2]
			for(i = 0; i < 21; i++){
 800413c:	4b9b      	ldr	r3, [pc, #620]	; (80043ac <main+0x3324>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	b2da      	uxtb	r2, r3
 8004144:	4b99      	ldr	r3, [pc, #612]	; (80043ac <main+0x3324>)
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	4b98      	ldr	r3, [pc, #608]	; (80043ac <main+0x3324>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b14      	cmp	r3, #20
 800414e:	d9e5      	bls.n	800411c <main+0x3094>
			}
			move = 0;
 8004150:	4b99      	ldr	r3, [pc, #612]	; (80043b8 <main+0x3330>)
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
		}


		if (flag==1) {
 8004156:	4b99      	ldr	r3, [pc, #612]	; (80043bc <main+0x3334>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	f040 84ae 	bne.w	8004abe <main+0x3a36>

			//if (signal_d == 1) {
			//	signal_p =0;
			//	signal_s = 0;
			//}
			if (Tempdata[2] == 35){
 8004162:	4b94      	ldr	r3, [pc, #592]	; (80043b4 <main+0x332c>)
 8004164:	789b      	ldrb	r3, [r3, #2]
 8004166:	2b23      	cmp	r3, #35	; 0x23
 8004168:	d13f      	bne.n	80041ea <main+0x3162>
				/// Display byte to screen
				if(Tempdata[4] == 49){
 800416a:	4b92      	ldr	r3, [pc, #584]	; (80043b4 <main+0x332c>)
 800416c:	791b      	ldrb	r3, [r3, #4]
 800416e:	2b31      	cmp	r3, #49	; 0x31
 8004170:	d124      	bne.n	80041bc <main+0x3134>
					if(write_to_lcd == 0){
 8004172:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 8004176:	2b00      	cmp	r3, #0
 8004178:	d104      	bne.n	8004184 <main+0x30fc>
						Lcd_clear(&lcd);
 800417a:	f107 031c 	add.w	r3, r7, #28
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc fe10 	bl	8000da4 <Lcd_clear>
					}
					uint8_t disp_sc;
					disp_sc = Tempdata[6];
 8004184:	4b8b      	ldr	r3, [pc, #556]	; (80043b4 <main+0x332c>)
 8004186:	799b      	ldrb	r3, [r3, #6]
 8004188:	f887 3279 	strb.w	r3, [r7, #633]	; 0x279
					//HAL_UART_Transmit(&huart2,disp_sc,1, 50);
					lcd_write_data(&lcd, disp_sc);
 800418c:	f897 2279 	ldrb.w	r2, [r7, #633]	; 0x279
 8004190:	f107 031c 	add.w	r3, r7, #28
 8004194:	4611      	mov	r1, r2
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc fe3e 	bl	8000e18 <lcd_write_data>
					write_to_lcd = 1;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
					menu_mode = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
					measurment_mode = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 32ca 	strb.w	r3, [r7, #714]	; 0x2ca
					output = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f887 32b3 	strb.w	r3, [r7, #691]	; 0x2b3
					com_to_lcd = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 80041ba:	e011      	b.n	80041e0 <main+0x3158>
				}
				else if(Tempdata[4] == 40){
 80041bc:	4b7d      	ldr	r3, [pc, #500]	; (80043b4 <main+0x332c>)
 80041be:	791b      	ldrb	r3, [r3, #4]
 80041c0:	2b28      	cmp	r3, #40	; 0x28
 80041c2:	d10d      	bne.n	80041e0 <main+0x3158>
					/// send command
					lcd_write_command(&lcd, Tempdata[6]);
 80041c4:	4b7b      	ldr	r3, [pc, #492]	; (80043b4 <main+0x332c>)
 80041c6:	799a      	ldrb	r2, [r3, #6]
 80041c8:	f107 031c 	add.w	r3, r7, #28
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc fdf4 	bl	8000dbc <lcd_write_command>

					write_to_lcd = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
					com_to_lcd = 1;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				}

				flag = 0;
 80041e0:	4b76      	ldr	r3, [pc, #472]	; (80043bc <main+0x3334>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	f000 bc6a 	b.w	8004abe <main+0x3a36>
			}
			else if(Tempdata[2] != 35 && write_to_lcd ==1){
 80041ea:	4b72      	ldr	r3, [pc, #456]	; (80043b4 <main+0x332c>)
 80041ec:	789b      	ldrb	r3, [r3, #2]
 80041ee:	2b23      	cmp	r3, #35	; 0x23
 80041f0:	d010      	beq.n	8004214 <main+0x318c>
 80041f2:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d10c      	bne.n	8004214 <main+0x318c>
				Lcd_clear(&lcd);
 80041fa:	f107 031c 	add.w	r3, r7, #28
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fc fdd0 	bl	8000da4 <Lcd_clear>
				write_to_lcd = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
				com_to_lcd = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 8004210:	f000 bc55 	b.w	8004abe <main+0x3a36>
			}



			else if(Tempdata[2] == 36){
 8004214:	4b67      	ldr	r3, [pc, #412]	; (80043b4 <main+0x332c>)
 8004216:	789b      	ldrb	r3, [r3, #2]
 8004218:	2b24      	cmp	r3, #36	; 0x24
 800421a:	d163      	bne.n	80042e4 <main+0x325c>
				// Measurement mode (DAC)

				if((Tempdata[4] == 68) && (Tempdata[5] == 86)){
 800421c:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <main+0x332c>)
 800421e:	791b      	ldrb	r3, [r3, #4]
 8004220:	2b44      	cmp	r3, #68	; 0x44
 8004222:	d11c      	bne.n	800425e <main+0x31d6>
 8004224:	4b63      	ldr	r3, [pc, #396]	; (80043b4 <main+0x332c>)
 8004226:	795b      	ldrb	r3, [r3, #5]
 8004228:	2b56      	cmp	r3, #86	; 0x56
 800422a:	d118      	bne.n	800425e <main+0x31d6>
					// DC - Voltage
					DC_measure = 1;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 32c9 	strb.w	r3, [r7, #713]	; 0x2c9
					measurment_mode = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 32ca 	strb.w	r3, [r7, #714]	; 0x2ca
					menu_mode = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
					parameter_o = 1;
 800423e:	f107 0365 	add.w	r3, r7, #101	; 0x65
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]
					signal_d = 1;
 8004246:	f107 0361 	add.w	r3, r7, #97	; 0x61
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
					flag = 0;
 800424e:	4b5b      	ldr	r3, [pc, #364]	; (80043bc <main+0x3334>)
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
					AC_measure = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
 800425a:	f000 bc30 	b.w	8004abe <main+0x3a36>
				}
				else if((Tempdata[4] == 65) && (Tempdata[5] == 86)){
 800425e:	4b55      	ldr	r3, [pc, #340]	; (80043b4 <main+0x332c>)
 8004260:	791b      	ldrb	r3, [r3, #4]
 8004262:	2b41      	cmp	r3, #65	; 0x41
 8004264:	d114      	bne.n	8004290 <main+0x3208>
 8004266:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <main+0x332c>)
 8004268:	795b      	ldrb	r3, [r3, #5]
 800426a:	2b56      	cmp	r3, #86	; 0x56
 800426c:	d110      	bne.n	8004290 <main+0x3208>
					//AC - Voltage
					AC_measure = 1;
 800426e:	2301      	movs	r3, #1
 8004270:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
					measurment_mode = 1;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 32ca 	strb.w	r3, [r7, #714]	; 0x2ca
					menu_mode = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
					DC_measure = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	f887 32c9 	strb.w	r3, [r7, #713]	; 0x2c9
					flag = 0;
 8004286:	4b4d      	ldr	r3, [pc, #308]	; (80043bc <main+0x3334>)
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	f000 bc17 	b.w	8004abe <main+0x3a36>
				}
				else if((Tempdata[4] == 68) && (Tempdata[5] == 73)){
 8004290:	4b48      	ldr	r3, [pc, #288]	; (80043b4 <main+0x332c>)
 8004292:	791b      	ldrb	r3, [r3, #4]
 8004294:	2b44      	cmp	r3, #68	; 0x44
 8004296:	d10e      	bne.n	80042b6 <main+0x322e>
 8004298:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <main+0x332c>)
 800429a:	795b      	ldrb	r3, [r3, #5]
 800429c:	2b49      	cmp	r3, #73	; 0x49
 800429e:	d10a      	bne.n	80042b6 <main+0x322e>
					currentflag = 1;
 80042a0:	4b47      	ldr	r3, [pc, #284]	; (80043c0 <main+0x3338>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	701a      	strb	r2, [r3, #0]
					DC_measure = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 32c9 	strb.w	r3, [r7, #713]	; 0x2c9
					AC_measure = 0;//DC - Current
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
 80042b2:	f000 bc04 	b.w	8004abe <main+0x3a36>

				}
				else if((Tempdata[4] == 65) && (Tempdata[5] == 73)){
 80042b6:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <main+0x332c>)
 80042b8:	791b      	ldrb	r3, [r3, #4]
 80042ba:	2b41      	cmp	r3, #65	; 0x41
 80042bc:	f040 83ff 	bne.w	8004abe <main+0x3a36>
 80042c0:	4b3c      	ldr	r3, [pc, #240]	; (80043b4 <main+0x332c>)
 80042c2:	795b      	ldrb	r3, [r3, #5]
 80042c4:	2b49      	cmp	r3, #73	; 0x49
 80042c6:	d109      	bne.n	80042dc <main+0x3254>
					currentflag = 1;
 80042c8:	4b3d      	ldr	r3, [pc, #244]	; (80043c0 <main+0x3338>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	701a      	strb	r2, [r3, #0]
					DC_measure = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	f887 32c9 	strb.w	r3, [r7, #713]	; 0x2c9
					AC_measure = 0;// AC - Current
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
 80042da:	e3f0      	b.n	8004abe <main+0x3a36>
				}
				else if((Tempdata[4] == 84) && (Tempdata[5] == 67)){
 80042dc:	4b35      	ldr	r3, [pc, #212]	; (80043b4 <main+0x332c>)
 80042de:	791b      	ldrb	r3, [r3, #4]
 80042e0:	2b54      	cmp	r3, #84	; 0x54
 80042e2:	e3ec      	b.n	8004abe <main+0x3a36>
					// Temperature
				}
			}
			else if(Tempdata[2] == 94){
 80042e4:	4b33      	ldr	r3, [pc, #204]	; (80043b4 <main+0x332c>)
 80042e6:	789b      	ldrb	r3, [r3, #2]
 80042e8:	2b5e      	cmp	r3, #94	; 0x5e
 80042ea:	f040 82a6 	bne.w	800483a <main+0x37b2>
				// set output parameter

				if(Tempdata[4] == 116){
 80042ee:	4b31      	ldr	r3, [pc, #196]	; (80043b4 <main+0x332c>)
 80042f0:	791b      	ldrb	r3, [r3, #4]
 80042f2:	2b74      	cmp	r3, #116	; 0x74
 80042f4:	d168      	bne.n	80043c8 <main+0x3340>
					//type

					if(Tempdata[6] == 100){
 80042f6:	4b2f      	ldr	r3, [pc, #188]	; (80043b4 <main+0x332c>)
 80042f8:	799b      	ldrb	r3, [r3, #6]
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d119      	bne.n	8004332 <main+0x32aa>
						// DC - Signal type
						signal_d = 1;
 80042fe:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
						signal_s = 0;
 8004306:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]
						signal_p = 0;
 800430e:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
						HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8004316:	2100      	movs	r1, #0
 8004318:	482a      	ldr	r0, [pc, #168]	; (80043c4 <main+0x333c>)
 800431a:	f003 fd4d 	bl	8007db8 <HAL_DAC_Stop_DMA>
						HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 800431e:	2100      	movs	r1, #0
 8004320:	4828      	ldr	r0, [pc, #160]	; (80043c4 <main+0x333c>)
 8004322:	f003 fd2e 	bl	8007d82 <HAL_DAC_Stop>
						Lcd_clear(&lcd);
 8004326:	f107 031c 	add.w	r3, r7, #28
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc fd3a 	bl	8000da4 <Lcd_clear>
 8004330:	e27f      	b.n	8004832 <main+0x37aa>
						//						output = 1;
					}
					else if(Tempdata[6] == 115){ //s
 8004332:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <main+0x332c>)
 8004334:	799b      	ldrb	r3, [r3, #6]
 8004336:	2b73      	cmp	r3, #115	; 0x73
 8004338:	d119      	bne.n	800436e <main+0x32e6>
						// Sinusoidal signal type
						signal_s = 1;
 800433a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
						signal_d = 0;
 8004342:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8004346:	2200      	movs	r2, #0
 8004348:	701a      	strb	r2, [r3, #0]
						signal_p = 0;
 800434a:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
						HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004352:	2100      	movs	r1, #0
 8004354:	481b      	ldr	r0, [pc, #108]	; (80043c4 <main+0x333c>)
 8004356:	f003 fd2f 	bl	8007db8 <HAL_DAC_Stop_DMA>
						HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 800435a:	2100      	movs	r1, #0
 800435c:	4819      	ldr	r0, [pc, #100]	; (80043c4 <main+0x333c>)
 800435e:	f003 fd10 	bl	8007d82 <HAL_DAC_Stop>
						Lcd_clear(&lcd);
 8004362:	f107 031c 	add.w	r3, r7, #28
 8004366:	4618      	mov	r0, r3
 8004368:	f7fc fd1c 	bl	8000da4 <Lcd_clear>
 800436c:	e261      	b.n	8004832 <main+0x37aa>

					}
					else if(Tempdata[6] == 112){
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <main+0x332c>)
 8004370:	799b      	ldrb	r3, [r3, #6]
 8004372:	2b70      	cmp	r3, #112	; 0x70
 8004374:	f040 825d 	bne.w	8004832 <main+0x37aa>
						// Pulse signal type
						signal_p = 1;
 8004378:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
						signal_d = 0;
 8004380:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
						signal_s = 0;
 8004388:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
						HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004390:	2100      	movs	r1, #0
 8004392:	480c      	ldr	r0, [pc, #48]	; (80043c4 <main+0x333c>)
 8004394:	f003 fd10 	bl	8007db8 <HAL_DAC_Stop_DMA>
						HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 8004398:	2100      	movs	r1, #0
 800439a:	480a      	ldr	r0, [pc, #40]	; (80043c4 <main+0x333c>)
 800439c:	f003 fcf1 	bl	8007d82 <HAL_DAC_Stop>
						//output = 1;
						Lcd_clear(&lcd);
 80043a0:	f107 031c 	add.w	r3, r7, #28
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fc fcfd 	bl	8000da4 <Lcd_clear>
 80043aa:	e242      	b.n	8004832 <main+0x37aa>
 80043ac:	2000030c 	.word	0x2000030c
 80043b0:	20000314 	.word	0x20000314
 80043b4:	2000055c 	.word	0x2000055c
 80043b8:	2000030d 	.word	0x2000030d
 80043bc:	200001a4 	.word	0x200001a4
 80043c0:	200002ba 	.word	0x200002ba
 80043c4:	200000c4 	.word	0x200000c4
					}

				}
				else if(Tempdata[4] == 97){
 80043c8:	4bb3      	ldr	r3, [pc, #716]	; (8004698 <main+0x3610>)
 80043ca:	791b      	ldrb	r3, [r3, #4]
 80043cc:	2b61      	cmp	r3, #97	; 0x61
 80043ce:	d154      	bne.n	800447a <main+0x33f2>
					// Amplitude
					amplitude_output_value[0] = Tempdata[6] - 48;
 80043d0:	4bb1      	ldr	r3, [pc, #708]	; (8004698 <main+0x3610>)
 80043d2:	799b      	ldrb	r3, [r3, #6]
 80043d4:	3b30      	subs	r3, #48	; 0x30
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043dc:	701a      	strb	r2, [r3, #0]
					amplitude_output_value[1] = Tempdata[7] - 48;
 80043de:	4bae      	ldr	r3, [pc, #696]	; (8004698 <main+0x3610>)
 80043e0:	79db      	ldrb	r3, [r3, #7]
 80043e2:	3b30      	subs	r3, #48	; 0x30
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043ea:	705a      	strb	r2, [r3, #1]
					amplitude_output_value[2] = Tempdata[8] - 48;
 80043ec:	4baa      	ldr	r3, [pc, #680]	; (8004698 <main+0x3610>)
 80043ee:	7a1b      	ldrb	r3, [r3, #8]
 80043f0:	3b30      	subs	r3, #48	; 0x30
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043f8:	709a      	strb	r2, [r3, #2]
					amplitude_output_value[3] = Tempdata[9] - 48;
 80043fa:	4ba7      	ldr	r3, [pc, #668]	; (8004698 <main+0x3610>)
 80043fc:	7a5b      	ldrb	r3, [r3, #9]
 80043fe:	3b30      	subs	r3, #48	; 0x30
 8004400:	b2da      	uxtb	r2, r3
 8004402:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004406:	70da      	strb	r2, [r3, #3]
					//DAC_amplitude_output = amplitude_output_value[0]*1 + amplitude_output_value[1]*0.1 + amplitude_output_value[2]*0.01 + amplitude_output_value[3]*0.001;
					DAC_amplitude_output = amplitude_output_value[0]*1000 + amplitude_output_value[1]*100 + amplitude_output_value[2]*10 + amplitude_output_value[3]*0.001;
 8004408:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004414:	fb03 f202 	mul.w	r2, r3, r2
 8004418:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800441c:	785b      	ldrb	r3, [r3, #1]
 800441e:	4619      	mov	r1, r3
 8004420:	2364      	movs	r3, #100	; 0x64
 8004422:	fb03 f301 	mul.w	r3, r3, r1
 8004426:	441a      	add	r2, r3
 8004428:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800442c:	789b      	ldrb	r3, [r3, #2]
 800442e:	4619      	mov	r1, r3
 8004430:	460b      	mov	r3, r1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	4413      	add	r3, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f7fc f87a 	bl	8000534 <__aeabi_i2d>
 8004440:	4604      	mov	r4, r0
 8004442:	460d      	mov	r5, r1
 8004444:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004448:	78db      	ldrb	r3, [r3, #3]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fc f872 	bl	8000534 <__aeabi_i2d>
 8004450:	a38d      	add	r3, pc, #564	; (adr r3, 8004688 <main+0x3600>)
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f7fc f8d7 	bl	8000608 <__aeabi_dmul>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4620      	mov	r0, r4
 8004460:	4629      	mov	r1, r5
 8004462:	f7fb ff1b 	bl	800029c <__adddf3>
 8004466:	4603      	mov	r3, r0
 8004468:	460c      	mov	r4, r1
 800446a:	4618      	mov	r0, r3
 800446c:	4621      	mov	r1, r4
 800446e:	f7fc fbad 	bl	8000bcc <__aeabi_d2f>
 8004472:	4603      	mov	r3, r0
 8004474:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8004478:	e1db      	b.n	8004832 <main+0x37aa>

				}
				else if(Tempdata[4] == 111){
 800447a:	4b87      	ldr	r3, [pc, #540]	; (8004698 <main+0x3610>)
 800447c:	791b      	ldrb	r3, [r3, #4]
 800447e:	2b6f      	cmp	r3, #111	; 0x6f
 8004480:	f040 808d 	bne.w	800459e <main+0x3516>
					//offset
					if(signal_d){
 8004484:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d03f      	beq.n	8004510 <main+0x3488>

						DC_offset_output_value[0] = Tempdata[6] - 48;
 8004490:	4b81      	ldr	r3, [pc, #516]	; (8004698 <main+0x3610>)
 8004492:	799b      	ldrb	r3, [r3, #6]
 8004494:	3b30      	subs	r3, #48	; 0x30
 8004496:	b2da      	uxtb	r2, r3
 8004498:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800449c:	701a      	strb	r2, [r3, #0]
						DC_offset_output_value[1] = Tempdata[7] - 48;
 800449e:	4b7e      	ldr	r3, [pc, #504]	; (8004698 <main+0x3610>)
 80044a0:	79db      	ldrb	r3, [r3, #7]
 80044a2:	3b30      	subs	r3, #48	; 0x30
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044aa:	705a      	strb	r2, [r3, #1]
						DC_offset_output_value[2] = Tempdata[8] - 48;
 80044ac:	4b7a      	ldr	r3, [pc, #488]	; (8004698 <main+0x3610>)
 80044ae:	7a1b      	ldrb	r3, [r3, #8]
 80044b0:	3b30      	subs	r3, #48	; 0x30
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044b8:	709a      	strb	r2, [r3, #2]
						DC_offset_output_value[3] = Tempdata[9] - 48;
 80044ba:	4b77      	ldr	r3, [pc, #476]	; (8004698 <main+0x3610>)
 80044bc:	7a5b      	ldrb	r3, [r3, #9]
 80044be:	3b30      	subs	r3, #48	; 0x30
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044c6:	70da      	strb	r2, [r3, #3]
						DAC_DC_offset = DC_offset_output_value[0]*1000 + DC_offset_output_value[1]*100 + DC_offset_output_value[2]*10 + DC_offset_output_value[3];
 80044c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044d4:	fb03 f202 	mul.w	r2, r3, r2
 80044d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	4619      	mov	r1, r3
 80044e0:	2364      	movs	r3, #100	; 0x64
 80044e2:	fb03 f301 	mul.w	r3, r3, r1
 80044e6:	441a      	add	r2, r3
 80044e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044ec:	789b      	ldrb	r3, [r3, #2]
 80044ee:	4619      	mov	r1, r3
 80044f0:	460b      	mov	r3, r1
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80044fe:	78d2      	ldrb	r2, [r2, #3]
 8004500:	4413      	add	r3, r2
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800450a:	edc7 7aa5 	vstr	s15, [r7, #660]	; 0x294
 800450e:	e190      	b.n	8004832 <main+0x37aa>
					}
					else if(signal_s){
 8004510:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 818a 	beq.w	8004832 <main+0x37aa>

						offset_output_value[0] = Tempdata[6] - 48;
 800451e:	4b5e      	ldr	r3, [pc, #376]	; (8004698 <main+0x3610>)
 8004520:	799b      	ldrb	r3, [r3, #6]
 8004522:	3b30      	subs	r3, #48	; 0x30
 8004524:	b2da      	uxtb	r2, r3
 8004526:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800452a:	701a      	strb	r2, [r3, #0]
						offset_output_value[1] = Tempdata[7] - 48;
 800452c:	4b5a      	ldr	r3, [pc, #360]	; (8004698 <main+0x3610>)
 800452e:	79db      	ldrb	r3, [r3, #7]
 8004530:	3b30      	subs	r3, #48	; 0x30
 8004532:	b2da      	uxtb	r2, r3
 8004534:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004538:	705a      	strb	r2, [r3, #1]
						offset_output_value[2] = Tempdata[8] - 48;
 800453a:	4b57      	ldr	r3, [pc, #348]	; (8004698 <main+0x3610>)
 800453c:	7a1b      	ldrb	r3, [r3, #8]
 800453e:	3b30      	subs	r3, #48	; 0x30
 8004540:	b2da      	uxtb	r2, r3
 8004542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004546:	709a      	strb	r2, [r3, #2]
						offset_output_value[3] = Tempdata[9] - 48;
 8004548:	4b53      	ldr	r3, [pc, #332]	; (8004698 <main+0x3610>)
 800454a:	7a5b      	ldrb	r3, [r3, #9]
 800454c:	3b30      	subs	r3, #48	; 0x30
 800454e:	b2da      	uxtb	r2, r3
 8004550:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004554:	70da      	strb	r2, [r3, #3]
						DAC_offset_output = offset_output_value[0]*1000 + offset_output_value[1]*100 + offset_output_value[2]*10 + offset_output_value[3];
 8004556:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004562:	fb03 f202 	mul.w	r2, r3, r2
 8004566:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800456a:	785b      	ldrb	r3, [r3, #1]
 800456c:	4619      	mov	r1, r3
 800456e:	2364      	movs	r3, #100	; 0x64
 8004570:	fb03 f301 	mul.w	r3, r3, r1
 8004574:	441a      	add	r2, r3
 8004576:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800457a:	789b      	ldrb	r3, [r3, #2]
 800457c:	4619      	mov	r1, r3
 800457e:	460b      	mov	r3, r1
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	4413      	add	r3, r2
 8004588:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800458c:	78d2      	ldrb	r2, [r2, #3]
 800458e:	4413      	add	r3, r2
 8004590:	ee07 3a90 	vmov	s15, r3
 8004594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004598:	edc7 7aa9 	vstr	s15, [r7, #676]	; 0x2a4
 800459c:	e149      	b.n	8004832 <main+0x37aa>
					}

				}
				else if(Tempdata[4] == 102){
 800459e:	4b3e      	ldr	r3, [pc, #248]	; (8004698 <main+0x3610>)
 80045a0:	791b      	ldrb	r3, [r3, #4]
 80045a2:	2b66      	cmp	r3, #102	; 0x66
 80045a4:	d17c      	bne.n	80046a0 <main+0x3618>
					// frequency
					frequency_output_value[0] = Tempdata[6] - 48;
 80045a6:	4b3c      	ldr	r3, [pc, #240]	; (8004698 <main+0x3610>)
 80045a8:	799b      	ldrb	r3, [r3, #6]
 80045aa:	3b30      	subs	r3, #48	; 0x30
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80045b2:	701a      	strb	r2, [r3, #0]
					frequency_output_value[1] = Tempdata[7] - 48;
 80045b4:	4b38      	ldr	r3, [pc, #224]	; (8004698 <main+0x3610>)
 80045b6:	79db      	ldrb	r3, [r3, #7]
 80045b8:	3b30      	subs	r3, #48	; 0x30
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80045c0:	705a      	strb	r2, [r3, #1]
					frequency_output_value[2] = Tempdata[8] - 48;
 80045c2:	4b35      	ldr	r3, [pc, #212]	; (8004698 <main+0x3610>)
 80045c4:	7a1b      	ldrb	r3, [r3, #8]
 80045c6:	3b30      	subs	r3, #48	; 0x30
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80045ce:	709a      	strb	r2, [r3, #2]
					frequency_output_value[3] = Tempdata[9] - 48;
 80045d0:	4b31      	ldr	r3, [pc, #196]	; (8004698 <main+0x3610>)
 80045d2:	7a5b      	ldrb	r3, [r3, #9]
 80045d4:	3b30      	subs	r3, #48	; 0x30
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80045dc:	70da      	strb	r2, [r3, #3]
					DAC_frequency_output = frequency_output_value[0]*1000 + frequency_output_value[1]*100 + frequency_output_value[2]*10 + frequency_output_value[3];
 80045de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	0152      	lsls	r2, r2, #5
 80045ea:	1ad2      	subs	r2, r2, r3
 80045ec:	0092      	lsls	r2, r2, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80045f8:	785b      	ldrb	r3, [r3, #1]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4619      	mov	r1, r3
 80045fe:	0089      	lsls	r1, r1, #2
 8004600:	440b      	add	r3, r1
 8004602:	4619      	mov	r1, r3
 8004604:	0088      	lsls	r0, r1, #2
 8004606:	4619      	mov	r1, r3
 8004608:	4603      	mov	r3, r0
 800460a:	440b      	add	r3, r1
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	b29b      	uxth	r3, r3
 8004610:	4413      	add	r3, r2
 8004612:	b29a      	uxth	r2, r3
 8004614:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004618:	789b      	ldrb	r3, [r3, #2]
 800461a:	b29b      	uxth	r3, r3
 800461c:	4619      	mov	r1, r3
 800461e:	0089      	lsls	r1, r1, #2
 8004620:	440b      	add	r3, r1
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	b29b      	uxth	r3, r3
 8004626:	4413      	add	r3, r2
 8004628:	b29a      	uxth	r2, r3
 800462a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800462e:	78db      	ldrb	r3, [r3, #3]
 8004630:	b29b      	uxth	r3, r3
 8004632:	4413      	add	r3, r2
 8004634:	f8a7 329a 	strh.w	r3, [r7, #666]	; 0x29a
					TIM2->ARR = (72e6/(DAC_frequency_output*1000)) - 1;
 8004638:	f8b7 329a 	ldrh.w	r3, [r7, #666]	; 0x29a
 800463c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004640:	fb02 f303 	mul.w	r3, r2, r3
 8004644:	4618      	mov	r0, r3
 8004646:	f7fb ff75 	bl	8000534 <__aeabi_i2d>
 800464a:	4603      	mov	r3, r0
 800464c:	460c      	mov	r4, r1
 800464e:	461a      	mov	r2, r3
 8004650:	4623      	mov	r3, r4
 8004652:	a10f      	add	r1, pc, #60	; (adr r1, 8004690 <main+0x3608>)
 8004654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004658:	f7fc f900 	bl	800085c <__aeabi_ddiv>
 800465c:	4603      	mov	r3, r0
 800465e:	460c      	mov	r4, r1
 8004660:	4618      	mov	r0, r3
 8004662:	4621      	mov	r1, r4
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <main+0x3614>)
 800466a:	f7fb fe15 	bl	8000298 <__aeabi_dsub>
 800466e:	4603      	mov	r3, r0
 8004670:	460c      	mov	r4, r1
 8004672:	461a      	mov	r2, r3
 8004674:	4623      	mov	r3, r4
 8004676:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	f7fc fa85 	bl	8000b8c <__aeabi_d2uiz>
 8004682:	4603      	mov	r3, r0
 8004684:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004686:	e0d4      	b.n	8004832 <main+0x37aa>
 8004688:	d2f1a9fc 	.word	0xd2f1a9fc
 800468c:	3f50624d 	.word	0x3f50624d
 8004690:	00000000 	.word	0x00000000
 8004694:	41912a88 	.word	0x41912a88
 8004698:	2000055c 	.word	0x2000055c
 800469c:	3ff00000 	.word	0x3ff00000
				}
				else if (signal_p){
 80046a0:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80c2 	beq.w	8004832 <main+0x37aa>
					if(Tempdata[4] == 100){	 //d
 80046ae:	4bac      	ldr	r3, [pc, #688]	; (8004960 <main+0x38d8>)
 80046b0:	791b      	ldrb	r3, [r3, #4]
 80046b2:	2b64      	cmp	r3, #100	; 0x64
 80046b4:	d13c      	bne.n	8004730 <main+0x36a8>
						//Duty Cycle
						DutyCycleinput[0] = Tempdata[6] - 48;
 80046b6:	4baa      	ldr	r3, [pc, #680]	; (8004960 <main+0x38d8>)
 80046b8:	799b      	ldrb	r3, [r3, #6]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b30      	subs	r3, #48	; 0x30
 80046be:	b29a      	uxth	r2, r3
 80046c0:	4ba8      	ldr	r3, [pc, #672]	; (8004964 <main+0x38dc>)
 80046c2:	801a      	strh	r2, [r3, #0]
						DutyCycleinput[1] = Tempdata[7] - 48;
 80046c4:	4ba6      	ldr	r3, [pc, #664]	; (8004960 <main+0x38d8>)
 80046c6:	79db      	ldrb	r3, [r3, #7]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b30      	subs	r3, #48	; 0x30
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	4ba5      	ldr	r3, [pc, #660]	; (8004964 <main+0x38dc>)
 80046d0:	805a      	strh	r2, [r3, #2]
						DutyCycleinput[2] = Tempdata[8] - 48;
 80046d2:	4ba3      	ldr	r3, [pc, #652]	; (8004960 <main+0x38d8>)
 80046d4:	7a1b      	ldrb	r3, [r3, #8]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b30      	subs	r3, #48	; 0x30
 80046da:	b29a      	uxth	r2, r3
 80046dc:	4ba1      	ldr	r3, [pc, #644]	; (8004964 <main+0x38dc>)
 80046de:	809a      	strh	r2, [r3, #4]
						DutyCycleinput[3] = Tempdata[9] - 48;
 80046e0:	4b9f      	ldr	r3, [pc, #636]	; (8004960 <main+0x38d8>)
 80046e2:	7a5b      	ldrb	r3, [r3, #9]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b30      	subs	r3, #48	; 0x30
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	4b9e      	ldr	r3, [pc, #632]	; (8004964 <main+0x38dc>)
 80046ec:	80da      	strh	r2, [r3, #6]
						DutyCycle = DutyCycleinput[0]*1000 + DutyCycleinput[1]*100 + DutyCycleinput[2]*10 + DutyCycleinput[3];
 80046ee:	4b9d      	ldr	r3, [pc, #628]	; (8004964 <main+0x38dc>)
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046f8:	fb03 f202 	mul.w	r2, r3, r2
 80046fc:	4b99      	ldr	r3, [pc, #612]	; (8004964 <main+0x38dc>)
 80046fe:	885b      	ldrh	r3, [r3, #2]
 8004700:	4619      	mov	r1, r3
 8004702:	2364      	movs	r3, #100	; 0x64
 8004704:	fb03 f301 	mul.w	r3, r3, r1
 8004708:	441a      	add	r2, r3
 800470a:	4b96      	ldr	r3, [pc, #600]	; (8004964 <main+0x38dc>)
 800470c:	889b      	ldrh	r3, [r3, #4]
 800470e:	4619      	mov	r1, r3
 8004710:	460b      	mov	r3, r1
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4413      	add	r3, r2
 800471a:	4a92      	ldr	r2, [pc, #584]	; (8004964 <main+0x38dc>)
 800471c:	88d2      	ldrh	r2, [r2, #6]
 800471e:	4413      	add	r3, r2
 8004720:	ee07 3a90 	vmov	s15, r3
 8004724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004728:	4b8f      	ldr	r3, [pc, #572]	; (8004968 <main+0x38e0>)
 800472a:	edc3 7a00 	vstr	s15, [r3]
 800472e:	e080      	b.n	8004832 <main+0x37aa>
					}
					else if (Tempdata[4] == 'a'){
 8004730:	4b8b      	ldr	r3, [pc, #556]	; (8004960 <main+0x38d8>)
 8004732:	791b      	ldrb	r3, [r3, #4]
 8004734:	2b61      	cmp	r3, #97	; 0x61
 8004736:	d13c      	bne.n	80047b2 <main+0x372a>
						//Amplitude_pulse
						Amplitude_pulseinput[0] = Tempdata[6] - 48;
 8004738:	4b89      	ldr	r3, [pc, #548]	; (8004960 <main+0x38d8>)
 800473a:	799b      	ldrb	r3, [r3, #6]
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b30      	subs	r3, #48	; 0x30
 8004740:	b29a      	uxth	r2, r3
 8004742:	4b8a      	ldr	r3, [pc, #552]	; (800496c <main+0x38e4>)
 8004744:	801a      	strh	r2, [r3, #0]
						Amplitude_pulseinput[1] = Tempdata[7] - 48;
 8004746:	4b86      	ldr	r3, [pc, #536]	; (8004960 <main+0x38d8>)
 8004748:	79db      	ldrb	r3, [r3, #7]
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b30      	subs	r3, #48	; 0x30
 800474e:	b29a      	uxth	r2, r3
 8004750:	4b86      	ldr	r3, [pc, #536]	; (800496c <main+0x38e4>)
 8004752:	805a      	strh	r2, [r3, #2]
						Amplitude_pulseinput[2] = Tempdata[8] - 48;
 8004754:	4b82      	ldr	r3, [pc, #520]	; (8004960 <main+0x38d8>)
 8004756:	7a1b      	ldrb	r3, [r3, #8]
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b30      	subs	r3, #48	; 0x30
 800475c:	b29a      	uxth	r2, r3
 800475e:	4b83      	ldr	r3, [pc, #524]	; (800496c <main+0x38e4>)
 8004760:	809a      	strh	r2, [r3, #4]
						Amplitude_pulseinput[3] = Tempdata[9] - 48;
 8004762:	4b7f      	ldr	r3, [pc, #508]	; (8004960 <main+0x38d8>)
 8004764:	7a5b      	ldrb	r3, [r3, #9]
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b30      	subs	r3, #48	; 0x30
 800476a:	b29a      	uxth	r2, r3
 800476c:	4b7f      	ldr	r3, [pc, #508]	; (800496c <main+0x38e4>)
 800476e:	80da      	strh	r2, [r3, #6]
						Amplitude_pulse = Amplitude_pulseinput[0]*1000 + Amplitude_pulseinput[1]*100 + Amplitude_pulseinput[2]*10 + Amplitude_pulseinput[3];
 8004770:	4b7e      	ldr	r3, [pc, #504]	; (800496c <main+0x38e4>)
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800477a:	fb03 f202 	mul.w	r2, r3, r2
 800477e:	4b7b      	ldr	r3, [pc, #492]	; (800496c <main+0x38e4>)
 8004780:	885b      	ldrh	r3, [r3, #2]
 8004782:	4619      	mov	r1, r3
 8004784:	2364      	movs	r3, #100	; 0x64
 8004786:	fb03 f301 	mul.w	r3, r3, r1
 800478a:	441a      	add	r2, r3
 800478c:	4b77      	ldr	r3, [pc, #476]	; (800496c <main+0x38e4>)
 800478e:	889b      	ldrh	r3, [r3, #4]
 8004790:	4619      	mov	r1, r3
 8004792:	460b      	mov	r3, r1
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	4413      	add	r3, r2
 800479c:	4a73      	ldr	r2, [pc, #460]	; (800496c <main+0x38e4>)
 800479e:	88d2      	ldrh	r2, [r2, #6]
 80047a0:	4413      	add	r3, r2
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047aa:	4b71      	ldr	r3, [pc, #452]	; (8004970 <main+0x38e8>)
 80047ac:	edc3 7a00 	vstr	s15, [r3]
 80047b0:	e03f      	b.n	8004832 <main+0x37aa>
					}
					else if (Tempdata[4] == 'o') {
 80047b2:	4b6b      	ldr	r3, [pc, #428]	; (8004960 <main+0x38d8>)
 80047b4:	791b      	ldrb	r3, [r3, #4]
 80047b6:	2b6f      	cmp	r3, #111	; 0x6f
 80047b8:	d13b      	bne.n	8004832 <main+0x37aa>
						//Offset_pulse
						Offset_pulseinput[0] = Tempdata[6] - 48;
 80047ba:	4b69      	ldr	r3, [pc, #420]	; (8004960 <main+0x38d8>)
 80047bc:	799b      	ldrb	r3, [r3, #6]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b30      	subs	r3, #48	; 0x30
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	4b6b      	ldr	r3, [pc, #428]	; (8004974 <main+0x38ec>)
 80047c6:	801a      	strh	r2, [r3, #0]
						Offset_pulseinput[1] = Tempdata[7] - 48;
 80047c8:	4b65      	ldr	r3, [pc, #404]	; (8004960 <main+0x38d8>)
 80047ca:	79db      	ldrb	r3, [r3, #7]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b30      	subs	r3, #48	; 0x30
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	4b68      	ldr	r3, [pc, #416]	; (8004974 <main+0x38ec>)
 80047d4:	805a      	strh	r2, [r3, #2]
						Offset_pulseinput[2] = Tempdata[8] - 48;
 80047d6:	4b62      	ldr	r3, [pc, #392]	; (8004960 <main+0x38d8>)
 80047d8:	7a1b      	ldrb	r3, [r3, #8]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b30      	subs	r3, #48	; 0x30
 80047de:	b29a      	uxth	r2, r3
 80047e0:	4b64      	ldr	r3, [pc, #400]	; (8004974 <main+0x38ec>)
 80047e2:	809a      	strh	r2, [r3, #4]
						Offset_pulseinput[3] = Tempdata[9] - 48;
 80047e4:	4b5e      	ldr	r3, [pc, #376]	; (8004960 <main+0x38d8>)
 80047e6:	7a5b      	ldrb	r3, [r3, #9]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b30      	subs	r3, #48	; 0x30
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	4b61      	ldr	r3, [pc, #388]	; (8004974 <main+0x38ec>)
 80047f0:	80da      	strh	r2, [r3, #6]
						Offset_pulse = Offset_pulseinput[0]*1000 + Offset_pulseinput[1]*100 + Offset_pulseinput[2]*10 + Offset_pulseinput[3];
 80047f2:	4b60      	ldr	r3, [pc, #384]	; (8004974 <main+0x38ec>)
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047fc:	fb03 f202 	mul.w	r2, r3, r2
 8004800:	4b5c      	ldr	r3, [pc, #368]	; (8004974 <main+0x38ec>)
 8004802:	885b      	ldrh	r3, [r3, #2]
 8004804:	4619      	mov	r1, r3
 8004806:	2364      	movs	r3, #100	; 0x64
 8004808:	fb03 f301 	mul.w	r3, r3, r1
 800480c:	441a      	add	r2, r3
 800480e:	4b59      	ldr	r3, [pc, #356]	; (8004974 <main+0x38ec>)
 8004810:	889b      	ldrh	r3, [r3, #4]
 8004812:	4619      	mov	r1, r3
 8004814:	460b      	mov	r3, r1
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	4a55      	ldr	r2, [pc, #340]	; (8004974 <main+0x38ec>)
 8004820:	88d2      	ldrh	r2, [r2, #6]
 8004822:	4413      	add	r3, r2
 8004824:	ee07 3a90 	vmov	s15, r3
 8004828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800482c:	4b52      	ldr	r3, [pc, #328]	; (8004978 <main+0x38f0>)
 800482e:	edc3 7a00 	vstr	s15, [r3]
				}
				else if(Tempdata[4] == 99){
					//Temperature

				}
				flag = 0;
 8004832:	4b52      	ldr	r3, [pc, #328]	; (800497c <main+0x38f4>)
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e141      	b.n	8004abe <main+0x3a36>
			}


			else if(Tempdata[2] == 42){
 800483a:	4b49      	ldr	r3, [pc, #292]	; (8004960 <main+0x38d8>)
 800483c:	789b      	ldrb	r3, [r3, #2]
 800483e:	2b2a      	cmp	r3, #42	; 0x2a
 8004840:	f040 813d 	bne.w	8004abe <main+0x3a36>
				if(Tempdata[4] == 115){
 8004844:	4b46      	ldr	r3, [pc, #280]	; (8004960 <main+0x38d8>)
 8004846:	791b      	ldrb	r3, [r3, #4]
 8004848:	2b73      	cmp	r3, #115	; 0x73
 800484a:	f040 809d 	bne.w	8004988 <main+0x3900>
					//request status
					send_status[0] = 64;
 800484e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004852:	2240      	movs	r2, #64	; 0x40
 8004854:	701a      	strb	r2, [r3, #0]
					send_status[1] = 44;
 8004856:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800485a:	222c      	movs	r2, #44	; 0x2c
 800485c:	705a      	strb	r2, [r3, #1]
					if(DC_measure){
 800485e:	f897 32c9 	ldrb.w	r3, [r7, #713]	; 0x2c9
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <main+0x37f8>

						send_status[2] = 68;
 8004866:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800486a:	2244      	movs	r2, #68	; 0x44
 800486c:	709a      	strb	r2, [r3, #2]
						send_status[3] = 86;
 800486e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004872:	2256      	movs	r2, #86	; 0x56
 8004874:	70da      	strb	r2, [r3, #3]
						send_status[4] = 44;
 8004876:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800487a:	222c      	movs	r2, #44	; 0x2c
 800487c:	711a      	strb	r2, [r3, #4]
 800487e:	e00f      	b.n	80048a0 <main+0x3818>
						//send_status[5] = 100;
					}
					else if(AC_measure){
 8004880:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <main+0x3818>
						send_status[2] = 65;
 8004888:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800488c:	2241      	movs	r2, #65	; 0x41
 800488e:	709a      	strb	r2, [r3, #2]
						send_status[3] = 86;
 8004890:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004894:	2256      	movs	r2, #86	; 0x56
 8004896:	70da      	strb	r2, [r3, #3]
						send_status[4] = 44;
 8004898:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800489c:	222c      	movs	r2, #44	; 0x2c
 800489e:	711a      	strb	r2, [r3, #4]
						//send_status[5] = 115;
					}
					if(signal_s){
 80048a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <main+0x382e>

						send_status[5] = 115;
 80048ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048b0:	2273      	movs	r2, #115	; 0x73
 80048b2:	715a      	strb	r2, [r3, #5]
 80048b4:	e009      	b.n	80048ca <main+0x3842>

					}
					else if(signal_d){
 80048b6:	f107 0361 	add.w	r3, r7, #97	; 0x61
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <main+0x3842>

						send_status[5] = 100;
 80048c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048c6:	2264      	movs	r2, #100	; 0x64
 80048c8:	715a      	strb	r2, [r3, #5]
					}

					send_status[6] = 44;
 80048ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048ce:	222c      	movs	r2, #44	; 0x2c
 80048d0:	719a      	strb	r2, [r3, #6]
					if(Tempdata[6] == 48){
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <main+0x38d8>)
 80048d4:	799b      	ldrb	r3, [r3, #6]
 80048d6:	2b30      	cmp	r3, #48	; 0x30
 80048d8:	d104      	bne.n	80048e4 <main+0x385c>
						send_status[7] = 48;
 80048da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048de:	2230      	movs	r2, #48	; 0x30
 80048e0:	71da      	strb	r2, [r3, #7]
 80048e2:	e007      	b.n	80048f4 <main+0x386c>
					}
					else if(Tempdata[6] == 49){
 80048e4:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <main+0x38d8>)
 80048e6:	799b      	ldrb	r3, [r3, #6]
 80048e8:	2b31      	cmp	r3, #49	; 0x31
 80048ea:	d103      	bne.n	80048f4 <main+0x386c>
						send_status[7] = 49;
 80048ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048f0:	2231      	movs	r2, #49	; 0x31
 80048f2:	71da      	strb	r2, [r3, #7]
					}

					send_status[8] = 44;
 80048f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048f8:	222c      	movs	r2, #44	; 0x2c
 80048fa:	721a      	strb	r2, [r3, #8]
					send_status[9] = 33;
 80048fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004900:	2221      	movs	r2, #33	; 0x21
 8004902:	725a      	strb	r2, [r3, #9]
					send_status[10] = 10;
 8004904:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004908:	220a      	movs	r2, #10
 800490a:	729a      	strb	r2, [r3, #10]

					HAL_UART_Transmit(&huart2, send_status, 11, 50);
 800490c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004910:	2332      	movs	r3, #50	; 0x32
 8004912:	220b      	movs	r2, #11
 8004914:	481a      	ldr	r0, [pc, #104]	; (8004980 <main+0x38f8>)
 8004916:	f006 ff0d 	bl	800b734 <HAL_UART_Transmit>

					if(Tempdata[6] == 48){
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <main+0x38d8>)
 800491c:	799b      	ldrb	r3, [r3, #6]
 800491e:	2b30      	cmp	r3, #48	; 0x30
 8004920:	d10a      	bne.n	8004938 <main+0x38b0>
						//output off
						output = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	f887 32b3 	strb.w	r3, [r7, #691]	; 0x2b3
						//stop AC DAC
						HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8004928:	2100      	movs	r1, #0
 800492a:	4816      	ldr	r0, [pc, #88]	; (8004984 <main+0x38fc>)
 800492c:	f003 fa44 	bl	8007db8 <HAL_DAC_Stop_DMA>
						// stop DC DAC
						HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
 8004930:	2100      	movs	r1, #0
 8004932:	4814      	ldr	r0, [pc, #80]	; (8004984 <main+0x38fc>)
 8004934:	f003 fa25 	bl	8007d82 <HAL_DAC_Stop>
					}
					if(Tempdata[6] == 49){
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <main+0x38d8>)
 800493a:	799b      	ldrb	r3, [r3, #6]
 800493c:	2b31      	cmp	r3, #49	; 0x31
 800493e:	f040 80bb 	bne.w	8004ab8 <main+0x3a30>
						// output on
						output = 1;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 32b3 	strb.w	r3, [r7, #691]	; 0x2b3
						Lcd_clear(&lcd);
 8004948:	f107 031c 	add.w	r3, r7, #28
 800494c:	4618      	mov	r0, r3
 800494e:	f7fc fa29 	bl	8000da4 <Lcd_clear>
						menu_mode = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
						measurment_mode =0;
 8004958:	2300      	movs	r3, #0
 800495a:	f887 32ca 	strb.w	r3, [r7, #714]	; 0x2ca
 800495e:	e0ab      	b.n	8004ab8 <main+0x3a30>
 8004960:	2000055c 	.word	0x2000055c
 8004964:	200000dc 	.word	0x200000dc
 8004968:	20000014 	.word	0x20000014
 800496c:	20001598 	.word	0x20001598
 8004970:	20000018 	.word	0x20000018
 8004974:	200001a8 	.word	0x200001a8
 8004978:	2000001c 	.word	0x2000001c
 800497c:	200001a4 	.word	0x200001a4
 8004980:	20001510 	.word	0x20001510
 8004984:	200000c4 	.word	0x200000c4
					}
				}
				else if(Tempdata[4] == 109){
 8004988:	4bcc      	ldr	r3, [pc, #816]	; (8004cbc <main+0x3c34>)
 800498a:	791b      	ldrb	r3, [r3, #4]
 800498c:	2b6d      	cmp	r3, #109	; 0x6d
 800498e:	f040 8093 	bne.w	8004ab8 <main+0x3a30>
					// request measurement

					send_measurment = 1;
 8004992:	4bcb      	ldr	r3, [pc, #812]	; (8004cc0 <main+0x3c38>)
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]


					if(Tempdata[6] == 116){
 8004998:	4bc8      	ldr	r3, [pc, #800]	; (8004cbc <main+0x3c34>)
 800499a:	799b      	ldrb	r3, [r3, #6]
 800499c:	2b74      	cmp	r3, #116	; 0x74
 800499e:	d118      	bne.n	80049d2 <main+0x394a>
						//type
						parameter_t = 1;
 80049a0:	f107 0367 	add.w	r3, r7, #103	; 0x67
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]
						parameter_a = 0;
 80049a8:	f107 0366 	add.w	r3, r7, #102	; 0x66
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 80049b0:	f107 0362 	add.w	r3, r7, #98	; 0x62
 80049b4:	2200      	movs	r2, #0
 80049b6:	701a      	strb	r2, [r3, #0]
						parameter_d = 0;
 80049b8:	f107 0363 	add.w	r3, r7, #99	; 0x63
 80049bc:	2200      	movs	r2, #0
 80049be:	701a      	strb	r2, [r3, #0]
						parameter_f = 0;
 80049c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
						parameter_o = 0;
 80049c8:	f107 0365 	add.w	r3, r7, #101	; 0x65
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	e072      	b.n	8004ab8 <main+0x3a30>

					}
					else if(Tempdata[6] == 97){
 80049d2:	4bba      	ldr	r3, [pc, #744]	; (8004cbc <main+0x3c34>)
 80049d4:	799b      	ldrb	r3, [r3, #6]
 80049d6:	2b61      	cmp	r3, #97	; 0x61
 80049d8:	d118      	bne.n	8004a0c <main+0x3984>
						// Amplitude
						parameter_a = 1;
 80049da:	f107 0366 	add.w	r3, r7, #102	; 0x66
 80049de:	2201      	movs	r2, #1
 80049e0:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 80049e2:	f107 0362 	add.w	r3, r7, #98	; 0x62
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
						parameter_d = 0;
 80049ea:	f107 0363 	add.w	r3, r7, #99	; 0x63
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
						parameter_f = 0;
 80049f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
						parameter_o = 0;
 80049fa:	f107 0365 	add.w	r3, r7, #101	; 0x65
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
						parameter_t = 0;
 8004a02:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	e055      	b.n	8004ab8 <main+0x3a30>
					}
					else if(Tempdata[6] == 111){
 8004a0c:	4bab      	ldr	r3, [pc, #684]	; (8004cbc <main+0x3c34>)
 8004a0e:	799b      	ldrb	r3, [r3, #6]
 8004a10:	2b6f      	cmp	r3, #111	; 0x6f
 8004a12:	d118      	bne.n	8004a46 <main+0x39be>
						//offset
						parameter_o = 1;
 8004a14:	f107 0365 	add.w	r3, r7, #101	; 0x65
 8004a18:	2201      	movs	r2, #1
 8004a1a:	701a      	strb	r2, [r3, #0]
						parameter_a = 0;
 8004a1c:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 8004a24:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
						parameter_d = 0;
 8004a2c:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
						parameter_f = 0;
 8004a34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004a38:	2200      	movs	r2, #0
 8004a3a:	701a      	strb	r2, [r3, #0]
						parameter_t = 0;
 8004a3c:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e038      	b.n	8004ab8 <main+0x3a30>
					}
					else if(Tempdata[6] == 102){
 8004a46:	4b9d      	ldr	r3, [pc, #628]	; (8004cbc <main+0x3c34>)
 8004a48:	799b      	ldrb	r3, [r3, #6]
 8004a4a:	2b66      	cmp	r3, #102	; 0x66
 8004a4c:	d118      	bne.n	8004a80 <main+0x39f8>
						// frequency
						parameter_f = 1;
 8004a4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]
						parameter_a = 0;
 8004a56:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 8004a5e:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
						parameter_d = 0;
 8004a66:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	701a      	strb	r2, [r3, #0]
						parameter_o = 0;
 8004a6e:	f107 0365 	add.w	r3, r7, #101	; 0x65
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
						parameter_t = 0;
 8004a76:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	e01b      	b.n	8004ab8 <main+0x3a30>
					}
					else if(Tempdata[6] == 100){
 8004a80:	4b8e      	ldr	r3, [pc, #568]	; (8004cbc <main+0x3c34>)
 8004a82:	799b      	ldrb	r3, [r3, #6]
 8004a84:	2b64      	cmp	r3, #100	; 0x64
 8004a86:	d117      	bne.n	8004ab8 <main+0x3a30>
						//Duty Cycle
						parameter_d = 1;
 8004a88:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	701a      	strb	r2, [r3, #0]
						parameter_a = 0;
 8004a90:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 8004a98:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
						parameter_f = 0;
 8004aa0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
						parameter_o = 0;
 8004aa8:	f107 0365 	add.w	r3, r7, #101	; 0x65
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
						parameter_t = 0;
 8004ab0:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	701a      	strb	r2, [r3, #0]
					//						parameter_f = 0;
					//						parameter_o = 0;
					//						parameter_t = 0;
					//					}
				}
				flag = 0;
 8004ab8:	4b82      	ldr	r3, [pc, #520]	; (8004cc4 <main+0x3c3c>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
			}

		}
		// Handles DC and AC measurements based on timer interrupt//////////////
		if(DC_measure && timer_interrupt && measurment_mode){
 8004abe:	f897 32c9 	ldrb.w	r3, [r7, #713]	; 0x2c9
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 80e1 	beq.w	8004c8a <main+0x3c02>
 8004ac8:	4b7f      	ldr	r3, [pc, #508]	; (8004cc8 <main+0x3c40>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80dc 	beq.w	8004c8a <main+0x3c02>
 8004ad2:	f897 32ca 	ldrb.w	r3, [r7, #714]	; 0x2ca
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 80d7 	beq.w	8004c8a <main+0x3c02>

			if(DCidx > 99){
 8004adc:	f897 32c8 	ldrb.w	r3, [r7, #712]	; 0x2c8
 8004ae0:	2b63      	cmp	r3, #99	; 0x63
 8004ae2:	f240 80a6 	bls.w	8004c32 <main+0x3baa>

				for(uint8_t c = 0; c<100;c++){
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
 8004aec:	e010      	b.n	8004b10 <main+0x3a88>
					DC_CS = DC_CS + DC_value[c];
 8004aee:	f897 228b 	ldrb.w	r2, [r7, #651]	; 0x28b
 8004af2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004af6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8004b00:	4413      	add	r3, r2
 8004b02:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
				for(uint8_t c = 0; c<100;c++){
 8004b06:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
 8004b10:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8004b14:	2b63      	cmp	r3, #99	; 0x63
 8004b16:	d9ea      	bls.n	8004aee <main+0x3a66>
				}

				DC_avg = DC_CS/100;
 8004b18:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8004b1c:	4a6b      	ldr	r2, [pc, #428]	; (8004ccc <main+0x3c44>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	f8a7 3276 	strh.w	r3, [r7, #630]	; 0x276

				DC_CS = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
				DCidx = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f887 32c8 	strb.w	r3, [r7, #712]	; 0x2c8


				scaled_dc_avg = (DC_avg*3300)/(3800);
 8004b34:	f8b7 3276 	ldrh.w	r3, [r7, #630]	; 0x276
 8004b38:	f640 42e4 	movw	r2, #3300	; 0xce4
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	4a63      	ldr	r2, [pc, #396]	; (8004cd0 <main+0x3c48>)
 8004b42:	fb82 1203 	smull	r1, r2, r2, r3
 8004b46:	1292      	asrs	r2, r2, #10
 8004b48:	17db      	asrs	r3, r3, #31
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f8a7 3274 	strh.w	r3, [r7, #628]	; 0x274


				//// ASSIGN values to uart array but dont send /////
				DCdisplayoffset[0] = 0x40;
 8004b50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b54:	2240      	movs	r2, #64	; 0x40
 8004b56:	701a      	strb	r2, [r3, #0]
				DCdisplayoffset[1] = 44;
 8004b58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b5c:	222c      	movs	r2, #44	; 0x2c
 8004b5e:	705a      	strb	r2, [r3, #1]
				DCdisplayoffset[2] = 109;
 8004b60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b64:	226d      	movs	r2, #109	; 0x6d
 8004b66:	709a      	strb	r2, [r3, #2]
				DCdisplayoffset[3] = 44;
 8004b68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b6c:	222c      	movs	r2, #44	; 0x2c
 8004b6e:	70da      	strb	r2, [r3, #3]
				DCdisplayoffset[4] = 111;//o
 8004b70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b74:	226f      	movs	r2, #111	; 0x6f
 8004b76:	711a      	strb	r2, [r3, #4]
				DCdisplayoffset[5] = 44;//,
 8004b78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b7c:	222c      	movs	r2, #44	; 0x2c
 8004b7e:	715a      	strb	r2, [r3, #5]
				DCdisplayoffset[6] = (scaled_dc_avg/1000) + 48;
 8004b80:	f8b7 3274 	ldrh.w	r3, [r7, #628]	; 0x274
 8004b84:	4a53      	ldr	r2, [pc, #332]	; (8004cd4 <main+0x3c4c>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	3330      	adds	r3, #48	; 0x30
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b98:	719a      	strb	r2, [r3, #6]
				DCdisplayoffset[7] = (scaled_dc_avg/100) % 10 + 48;
 8004b9a:	f8b7 3274 	ldrh.w	r3, [r7, #628]	; 0x274
 8004b9e:	4a4b      	ldr	r2, [pc, #300]	; (8004ccc <main+0x3c44>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	4b4b      	ldr	r3, [pc, #300]	; (8004cd8 <main+0x3c50>)
 8004baa:	fba3 1302 	umull	r1, r3, r3, r2
 8004bae:	08d9      	lsrs	r1, r3, #3
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	3330      	adds	r3, #48	; 0x30
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004bc6:	71da      	strb	r2, [r3, #7]
				DCdisplayoffset[8] = (scaled_dc_avg/10) % 10 + 48;
 8004bc8:	f8b7 3274 	ldrh.w	r3, [r7, #628]	; 0x274
 8004bcc:	4a42      	ldr	r2, [pc, #264]	; (8004cd8 <main+0x3c50>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	08db      	lsrs	r3, r3, #3
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	4b40      	ldr	r3, [pc, #256]	; (8004cd8 <main+0x3c50>)
 8004bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bdc:	08d9      	lsrs	r1, r3, #3
 8004bde:	460b      	mov	r3, r1
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	3330      	adds	r3, #48	; 0x30
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004bf4:	721a      	strb	r2, [r3, #8]
				DCdisplayoffset[9] = (scaled_dc_avg/1) % 10 + 48;
 8004bf6:	f8b7 2274 	ldrh.w	r2, [r7, #628]	; 0x274
 8004bfa:	4b37      	ldr	r3, [pc, #220]	; (8004cd8 <main+0x3c50>)
 8004bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004c00:	08d9      	lsrs	r1, r3, #3
 8004c02:	460b      	mov	r3, r1
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	3330      	adds	r3, #48	; 0x30
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c18:	725a      	strb	r2, [r3, #9]
				DCdisplayoffset[10] = 44;//,
 8004c1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c1e:	222c      	movs	r2, #44	; 0x2c
 8004c20:	729a      	strb	r2, [r3, #10]
				DCdisplayoffset[11] = 33;//!
 8004c22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c26:	2221      	movs	r2, #33	; 0x21
 8004c28:	72da      	strb	r2, [r3, #11]
				DCdisplayoffset[12] = 10;//\n
 8004c2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c2e:	220a      	movs	r2, #10
 8004c30:	731a      	strb	r2, [r3, #12]
				//				Lcd_int(&lcd, (DCdisplayoffset[9] - 48));
				//				Lcd_string(&lcd, "V");

			}

			if(send_measurment == 1){
 8004c32:	4b23      	ldr	r3, [pc, #140]	; (8004cc0 <main+0x3c38>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d109      	bne.n	8004c4e <main+0x3bc6>
				HAL_UART_Transmit(&huart2, DCdisplayoffset, 13, 50);
 8004c3a:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8004c3e:	2332      	movs	r3, #50	; 0x32
 8004c40:	220d      	movs	r2, #13
 8004c42:	4826      	ldr	r0, [pc, #152]	; (8004cdc <main+0x3c54>)
 8004c44:	f006 fd76 	bl	800b734 <HAL_UART_Transmit>
				send_measurment = 0;
 8004c48:	4b1d      	ldr	r3, [pc, #116]	; (8004cc0 <main+0x3c38>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]

			}
			HAL_ADC_Start(&hadc3);
 8004c4e:	4824      	ldr	r0, [pc, #144]	; (8004ce0 <main+0x3c58>)
 8004c50:	f001 fc78 	bl	8006544 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc3, 20);
 8004c54:	2114      	movs	r1, #20
 8004c56:	4822      	ldr	r0, [pc, #136]	; (8004ce0 <main+0x3c58>)
 8004c58:	f001 fdc0 	bl	80067dc <HAL_ADC_PollForConversion>
			DC_value[DCidx] = HAL_ADC_GetValue(&hadc3);
 8004c5c:	4820      	ldr	r0, [pc, #128]	; (8004ce0 <main+0x3c58>)
 8004c5e:	f001 febf 	bl	80069e0 <HAL_ADC_GetValue>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f897 22c8 	ldrb.w	r2, [r7, #712]	; 0x2c8
 8004c68:	b299      	uxth	r1, r3
 8004c6a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004c6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			HAL_ADC_Stop(&hadc3);
 8004c72:	481b      	ldr	r0, [pc, #108]	; (8004ce0 <main+0x3c58>)
 8004c74:	f001 fd7c 	bl	8006770 <HAL_ADC_Stop>
			DCidx ++ ;
 8004c78:	f897 32c8 	ldrb.w	r3, [r7, #712]	; 0x2c8
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f887 32c8 	strb.w	r3, [r7, #712]	; 0x2c8
			timer_interrupt = 0;
 8004c82:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <main+0x3c40>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	e2cd      	b.n	8005226 <main+0x419e>

		}

		else if(AC_measure && timer_interrupt && measurment_mode){
 8004c8a:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 82c9 	beq.w	8005226 <main+0x419e>
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <main+0x3c40>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 82c4 	beq.w	8005226 <main+0x419e>
 8004c9e:	f897 32ca 	ldrb.w	r3, [r7, #714]	; 0x2ca
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 82bf 	beq.w	8005226 <main+0x419e>

			if(ACidx > 99){
 8004ca8:	f8b7 32c4 	ldrh.w	r3, [r7, #708]	; 0x2c4
 8004cac:	2b63      	cmp	r3, #99	; 0x63
 8004cae:	f240 824f 	bls.w	8005150 <main+0x40c8>

				for(uint8_t c = 0; c<100;c++){
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8004cb8:	e025      	b.n	8004d06 <main+0x3c7e>
 8004cba:	bf00      	nop
 8004cbc:	2000055c 	.word	0x2000055c
 8004cc0:	20001660 	.word	0x20001660
 8004cc4:	200001a4 	.word	0x200001a4
 8004cc8:	20001665 	.word	0x20001665
 8004ccc:	51eb851f 	.word	0x51eb851f
 8004cd0:	44fc3a35 	.word	0x44fc3a35
 8004cd4:	10624dd3 	.word	0x10624dd3
 8004cd8:	cccccccd 	.word	0xcccccccd
 8004cdc:	20001510 	.word	0x20001510
 8004ce0:	200002bc 	.word	0x200002bc
					AC_CS = AC_CS + AC_value[c];
 8004ce4:	f897 228a 	ldrb.w	r2, [r7, #650]	; 0x28a
 8004ce8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004cec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
				for(uint8_t c = 0; c<100;c++){
 8004cfc:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 8004d00:	3301      	adds	r3, #1
 8004d02:	f887 328a 	strb.w	r3, [r7, #650]	; 0x28a
 8004d06:	f897 328a 	ldrb.w	r3, [r7, #650]	; 0x28a
 8004d0a:	2b63      	cmp	r3, #99	; 0x63
 8004d0c:	d9ea      	bls.n	8004ce4 <main+0x3c5c>
				}
				AC_avg = (AC_CS/100)*0.86;
 8004d0e:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8004d12:	4a43      	ldr	r2, [pc, #268]	; (8004e20 <main+0x3d98>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fb fbfa 	bl	8000514 <__aeabi_ui2d>
 8004d20:	a33b      	add	r3, pc, #236	; (adr r3, 8004e10 <main+0x3d88>)
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	f7fb fc6f 	bl	8000608 <__aeabi_dmul>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	4618      	mov	r0, r3
 8004d30:	4621      	mov	r1, r4
 8004d32:	f7fb ff2b 	bl	8000b8c <__aeabi_d2uiz>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
				AC_CS = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
				ACidx = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	f8a7 32c4 	strh.w	r3, [r7, #708]	; 0x2c4
				for( uint8_t q = 0; q < 99; q ++){
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
 8004d4e:	e01c      	b.n	8004d8a <main+0x3d02>
					if(AC_value[q+1] > AC_value[q]){
 8004d50:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d5a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004d5e:	f897 1289 	ldrb.w	r1, [r7, #649]	; 0x289
 8004d62:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d66:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d908      	bls.n	8004d80 <main+0x3cf8>
						AC_max = AC_value[q+1];
 8004d6e:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d78:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004d7c:	f8a7 32ba 	strh.w	r3, [r7, #698]	; 0x2ba
				for( uint8_t q = 0; q < 99; q ++){
 8004d80:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 8004d84:	3301      	adds	r3, #1
 8004d86:	f887 3289 	strb.w	r3, [r7, #649]	; 0x289
 8004d8a:	f897 3289 	ldrb.w	r3, [r7, #649]	; 0x289
 8004d8e:	2b62      	cmp	r3, #98	; 0x62
 8004d90:	d9de      	bls.n	8004d50 <main+0x3cc8>
					}
				}
				AC_pk_pk = 2*(AC_max - AC_avg) *0.53;
 8004d92:	f8b7 22ba 	ldrh.w	r2, [r7, #698]	; 0x2ba
 8004d96:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fb fbc8 	bl	8000534 <__aeabi_i2d>
 8004da4:	a31c      	add	r3, pc, #112	; (adr r3, 8004e18 <main+0x3d90>)
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f7fb fc2d 	bl	8000608 <__aeabi_dmul>
 8004dae:	4603      	mov	r3, r0
 8004db0:	460c      	mov	r4, r1
 8004db2:	4618      	mov	r0, r3
 8004db4:	4621      	mov	r1, r4
 8004db6:	f7fb fee9 	bl	8000b8c <__aeabi_d2uiz>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f8a7 3270 	strh.w	r3, [r7, #624]	; 0x270

				for(uint8_t s = 0; s < 99; s++){
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f887 3288 	strb.w	r3, [r7, #648]	; 0x288
 8004dc6:	e05f      	b.n	8004e88 <main+0x3e00>
					if ((AC_value[s+1] > AC_avg) && (AC_value[s] < AC_avg)){
 8004dc8:	f897 3288 	ldrb.w	r3, [r7, #648]	; 0x288
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004dd2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004dd6:	f8b7 2272 	ldrh.w	r2, [r7, #626]	; 0x272
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d24f      	bcs.n	8004e7e <main+0x3df6>
 8004dde:	f897 2288 	ldrb.w	r2, [r7, #648]	; 0x288
 8004de2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004de6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004dea:	f8b7 2272 	ldrh.w	r2, [r7, #626]	; 0x272
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d945      	bls.n	8004e7e <main+0x3df6>

						if(count == 0){
 8004df2:	f897 32b2 	ldrb.w	r3, [r7, #690]	; 0x2b2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d114      	bne.n	8004e24 <main+0x3d9c>
							f1 = s;
 8004dfa:	f897 3288 	ldrb.w	r3, [r7, #648]	; 0x288
 8004dfe:	f8a7 32b0 	strh.w	r3, [r7, #688]	; 0x2b0
							count = 1;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 32b2 	strb.w	r3, [r7, #690]	; 0x2b2
 8004e08:	e039      	b.n	8004e7e <main+0x3df6>
 8004e0a:	bf00      	nop
 8004e0c:	f3af 8000 	nop.w
 8004e10:	b851eb85 	.word	0xb851eb85
 8004e14:	3feb851e 	.word	0x3feb851e
 8004e18:	8f5c28f6 	.word	0x8f5c28f6
 8004e1c:	3fe0f5c2 	.word	0x3fe0f5c2
 8004e20:	51eb851f 	.word	0x51eb851f
						}
						else if (count == 1){
 8004e24:	f897 32b2 	ldrb.w	r3, [r7, #690]	; 0x2b2
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d128      	bne.n	8004e7e <main+0x3df6>
							f2 = s;
 8004e2c:	f897 3288 	ldrb.w	r3, [r7, #648]	; 0x288
 8004e30:	f8a7 3280 	strh.w	r3, [r7, #640]	; 0x280
							count = 2;
 8004e34:	2302      	movs	r3, #2
 8004e36:	f887 32b2 	strb.w	r3, [r7, #690]	; 0x2b2
							AC_freq = 1/((f2-f1)*0.0001);
 8004e3a:	f8b7 2280 	ldrh.w	r2, [r7, #640]	; 0x280
 8004e3e:	f8b7 32b0 	ldrh.w	r3, [r7, #688]	; 0x2b0
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb fb75 	bl	8000534 <__aeabi_i2d>
 8004e4a:	a3e1      	add	r3, pc, #900	; (adr r3, 80051d0 <main+0x4148>)
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f7fb fbda 	bl	8000608 <__aeabi_dmul>
 8004e54:	4603      	mov	r3, r0
 8004e56:	460c      	mov	r4, r1
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4623      	mov	r3, r4
 8004e5c:	f04f 0000 	mov.w	r0, #0
 8004e60:	49d5      	ldr	r1, [pc, #852]	; (80051b8 <main+0x4130>)
 8004e62:	f7fb fcfb 	bl	800085c <__aeabi_ddiv>
 8004e66:	4603      	mov	r3, r0
 8004e68:	460c      	mov	r4, r1
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	f7fb fe8d 	bl	8000b8c <__aeabi_d2uiz>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
							count = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 32b2 	strb.w	r3, [r7, #690]	; 0x2b2
				for(uint8_t s = 0; s < 99; s++){
 8004e7e:	f897 3288 	ldrb.w	r3, [r7, #648]	; 0x288
 8004e82:	3301      	adds	r3, #1
 8004e84:	f887 3288 	strb.w	r3, [r7, #648]	; 0x288
 8004e88:	f897 3288 	ldrb.w	r3, [r7, #648]	; 0x288
 8004e8c:	2b62      	cmp	r3, #98	; 0x62
 8004e8e:	d99b      	bls.n	8004dc8 <main+0x3d40>
				}
				////////Assign values to uart array but not sending them//////

				//// AMPLITUDE/////

				AC_disp_pk_pk[0] = 64;//@
 8004e90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e94:	2240      	movs	r2, #64	; 0x40
 8004e96:	701a      	strb	r2, [r3, #0]
				AC_disp_pk_pk[1] = 44;//,
 8004e98:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e9c:	222c      	movs	r2, #44	; 0x2c
 8004e9e:	705a      	strb	r2, [r3, #1]
				AC_disp_pk_pk[2] = 109;//m
 8004ea0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ea4:	226d      	movs	r2, #109	; 0x6d
 8004ea6:	709a      	strb	r2, [r3, #2]
				AC_disp_pk_pk[3] = 44;//,
 8004ea8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004eac:	222c      	movs	r2, #44	; 0x2c
 8004eae:	70da      	strb	r2, [r3, #3]
				AC_disp_pk_pk[4] = 97;//a
 8004eb0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004eb4:	2261      	movs	r2, #97	; 0x61
 8004eb6:	711a      	strb	r2, [r3, #4]
				AC_disp_pk_pk[5] = 44;//,
 8004eb8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ebc:	222c      	movs	r2, #44	; 0x2c
 8004ebe:	715a      	strb	r2, [r3, #5]
				AC_disp_pk_pk[6] = (AC_pk_pk/1000) + 48;
 8004ec0:	f8b7 3270 	ldrh.w	r3, [r7, #624]	; 0x270
 8004ec4:	4abd      	ldr	r2, [pc, #756]	; (80051bc <main+0x4134>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	099b      	lsrs	r3, r3, #6
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	3330      	adds	r3, #48	; 0x30
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ed8:	719a      	strb	r2, [r3, #6]
				AC_disp_pk_pk[7] = (AC_pk_pk/100) %10 + 48;
 8004eda:	f8b7 3270 	ldrh.w	r3, [r7, #624]	; 0x270
 8004ede:	4ab8      	ldr	r2, [pc, #736]	; (80051c0 <main+0x4138>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	4bb6      	ldr	r3, [pc, #728]	; (80051c4 <main+0x413c>)
 8004eea:	fba3 1302 	umull	r1, r3, r3, r2
 8004eee:	08d9      	lsrs	r1, r3, #3
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	3330      	adds	r3, #48	; 0x30
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004f06:	71da      	strb	r2, [r3, #7]
				AC_disp_pk_pk[8] = (AC_pk_pk/10) %10 + 48;
 8004f08:	f8b7 3270 	ldrh.w	r3, [r7, #624]	; 0x270
 8004f0c:	4aad      	ldr	r2, [pc, #692]	; (80051c4 <main+0x413c>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	08db      	lsrs	r3, r3, #3
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	4bab      	ldr	r3, [pc, #684]	; (80051c4 <main+0x413c>)
 8004f18:	fba3 1302 	umull	r1, r3, r3, r2
 8004f1c:	08d9      	lsrs	r1, r3, #3
 8004f1e:	460b      	mov	r3, r1
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	3330      	adds	r3, #48	; 0x30
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004f34:	721a      	strb	r2, [r3, #8]
				AC_disp_pk_pk[9] = (AC_pk_pk/1) %10 + 48;
 8004f36:	f8b7 2270 	ldrh.w	r2, [r7, #624]	; 0x270
 8004f3a:	4ba2      	ldr	r3, [pc, #648]	; (80051c4 <main+0x413c>)
 8004f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f40:	08d9      	lsrs	r1, r3, #3
 8004f42:	460b      	mov	r3, r1
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	3330      	adds	r3, #48	; 0x30
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004f58:	725a      	strb	r2, [r3, #9]
				AC_disp_pk_pk[10] = 44;//,
 8004f5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004f5e:	222c      	movs	r2, #44	; 0x2c
 8004f60:	729a      	strb	r2, [r3, #10]
				AC_disp_pk_pk[11] = 33;//!
 8004f62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004f66:	2221      	movs	r2, #33	; 0x21
 8004f68:	72da      	strb	r2, [r3, #11]
				AC_disp_pk_pk[12] = 10;//\n
 8004f6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004f6e:	220a      	movs	r2, #10
 8004f70:	731a      	strb	r2, [r3, #12]

				/////offset/////////////

				ACdisplayoffset[0] = 64;//@
 8004f72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f76:	2240      	movs	r2, #64	; 0x40
 8004f78:	701a      	strb	r2, [r3, #0]
				ACdisplayoffset[1] = 44;//,
 8004f7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f7e:	222c      	movs	r2, #44	; 0x2c
 8004f80:	705a      	strb	r2, [r3, #1]
				ACdisplayoffset[2] = 109;//m
 8004f82:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f86:	226d      	movs	r2, #109	; 0x6d
 8004f88:	709a      	strb	r2, [r3, #2]
				ACdisplayoffset[3] = 44;//,
 8004f8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f8e:	222c      	movs	r2, #44	; 0x2c
 8004f90:	70da      	strb	r2, [r3, #3]
				ACdisplayoffset[4] = 111;//o
 8004f92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f96:	226f      	movs	r2, #111	; 0x6f
 8004f98:	711a      	strb	r2, [r3, #4]
				ACdisplayoffset[5] = 44;//,
 8004f9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f9e:	222c      	movs	r2, #44	; 0x2c
 8004fa0:	715a      	strb	r2, [r3, #5]
				ACdisplayoffset[6] = (AC_avg/1000) %10 + 48;
 8004fa2:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 8004fa6:	4a85      	ldr	r2, [pc, #532]	; (80051bc <main+0x4134>)
 8004fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fac:	099b      	lsrs	r3, r3, #6
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	4b84      	ldr	r3, [pc, #528]	; (80051c4 <main+0x413c>)
 8004fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb6:	08d9      	lsrs	r1, r3, #3
 8004fb8:	460b      	mov	r3, r1
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	3330      	adds	r3, #48	; 0x30
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004fce:	719a      	strb	r2, [r3, #6]
				ACdisplayoffset[7] = (AC_avg/100) %10 + 48;
 8004fd0:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 8004fd4:	4a7a      	ldr	r2, [pc, #488]	; (80051c0 <main+0x4138>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	4b79      	ldr	r3, [pc, #484]	; (80051c4 <main+0x413c>)
 8004fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe4:	08d9      	lsrs	r1, r3, #3
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	3330      	adds	r3, #48	; 0x30
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004ffc:	71da      	strb	r2, [r3, #7]
				ACdisplayoffset[8] = (AC_avg/10) %10 + 48;
 8004ffe:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 8005002:	4a70      	ldr	r2, [pc, #448]	; (80051c4 <main+0x413c>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	08db      	lsrs	r3, r3, #3
 800500a:	b29a      	uxth	r2, r3
 800500c:	4b6d      	ldr	r3, [pc, #436]	; (80051c4 <main+0x413c>)
 800500e:	fba3 1302 	umull	r1, r3, r3, r2
 8005012:	08d9      	lsrs	r1, r3, #3
 8005014:	460b      	mov	r3, r1
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	b29b      	uxth	r3, r3
 8005020:	b2db      	uxtb	r3, r3
 8005022:	3330      	adds	r3, #48	; 0x30
 8005024:	b2da      	uxtb	r2, r3
 8005026:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800502a:	721a      	strb	r2, [r3, #8]
				ACdisplayoffset[9] = (AC_avg/1) %10 + 48;
 800502c:	f8b7 2272 	ldrh.w	r2, [r7, #626]	; 0x272
 8005030:	4b64      	ldr	r3, [pc, #400]	; (80051c4 <main+0x413c>)
 8005032:	fba3 1302 	umull	r1, r3, r3, r2
 8005036:	08d9      	lsrs	r1, r3, #3
 8005038:	460b      	mov	r3, r1
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	b29b      	uxth	r3, r3
 8005044:	b2db      	uxtb	r3, r3
 8005046:	3330      	adds	r3, #48	; 0x30
 8005048:	b2da      	uxtb	r2, r3
 800504a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800504e:	725a      	strb	r2, [r3, #9]
				ACdisplayoffset[10] = 44;//,
 8005050:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005054:	222c      	movs	r2, #44	; 0x2c
 8005056:	729a      	strb	r2, [r3, #10]
				ACdisplayoffset[11] = 33;//!
 8005058:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800505c:	2221      	movs	r2, #33	; 0x21
 800505e:	72da      	strb	r2, [r3, #11]
				ACdisplayoffset[12] = 10;//\n
 8005060:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005064:	220a      	movs	r2, #10
 8005066:	731a      	strb	r2, [r3, #12]



				////// FREQUENCY /////////

				AC_disp_frequency[0] = 64;//@
 8005068:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800506c:	2240      	movs	r2, #64	; 0x40
 800506e:	701a      	strb	r2, [r3, #0]
				AC_disp_frequency[1] = 44;//,
 8005070:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005074:	222c      	movs	r2, #44	; 0x2c
 8005076:	705a      	strb	r2, [r3, #1]
				AC_disp_frequency[2] = 109;//m
 8005078:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800507c:	226d      	movs	r2, #109	; 0x6d
 800507e:	709a      	strb	r2, [r3, #2]
				AC_disp_frequency[3] = 44;//,
 8005080:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005084:	222c      	movs	r2, #44	; 0x2c
 8005086:	70da      	strb	r2, [r3, #3]
				AC_disp_frequency[4] = 102;//f
 8005088:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800508c:	2266      	movs	r2, #102	; 0x66
 800508e:	711a      	strb	r2, [r3, #4]
				AC_disp_frequency[5] = 44;//,
 8005090:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005094:	222c      	movs	r2, #44	; 0x2c
 8005096:	715a      	strb	r2, [r3, #5]
				AC_disp_frequency[6] = (AC_freq/1000) %10 + 48;
 8005098:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800509c:	4a47      	ldr	r2, [pc, #284]	; (80051bc <main+0x4134>)
 800509e:	fba2 2303 	umull	r2, r3, r2, r3
 80050a2:	0999      	lsrs	r1, r3, #6
 80050a4:	4b47      	ldr	r3, [pc, #284]	; (80051c4 <main+0x413c>)
 80050a6:	fba3 2301 	umull	r2, r3, r3, r1
 80050aa:	08da      	lsrs	r2, r3, #3
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	1aca      	subs	r2, r1, r3
 80050b6:	b2d3      	uxtb	r3, r2
 80050b8:	3330      	adds	r3, #48	; 0x30
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050c0:	719a      	strb	r2, [r3, #6]
				AC_disp_frequency[7] = (AC_freq/100) %10 + 48;
 80050c2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80050c6:	4a3e      	ldr	r2, [pc, #248]	; (80051c0 <main+0x4138>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	0959      	lsrs	r1, r3, #5
 80050ce:	4b3d      	ldr	r3, [pc, #244]	; (80051c4 <main+0x413c>)
 80050d0:	fba3 2301 	umull	r2, r3, r3, r1
 80050d4:	08da      	lsrs	r2, r3, #3
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	1aca      	subs	r2, r1, r3
 80050e0:	b2d3      	uxtb	r3, r2
 80050e2:	3330      	adds	r3, #48	; 0x30
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050ea:	71da      	strb	r2, [r3, #7]
				AC_disp_frequency[8] = (AC_freq/10) %10 + 48;
 80050ec:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80050f0:	4a34      	ldr	r2, [pc, #208]	; (80051c4 <main+0x413c>)
 80050f2:	fba2 2303 	umull	r2, r3, r2, r3
 80050f6:	08d9      	lsrs	r1, r3, #3
 80050f8:	4b32      	ldr	r3, [pc, #200]	; (80051c4 <main+0x413c>)
 80050fa:	fba3 2301 	umull	r2, r3, r3, r1
 80050fe:	08da      	lsrs	r2, r3, #3
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	1aca      	subs	r2, r1, r3
 800510a:	b2d3      	uxtb	r3, r2
 800510c:	3330      	adds	r3, #48	; 0x30
 800510e:	b2da      	uxtb	r2, r3
 8005110:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005114:	721a      	strb	r2, [r3, #8]
				AC_disp_frequency[9] = (AC_freq/1) %10 + 48;
 8005116:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 800511a:	4b2a      	ldr	r3, [pc, #168]	; (80051c4 <main+0x413c>)
 800511c:	fba3 2301 	umull	r2, r3, r3, r1
 8005120:	08da      	lsrs	r2, r3, #3
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	1aca      	subs	r2, r1, r3
 800512c:	b2d3      	uxtb	r3, r2
 800512e:	3330      	adds	r3, #48	; 0x30
 8005130:	b2da      	uxtb	r2, r3
 8005132:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005136:	725a      	strb	r2, [r3, #9]
				AC_disp_frequency[10] = 44;//,
 8005138:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800513c:	222c      	movs	r2, #44	; 0x2c
 800513e:	729a      	strb	r2, [r3, #10]
				AC_disp_frequency[11] = 33;//!
 8005140:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005144:	2221      	movs	r2, #33	; 0x21
 8005146:	72da      	strb	r2, [r3, #11]
				AC_disp_frequency[12] = 10;//\n
 8005148:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800514c:	220a      	movs	r2, #10
 800514e:	731a      	strb	r2, [r3, #12]

				//////////////////////////////////////////////////////////

			}

			if(parameter_a){
 8005150:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00d      	beq.n	8005178 <main+0x40f0>


				if(send_measurment == 1){
 800515c:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <main+0x4140>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d109      	bne.n	8005178 <main+0x40f0>
					HAL_UART_Transmit(&huart2, AC_disp_pk_pk, 13, 50);
 8005164:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8005168:	2332      	movs	r3, #50	; 0x32
 800516a:	220d      	movs	r2, #13
 800516c:	4817      	ldr	r0, [pc, #92]	; (80051cc <main+0x4144>)
 800516e:	f006 fae1 	bl	800b734 <HAL_UART_Transmit>
					send_measurment = 0;
 8005172:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <main+0x4140>)
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
				}

			}
			if(parameter_o){
 8005178:	f107 0365 	add.w	r3, r7, #101	; 0x65
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00d      	beq.n	80051a0 <main+0x4118>


				if(send_measurment == 1){
 8005184:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <main+0x4140>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d109      	bne.n	80051a0 <main+0x4118>
					HAL_UART_Transmit(&huart2, ACdisplayoffset, 13, 50);
 800518c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8005190:	2332      	movs	r3, #50	; 0x32
 8005192:	220d      	movs	r2, #13
 8005194:	480d      	ldr	r0, [pc, #52]	; (80051cc <main+0x4144>)
 8005196:	f006 facd 	bl	800b734 <HAL_UART_Transmit>
					send_measurment = 0;
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <main+0x4140>)
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
				}

			}
			if(parameter_f){
 80051a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01f      	beq.n	80051ec <main+0x4164>


				if(send_measurment == 1){
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <main+0x4140>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d11b      	bne.n	80051ec <main+0x4164>
 80051b4:	e010      	b.n	80051d8 <main+0x4150>
 80051b6:	bf00      	nop
 80051b8:	3ff00000 	.word	0x3ff00000
 80051bc:	10624dd3 	.word	0x10624dd3
 80051c0:	51eb851f 	.word	0x51eb851f
 80051c4:	cccccccd 	.word	0xcccccccd
 80051c8:	20001660 	.word	0x20001660
 80051cc:	20001510 	.word	0x20001510
 80051d0:	eb1c432d 	.word	0xeb1c432d
 80051d4:	3f1a36e2 	.word	0x3f1a36e2
					HAL_UART_Transmit(&huart2, AC_disp_frequency, 13, 50);
 80051d8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80051dc:	2332      	movs	r3, #50	; 0x32
 80051de:	220d      	movs	r2, #13
 80051e0:	489f      	ldr	r0, [pc, #636]	; (8005460 <main+0x43d8>)
 80051e2:	f006 faa7 	bl	800b734 <HAL_UART_Transmit>
					send_measurment = 0;
 80051e6:	4b9f      	ldr	r3, [pc, #636]	; (8005464 <main+0x43dc>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	701a      	strb	r2, [r3, #0]
				}

			}

			HAL_ADC_Start(&hadc3);
 80051ec:	489e      	ldr	r0, [pc, #632]	; (8005468 <main+0x43e0>)
 80051ee:	f001 f9a9 	bl	8006544 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc3, 20);
 80051f2:	2114      	movs	r1, #20
 80051f4:	489c      	ldr	r0, [pc, #624]	; (8005468 <main+0x43e0>)
 80051f6:	f001 faf1 	bl	80067dc <HAL_ADC_PollForConversion>
			AC_value[ACidx] = HAL_ADC_GetValue(&hadc3);
 80051fa:	489b      	ldr	r0, [pc, #620]	; (8005468 <main+0x43e0>)
 80051fc:	f001 fbf0 	bl	80069e0 <HAL_ADC_GetValue>
 8005200:	4603      	mov	r3, r0
 8005202:	f8b7 22c4 	ldrh.w	r2, [r7, #708]	; 0x2c4
 8005206:	b299      	uxth	r1, r3
 8005208:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800520c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			HAL_ADC_Stop(&hadc3);
 8005210:	4895      	ldr	r0, [pc, #596]	; (8005468 <main+0x43e0>)
 8005212:	f001 faad 	bl	8006770 <HAL_ADC_Stop>
			ACidx++;
 8005216:	f8b7 32c4 	ldrh.w	r3, [r7, #708]	; 0x2c4
 800521a:	3301      	adds	r3, #1
 800521c:	f8a7 32c4 	strh.w	r3, [r7, #708]	; 0x2c4
			timer_interrupt = 0;
 8005220:	4b92      	ldr	r3, [pc, #584]	; (800546c <main+0x43e4>)
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
		}

		///////////////// OUTPUT MODE /////////////////////

		// DC output
		if(signal_d && output){
 8005226:	f107 0361 	add.w	r3, r7, #97	; 0x61
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d031      	beq.n	8005296 <main+0x420e>
 8005232:	f897 32b3 	ldrb.w	r3, [r7, #691]	; 0x2b3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d02d      	beq.n	8005296 <main+0x420e>

			HAL_TIM_Base_Start(&htim2);
 800523a:	488d      	ldr	r0, [pc, #564]	; (8005470 <main+0x43e8>)
 800523c:	f004 ffec 	bl	800a218 <HAL_TIM_Base_Start>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8005240:	2100      	movs	r1, #0
 8005242:	488c      	ldr	r0, [pc, #560]	; (8005474 <main+0x43ec>)
 8005244:	f002 fe4c 	bl	8007ee0 <HAL_DAC_Start>
			DAC_DC_val = (DAC_DC_offset/1000)*(4096)/3.3;
 8005248:	ed97 7aa5 	vldr	s14, [r7, #660]	; 0x294
 800524c:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8005478 <main+0x43f0>
 8005250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005254:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800547c <main+0x43f4>
 8005258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800525c:	ee17 0a90 	vmov	r0, s15
 8005260:	f7fb f97a 	bl	8000558 <__aeabi_f2d>
 8005264:	a378      	add	r3, pc, #480	; (adr r3, 8005448 <main+0x43c0>)
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	f7fb faf7 	bl	800085c <__aeabi_ddiv>
 800526e:	4603      	mov	r3, r0
 8005270:	460c      	mov	r4, r1
 8005272:	4618      	mov	r0, r3
 8005274:	4621      	mov	r1, r4
 8005276:	f7fb fca9 	bl	8000bcc <__aeabi_d2f>
 800527a:	4603      	mov	r3, r0
 800527c:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_DC_val);
 8005280:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8005284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005288:	ee17 3a90 	vmov	r3, s15
 800528c:	2200      	movs	r2, #0
 800528e:	2100      	movs	r1, #0
 8005290:	4878      	ldr	r0, [pc, #480]	; (8005474 <main+0x43ec>)
 8005292:	f002 fe00 	bl	8007e96 <HAL_DAC_SetValue>

		}

		//AC output

		if(signal_s && output){
 8005296:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d07d      	beq.n	800539e <main+0x4316>
 80052a2:	f897 32b3 	ldrb.w	r3, [r7, #691]	; 0x2b3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d079      	beq.n	800539e <main+0x4316>

			HAL_TIM_Base_Start(&htim2);
 80052aa:	4871      	ldr	r0, [pc, #452]	; (8005470 <main+0x43e8>)
 80052ac:	f004 ffb4 	bl	800a218 <HAL_TIM_Base_Start>
			//			HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
			//TIM2->ARR = (72e6/(DAC_frequency_output*1000)) - 1;
			for (int i=0;i<1000;i++)
 80052b0:	2300      	movs	r3, #0
 80052b2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80052b6:	e05e      	b.n	8005376 <main+0x42ee>
			{
				//sine_val_DAC[i] = DAC_offset_output+(((sin(i*2*PI/1000) + 1)* DAC_amplitude_output/3.3 *(4096/2)));
				//				sine_val_DAC[i] = (DAC_offset_output*4096/3.3)+((sin(i*2*PI/1000))*((DAC_amplitude_output/2)*4096/3.3));
				sine_val_DAC[i] = (DAC_offset_output*4096/3300)+((sin(i*2*PI/1000))*((DAC_amplitude_output/2)*4096/3300));
 80052b8:	edd7 7aa9 	vldr	s15, [r7, #676]	; 0x2a4
 80052bc:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800547c <main+0x43f4>
 80052c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052c4:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8005480 <main+0x43f8>
 80052c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80052cc:	ee16 0a90 	vmov	r0, s13
 80052d0:	f7fb f942 	bl	8000558 <__aeabi_f2d>
 80052d4:	4604      	mov	r4, r0
 80052d6:	460d      	mov	r5, r1
 80052d8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fb f928 	bl	8000534 <__aeabi_i2d>
 80052e4:	a35a      	add	r3, pc, #360	; (adr r3, 8005450 <main+0x43c8>)
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	f7fb f98d 	bl	8000608 <__aeabi_dmul>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4610      	mov	r0, r2
 80052f4:	4619      	mov	r1, r3
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	4b62      	ldr	r3, [pc, #392]	; (8005484 <main+0x43fc>)
 80052fc:	f7fb faae 	bl	800085c <__aeabi_ddiv>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	ec43 2b17 	vmov	d7, r2, r3
 8005308:	eeb0 0a47 	vmov.f32	s0, s14
 800530c:	eef0 0a67 	vmov.f32	s1, s15
 8005310:	f008 f866 	bl	800d3e0 <sin>
 8005314:	ec59 8b10 	vmov	r8, r9, d0
 8005318:	ed97 7aab 	vldr	s14, [r7, #684]	; 0x2ac
 800531c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005324:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800547c <main+0x43f4>
 8005328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800532c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8005480 <main+0x43f8>
 8005330:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005334:	ee16 0a90 	vmov	r0, s13
 8005338:	f7fb f90e 	bl	8000558 <__aeabi_f2d>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4640      	mov	r0, r8
 8005342:	4649      	mov	r1, r9
 8005344:	f7fb f960 	bl	8000608 <__aeabi_dmul>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4620      	mov	r0, r4
 800534e:	4629      	mov	r1, r5
 8005350:	f7fa ffa4 	bl	800029c <__adddf3>
 8005354:	4603      	mov	r3, r0
 8005356:	460c      	mov	r4, r1
 8005358:	4618      	mov	r0, r3
 800535a:	4621      	mov	r1, r4
 800535c:	f7fb fc16 	bl	8000b8c <__aeabi_d2uiz>
 8005360:	4601      	mov	r1, r0
 8005362:	4a49      	ldr	r2, [pc, #292]	; (8005488 <main+0x4400>)
 8005364:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8005368:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i=0;i<1000;i++)
 800536c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8005370:	3301      	adds	r3, #1
 8005372:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8005376:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800537a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800537e:	db9b      	blt.n	80052b8 <main+0x4230>
			}
			//			get_sineval(DAC_amplitude_output,DAC_offset_output);
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_val_DAC, 1000, DAC_ALIGN_12B_R);
 8005380:	2300      	movs	r3, #0
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005388:	4a3f      	ldr	r2, [pc, #252]	; (8005488 <main+0x4400>)
 800538a:	2100      	movs	r1, #0
 800538c:	4839      	ldr	r0, [pc, #228]	; (8005474 <main+0x43ec>)
 800538e:	f002 fdf3 	bl	8007f78 <HAL_DAC_Start_DMA>
			LCD_scroll_count++;
 8005392:	f8b7 328c 	ldrh.w	r3, [r7, #652]	; 0x28c
 8005396:	3301      	adds	r3, #1
 8005398:	f8a7 328c 	strh.w	r3, [r7, #652]	; 0x28c
 800539c:	e052      	b.n	8005444 <main+0x43bc>


			//////////////////////////////////////////////////////////

		}
		else if (signal_p && output) {
 800539e:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f43b af99 	beq.w	80012de <main+0x256>
 80053ac:	f897 32b3 	ldrb.w	r3, [r7, #691]	; 0x2b3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f43b af94 	beq.w	80012de <main+0x256>

			HAL_TIM_Base_Start(&htim2);
 80053b6:	482e      	ldr	r0, [pc, #184]	; (8005470 <main+0x43e8>)
 80053b8:	f004 ff2e 	bl	800a218 <HAL_TIM_Base_Start>
			//			TIM2-> EGR = ((TIM2->EGR)|0b01);
			TIM2->ARR = (72e6/(DAC_frequency_output*100)) - 1;
 80053bc:	f8b7 329a 	ldrh.w	r3, [r7, #666]	; 0x29a
 80053c0:	2264      	movs	r2, #100	; 0x64
 80053c2:	fb02 f303 	mul.w	r3, r2, r3
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fb f8b4 	bl	8000534 <__aeabi_i2d>
 80053cc:	4603      	mov	r3, r0
 80053ce:	460c      	mov	r4, r1
 80053d0:	461a      	mov	r2, r3
 80053d2:	4623      	mov	r3, r4
 80053d4:	a120      	add	r1, pc, #128	; (adr r1, 8005458 <main+0x43d0>)
 80053d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053da:	f7fb fa3f 	bl	800085c <__aeabi_ddiv>
 80053de:	4603      	mov	r3, r0
 80053e0:	460c      	mov	r4, r1
 80053e2:	4618      	mov	r0, r3
 80053e4:	4621      	mov	r1, r4
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	4b28      	ldr	r3, [pc, #160]	; (800548c <main+0x4404>)
 80053ec:	f7fa ff54 	bl	8000298 <__aeabi_dsub>
 80053f0:	4603      	mov	r3, r0
 80053f2:	460c      	mov	r4, r1
 80053f4:	461a      	mov	r2, r3
 80053f6:	4623      	mov	r3, r4
 80053f8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80053fc:	4610      	mov	r0, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	f7fb fbc4 	bl	8000b8c <__aeabi_d2uiz>
 8005404:	4603      	mov	r3, r0
 8005406:	62e3      	str	r3, [r4, #44]	; 0x2c
			//HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
			//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
			get_Pulse_array(DutyCycle, Amplitude_pulse, Offset_pulse);
 8005408:	4b21      	ldr	r3, [pc, #132]	; (8005490 <main+0x4408>)
 800540a:	edd3 7a00 	vldr	s15, [r3]
 800540e:	4b21      	ldr	r3, [pc, #132]	; (8005494 <main+0x440c>)
 8005410:	ed93 7a00 	vldr	s14, [r3]
 8005414:	4b20      	ldr	r3, [pc, #128]	; (8005498 <main+0x4410>)
 8005416:	edd3 6a00 	vldr	s13, [r3]
 800541a:	eeb0 1a66 	vmov.f32	s2, s13
 800541e:	eef0 0a47 	vmov.f32	s1, s14
 8005422:	eeb0 0a67 	vmov.f32	s0, s15
 8005426:	f7fb fda7 	bl	8000f78 <get_Pulse_array>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, Pulse_array, 100, DAC_ALIGN_12B_R);
 800542a:	2300      	movs	r3, #0
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	2364      	movs	r3, #100	; 0x64
 8005430:	4a1a      	ldr	r2, [pc, #104]	; (800549c <main+0x4414>)
 8005432:	2100      	movs	r1, #0
 8005434:	480f      	ldr	r0, [pc, #60]	; (8005474 <main+0x43ec>)
 8005436:	f002 fd9f 	bl	8007f78 <HAL_DAC_Start_DMA>
			LCD_scroll_count++;
 800543a:	f8b7 328c 	ldrh.w	r3, [r7, #652]	; 0x28c
 800543e:	3301      	adds	r3, #1
 8005440:	f8a7 328c 	strh.w	r3, [r7, #652]	; 0x28c
		pinstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8005444:	f7fb bf4b 	b.w	80012de <main+0x256>
 8005448:	66666666 	.word	0x66666666
 800544c:	400a6666 	.word	0x400a6666
 8005450:	4d12d84a 	.word	0x4d12d84a
 8005454:	400921fb 	.word	0x400921fb
 8005458:	00000000 	.word	0x00000000
 800545c:	41912a88 	.word	0x41912a88
 8005460:	20001510 	.word	0x20001510
 8005464:	20001660 	.word	0x20001660
 8005468:	200002bc 	.word	0x200002bc
 800546c:	20001665 	.word	0x20001665
 8005470:	20000510 	.word	0x20000510
 8005474:	200000c4 	.word	0x200000c4
 8005478:	447a0000 	.word	0x447a0000
 800547c:	45800000 	.word	0x45800000
 8005480:	454e4000 	.word	0x454e4000
 8005484:	408f4000 	.word	0x408f4000
 8005488:	20000570 	.word	0x20000570
 800548c:	3ff00000 	.word	0x3ff00000
 8005490:	20000014 	.word	0x20000014
 8005494:	20000018 	.word	0x20000018
 8005498:	2000001c 	.word	0x2000001c
 800549c:	20000328 	.word	0x20000328

080054a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b0a6      	sub	sp, #152	; 0x98
 80054a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80054aa:	2228      	movs	r2, #40	; 0x28
 80054ac:	2100      	movs	r1, #0
 80054ae:	4618      	mov	r0, r3
 80054b0:	f007 fb86 	bl	800cbc0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	605a      	str	r2, [r3, #4]
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054c4:	1d3b      	adds	r3, r7, #4
 80054c6:	2258      	movs	r2, #88	; 0x58
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f007 fb78 	bl	800cbc0 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80054d0:	2302      	movs	r3, #2
 80054d2:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80054d4:	2301      	movs	r3, #1
 80054d6:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80054d8:	2310      	movs	r3, #16
 80054da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054de:	2302      	movs	r3, #2
 80054e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80054e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80054ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80054f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80054f4:	2300      	movs	r3, #0
 80054f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80054fe:	4618      	mov	r0, r3
 8005500:	f003 fac8 	bl	8008a94 <HAL_RCC_OscConfig>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <SystemClock_Config+0x6e>
	{
		Error_Handler();
 800550a:	f000 fb05 	bl	8005b18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800550e:	230f      	movs	r3, #15
 8005510:	65fb      	str	r3, [r7, #92]	; 0x5c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005512:	2302      	movs	r3, #2
 8005514:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005516:	2300      	movs	r3, #0
 8005518:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800551a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800551e:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005520:	2300      	movs	r3, #0
 8005522:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005524:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005528:	2102      	movs	r1, #2
 800552a:	4618      	mov	r0, r3
 800552c:	f004 f9c8 	bl	80098c0 <HAL_RCC_ClockConfig>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8005536:	f000 faef 	bl	8005b18 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 800553a:	4b0c      	ldr	r3, [pc, #48]	; (800556c <SystemClock_Config+0xcc>)
 800553c:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM2;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800553e:	2300      	movs	r3, #0
 8005540:	613b      	str	r3, [r7, #16]
	PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8005542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005546:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8005548:	2300      	movs	r3, #0
 800554a:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800554c:	2300      	movs	r3, #0
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005550:	1d3b      	adds	r3, r7, #4
 8005552:	4618      	mov	r0, r3
 8005554:	f004 fbea 	bl	8009d2c <HAL_RCCEx_PeriphCLKConfig>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800555e:	f000 fadb 	bl	8005b18 <Error_Handler>
	}
}
 8005562:	bf00      	nop
 8005564:	3798      	adds	r7, #152	; 0x98
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	00101102 	.word	0x00101102

08005570 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	; 0x28
 8005574:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8005576:	f107 031c 	add.w	r3, r7, #28
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	605a      	str	r2, [r3, #4]
 8005580:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8005582:	1d3b      	adds	r3, r7, #4
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	605a      	str	r2, [r3, #4]
 800558a:	609a      	str	r2, [r3, #8]
 800558c:	60da      	str	r2, [r3, #12]
 800558e:	611a      	str	r2, [r3, #16]
 8005590:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Common config
	 */
	hadc3.Instance = ADC3;
 8005592:	4b2d      	ldr	r3, [pc, #180]	; (8005648 <MX_ADC3_Init+0xd8>)
 8005594:	4a2d      	ldr	r2, [pc, #180]	; (800564c <MX_ADC3_Init+0xdc>)
 8005596:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005598:	4b2b      	ldr	r3, [pc, #172]	; (8005648 <MX_ADC3_Init+0xd8>)
 800559a:	2200      	movs	r2, #0
 800559c:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800559e:	4b2a      	ldr	r3, [pc, #168]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80055a4:	4b28      	ldr	r3, [pc, #160]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 80055aa:	4b27      	ldr	r3, [pc, #156]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	765a      	strb	r2, [r3, #25]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80055b0:	4b25      	ldr	r3, [pc, #148]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80055b8:	4b23      	ldr	r3, [pc, #140]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80055be:	4b22      	ldr	r3, [pc, #136]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80055c4:	4b20      	ldr	r3, [pc, #128]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80055ca:	4b1f      	ldr	r3, [pc, #124]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80055d0:	4b1d      	ldr	r3, [pc, #116]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80055d8:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055da:	2204      	movs	r2, #4
 80055dc:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 80055de:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	761a      	strb	r2, [r3, #24]
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80055e4:	4b18      	ldr	r3, [pc, #96]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80055ea:	4817      	ldr	r0, [pc, #92]	; (8005648 <MX_ADC3_Init+0xd8>)
 80055ec:	f000 fdb0 	bl	8006150 <HAL_ADC_Init>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <MX_ADC3_Init+0x8a>
	{
		Error_Handler();
 80055f6:	f000 fa8f 	bl	8005b18 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80055fe:	f107 031c 	add.w	r3, r7, #28
 8005602:	4619      	mov	r1, r3
 8005604:	4810      	ldr	r0, [pc, #64]	; (8005648 <MX_ADC3_Init+0xd8>)
 8005606:	f002 f819 	bl	800763c <HAL_ADCEx_MultiModeConfigChannel>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <MX_ADC3_Init+0xa4>
	{
		Error_Handler();
 8005610:	f000 fa82 	bl	8005b18 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8005614:	2301      	movs	r3, #1
 8005616:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8005618:	2301      	movs	r3, #1
 800561a:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005624:	2300      	movs	r3, #0
 8005626:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	4619      	mov	r1, r3
 8005630:	4805      	ldr	r0, [pc, #20]	; (8005648 <MX_ADC3_Init+0xd8>)
 8005632:	f001 fd17 	bl	8007064 <HAL_ADC_ConfigChannel>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <MX_ADC3_Init+0xd0>
	{
		Error_Handler();
 800563c:	f000 fa6c 	bl	8005b18 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8005640:	bf00      	nop
 8005642:	3728      	adds	r7, #40	; 0x28
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	200002bc 	.word	0x200002bc
 800564c:	50000400 	.word	0x50000400

08005650 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8005656:	1d3b      	adds	r3, r7, #4
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8005660:	4b0e      	ldr	r3, [pc, #56]	; (800569c <MX_DAC1_Init+0x4c>)
 8005662:	4a0f      	ldr	r2, [pc, #60]	; (80056a0 <MX_DAC1_Init+0x50>)
 8005664:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005666:	480d      	ldr	r0, [pc, #52]	; (800569c <MX_DAC1_Init+0x4c>)
 8005668:	f002 fb69 	bl	8007d3e <HAL_DAC_Init>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <MX_DAC1_Init+0x26>
	{
		Error_Handler();
 8005672:	f000 fa51 	bl	8005b18 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8005676:	2324      	movs	r3, #36	; 0x24
 8005678:	607b      	str	r3, [r7, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800567a:	2302      	movs	r3, #2
 800567c:	60bb      	str	r3, [r7, #8]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	2200      	movs	r2, #0
 8005682:	4619      	mov	r1, r3
 8005684:	4805      	ldr	r0, [pc, #20]	; (800569c <MX_DAC1_Init+0x4c>)
 8005686:	f002 fd25 	bl	80080d4 <HAL_DAC_ConfigChannel>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <MX_DAC1_Init+0x44>
	{
		Error_Handler();
 8005690:	f000 fa42 	bl	8005b18 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	200000c4 	.word	0x200000c4
 80056a0:	40007400 	.word	0x40007400

080056a4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b09a      	sub	sp, #104	; 0x68
 80056a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	605a      	str	r2, [r3, #4]
 80056b4:	609a      	str	r2, [r3, #8]
 80056b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80056c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	60da      	str	r2, [r3, #12]
 80056d2:	611a      	str	r2, [r3, #16]
 80056d4:	615a      	str	r2, [r3, #20]
 80056d6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	222c      	movs	r2, #44	; 0x2c
 80056dc:	2100      	movs	r1, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	f007 fa6e 	bl	800cbc0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80056e4:	4b43      	ldr	r3, [pc, #268]	; (80057f4 <MX_TIM1_Init+0x150>)
 80056e6:	4a44      	ldr	r2, [pc, #272]	; (80057f8 <MX_TIM1_Init+0x154>)
 80056e8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 3599;
 80056ea:	4b42      	ldr	r3, [pc, #264]	; (80057f4 <MX_TIM1_Init+0x150>)
 80056ec:	f640 620f 	movw	r2, #3599	; 0xe0f
 80056f0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056f2:	4b40      	ldr	r3, [pc, #256]	; (80057f4 <MX_TIM1_Init+0x150>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1;
 80056f8:	4b3e      	ldr	r3, [pc, #248]	; (80057f4 <MX_TIM1_Init+0x150>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056fe:	4b3d      	ldr	r3, [pc, #244]	; (80057f4 <MX_TIM1_Init+0x150>)
 8005700:	2200      	movs	r2, #0
 8005702:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8005704:	4b3b      	ldr	r3, [pc, #236]	; (80057f4 <MX_TIM1_Init+0x150>)
 8005706:	2200      	movs	r2, #0
 8005708:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800570a:	4b3a      	ldr	r3, [pc, #232]	; (80057f4 <MX_TIM1_Init+0x150>)
 800570c:	2200      	movs	r2, #0
 800570e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005710:	4838      	ldr	r0, [pc, #224]	; (80057f4 <MX_TIM1_Init+0x150>)
 8005712:	f004 fd29 	bl	800a168 <HAL_TIM_Base_Init>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 800571c:	f000 f9fc 	bl	8005b18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005724:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005726:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800572a:	4619      	mov	r1, r3
 800572c:	4831      	ldr	r0, [pc, #196]	; (80057f4 <MX_TIM1_Init+0x150>)
 800572e:	f005 f92f 	bl	800a990 <HAL_TIM_ConfigClockSource>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8005738:	f000 f9ee 	bl	8005b18 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800573c:	482d      	ldr	r0, [pc, #180]	; (80057f4 <MX_TIM1_Init+0x150>)
 800573e:	f004 fdd3 	bl	800a2e8 <HAL_TIM_OC_Init>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8005748:	f000 f9e6 	bl	8005b18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800574c:	2300      	movs	r3, #0
 800574e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005750:	2300      	movs	r3, #0
 8005752:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005754:	2300      	movs	r3, #0
 8005756:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005758:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800575c:	4619      	mov	r1, r3
 800575e:	4825      	ldr	r0, [pc, #148]	; (80057f4 <MX_TIM1_Init+0x150>)
 8005760:	f005 fe6a 	bl	800b438 <HAL_TIMEx_MasterConfigSynchronization>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 800576a:	f000 f9d5 	bl	8005b18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800576e:	2310      	movs	r3, #16
 8005770:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005776:	2300      	movs	r3, #0
 8005778:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800577a:	2300      	movs	r3, #0
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800577e:	2300      	movs	r3, #0
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005782:	2300      	movs	r3, #0
 8005784:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005786:	2300      	movs	r3, #0
 8005788:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800578a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800578e:	2200      	movs	r2, #0
 8005790:	4619      	mov	r1, r3
 8005792:	4818      	ldr	r0, [pc, #96]	; (80057f4 <MX_TIM1_Init+0x150>)
 8005794:	f005 f882 	bl	800a89c <HAL_TIM_OC_ConfigChannel>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 800579e:	f000 f9bb 	bl	8005b18 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80057a2:	2300      	movs	r3, #0
 80057a4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80057b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057ba:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80057c0:	2300      	movs	r3, #0
 80057c2:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80057c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80057d2:	1d3b      	adds	r3, r7, #4
 80057d4:	4619      	mov	r1, r3
 80057d6:	4807      	ldr	r0, [pc, #28]	; (80057f4 <MX_TIM1_Init+0x150>)
 80057d8:	f005 feba 	bl	800b550 <HAL_TIMEx_ConfigBreakDeadTime>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 80057e2:	f000 f999 	bl	8005b18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80057e6:	4803      	ldr	r0, [pc, #12]	; (80057f4 <MX_TIM1_Init+0x150>)
 80057e8:	f000 fab4 	bl	8005d54 <HAL_TIM_MspPostInit>

}
 80057ec:	bf00      	nop
 80057ee:	3768      	adds	r7, #104	; 0x68
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	200004c0 	.word	0x200004c0
 80057f8:	40012c00 	.word	0x40012c00

080057fc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005802:	f107 0310 	add.w	r3, r7, #16
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	605a      	str	r2, [r3, #4]
 800580c:	609a      	str	r2, [r3, #8]
 800580e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005810:	1d3b      	adds	r3, r7, #4
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800581a:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <MX_TIM2_Init+0x94>)
 800581c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005820:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8005822:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <MX_TIM2_Init+0x94>)
 8005824:	2200      	movs	r2, #0
 8005826:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005828:	4b19      	ldr	r3, [pc, #100]	; (8005890 <MX_TIM2_Init+0x94>)
 800582a:	2200      	movs	r2, #0
 800582c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100-1;
 800582e:	4b18      	ldr	r3, [pc, #96]	; (8005890 <MX_TIM2_Init+0x94>)
 8005830:	2263      	movs	r2, #99	; 0x63
 8005832:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005834:	4b16      	ldr	r3, [pc, #88]	; (8005890 <MX_TIM2_Init+0x94>)
 8005836:	2200      	movs	r2, #0
 8005838:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800583a:	4b15      	ldr	r3, [pc, #84]	; (8005890 <MX_TIM2_Init+0x94>)
 800583c:	2200      	movs	r2, #0
 800583e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005840:	4813      	ldr	r0, [pc, #76]	; (8005890 <MX_TIM2_Init+0x94>)
 8005842:	f004 fc91 	bl	800a168 <HAL_TIM_Base_Init>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 800584c:	f000 f964 	bl	8005b18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005854:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005856:	f107 0310 	add.w	r3, r7, #16
 800585a:	4619      	mov	r1, r3
 800585c:	480c      	ldr	r0, [pc, #48]	; (8005890 <MX_TIM2_Init+0x94>)
 800585e:	f005 f897 	bl	800a990 <HAL_TIM_ConfigClockSource>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8005868:	f000 f956 	bl	8005b18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800586c:	2320      	movs	r3, #32
 800586e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005874:	1d3b      	adds	r3, r7, #4
 8005876:	4619      	mov	r1, r3
 8005878:	4805      	ldr	r0, [pc, #20]	; (8005890 <MX_TIM2_Init+0x94>)
 800587a:	f005 fddd 	bl	800b438 <HAL_TIMEx_MasterConfigSynchronization>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8005884:	f000 f948 	bl	8005b18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8005888:	bf00      	nop
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000510 	.word	0x20000510

08005894 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8005898:	4b14      	ldr	r3, [pc, #80]	; (80058ec <MX_USART2_UART_Init+0x58>)
 800589a:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <MX_USART2_UART_Init+0x5c>)
 800589c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800589e:	4b13      	ldr	r3, [pc, #76]	; (80058ec <MX_USART2_UART_Init+0x58>)
 80058a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058a4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80058a6:	4b11      	ldr	r3, [pc, #68]	; (80058ec <MX_USART2_UART_Init+0x58>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <MX_USART2_UART_Init+0x58>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80058b2:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <MX_USART2_UART_Init+0x58>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80058b8:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <MX_USART2_UART_Init+0x58>)
 80058ba:	220c      	movs	r2, #12
 80058bc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <MX_USART2_UART_Init+0x58>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80058c4:	4b09      	ldr	r3, [pc, #36]	; (80058ec <MX_USART2_UART_Init+0x58>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058ca:	4b08      	ldr	r3, [pc, #32]	; (80058ec <MX_USART2_UART_Init+0x58>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <MX_USART2_UART_Init+0x58>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80058d6:	4805      	ldr	r0, [pc, #20]	; (80058ec <MX_USART2_UART_Init+0x58>)
 80058d8:	f005 fede 	bl	800b698 <HAL_UART_Init>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80058e2:	f000 f919 	bl	8005b18 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80058e6:	bf00      	nop
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20001510 	.word	0x20001510
 80058f0:	40004400 	.word	0x40004400

080058f4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80058fa:	4b0c      	ldr	r3, [pc, #48]	; (800592c <MX_DMA_Init+0x38>)
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	4a0b      	ldr	r2, [pc, #44]	; (800592c <MX_DMA_Init+0x38>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	6153      	str	r3, [r2, #20]
 8005906:	4b09      	ldr	r3, [pc, #36]	; (800592c <MX_DMA_Init+0x38>)
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	607b      	str	r3, [r7, #4]
 8005910:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005912:	2200      	movs	r2, #0
 8005914:	2100      	movs	r1, #0
 8005916:	200d      	movs	r0, #13
 8005918:	f002 f9db 	bl	8007cd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800591c:	200d      	movs	r0, #13
 800591e:	f002 f9f4 	bl	8007d0a <HAL_NVIC_EnableIRQ>

}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	40021000 	.word	0x40021000

08005930 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	; 0x28
 8005934:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005936:	f107 0314 	add.w	r3, r7, #20
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	605a      	str	r2, [r3, #4]
 8005940:	609a      	str	r2, [r3, #8]
 8005942:	60da      	str	r2, [r3, #12]
 8005944:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005946:	4b71      	ldr	r3, [pc, #452]	; (8005b0c <MX_GPIO_Init+0x1dc>)
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	4a70      	ldr	r2, [pc, #448]	; (8005b0c <MX_GPIO_Init+0x1dc>)
 800594c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005950:	6153      	str	r3, [r2, #20]
 8005952:	4b6e      	ldr	r3, [pc, #440]	; (8005b0c <MX_GPIO_Init+0x1dc>)
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800595a:	613b      	str	r3, [r7, #16]
 800595c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800595e:	4b6b      	ldr	r3, [pc, #428]	; (8005b0c <MX_GPIO_Init+0x1dc>)
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	4a6a      	ldr	r2, [pc, #424]	; (8005b0c <MX_GPIO_Init+0x1dc>)
 8005964:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005968:	6153      	str	r3, [r2, #20]
 800596a:	4b68      	ldr	r3, [pc, #416]	; (8005b0c <MX_GPIO_Init+0x1dc>)
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005976:	4b65      	ldr	r3, [pc, #404]	; (8005b0c <MX_GPIO_Init+0x1dc>)
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	4a64      	ldr	r2, [pc, #400]	; (8005b0c <MX_GPIO_Init+0x1dc>)
 800597c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005980:	6153      	str	r3, [r2, #20]
 8005982:	4b62      	ldr	r3, [pc, #392]	; (8005b0c <MX_GPIO_Init+0x1dc>)
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	60bb      	str	r3, [r7, #8]
 800598c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800598e:	4b5f      	ldr	r3, [pc, #380]	; (8005b0c <MX_GPIO_Init+0x1dc>)
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	4a5e      	ldr	r2, [pc, #376]	; (8005b0c <MX_GPIO_Init+0x1dc>)
 8005994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005998:	6153      	str	r3, [r2, #20]
 800599a:	4b5c      	ldr	r3, [pc, #368]	; (8005b0c <MX_GPIO_Init+0x1dc>)
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059a2:	607b      	str	r3, [r7, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11
 80059a6:	2200      	movs	r2, #0
 80059a8:	f44f 51c7 	mov.w	r1, #6368	; 0x18e0
 80059ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059b0:	f003 f834 	bl	8008a1c <HAL_GPIO_WritePin>
			|GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80059b4:	2200      	movs	r2, #0
 80059b6:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80059ba:	4855      	ldr	r0, [pc, #340]	; (8005b10 <MX_GPIO_Init+0x1e0>)
 80059bc:	f003 f82e 	bl	8008a1c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 80059c0:	2200      	movs	r2, #0
 80059c2:	f641 2110 	movw	r1, #6672	; 0x1a10
 80059c6:	4853      	ldr	r0, [pc, #332]	; (8005b14 <MX_GPIO_Init+0x1e4>)
 80059c8:	f003 f828 	bl	8008a1c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80059cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80059d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80059d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059d8:	2301      	movs	r3, #1
 80059da:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059dc:	f107 0314 	add.w	r3, r7, #20
 80059e0:	4619      	mov	r1, r3
 80059e2:	484b      	ldr	r0, [pc, #300]	; (8005b10 <MX_GPIO_Init+0x1e0>)
 80059e4:	f002 fe78 	bl	80086d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA6 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 80059e8:	2360      	movs	r3, #96	; 0x60
 80059ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059ec:	2301      	movs	r3, #1
 80059ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059f0:	2301      	movs	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059f4:	2300      	movs	r3, #0
 80059f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059f8:	f107 0314 	add.w	r3, r7, #20
 80059fc:	4619      	mov	r1, r3
 80059fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a02:	f002 fe69 	bl	80086d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005a06:	2380      	movs	r3, #128	; 0x80
 8005a08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a12:	2300      	movs	r3, #0
 8005a14:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a16:	f107 0314 	add.w	r3, r7, #20
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a20:	f002 fe5a 	bl	80086d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC6 PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8005a24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005a28:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005a2a:	2311      	movs	r3, #17
 8005a2c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a32:	2300      	movs	r3, #0
 8005a34:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a36:	f107 0314 	add.w	r3, r7, #20
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4834      	ldr	r0, [pc, #208]	; (8005b10 <MX_GPIO_Init+0x1e0>)
 8005a3e:	f002 fe4b 	bl	80086d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB11 PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005a42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005a46:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005a48:	2311      	movs	r3, #17
 8005a4a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a50:	2300      	movs	r3, #0
 8005a52:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	4619      	mov	r1, r3
 8005a5a:	482e      	ldr	r0, [pc, #184]	; (8005b14 <MX_GPIO_Init+0x1e4>)
 8005a5c:	f002 fe3c 	bl	80086d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005a60:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005a64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005a6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a70:	f107 0314 	add.w	r3, r7, #20
 8005a74:	4619      	mov	r1, r3
 8005a76:	4827      	ldr	r0, [pc, #156]	; (8005b14 <MX_GPIO_Init+0x1e4>)
 8005a78:	f002 fe2e 	bl	80086d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a80:	2301      	movs	r3, #1
 8005a82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a8c:	f107 0314 	add.w	r3, r7, #20
 8005a90:	4619      	mov	r1, r3
 8005a92:	481f      	ldr	r0, [pc, #124]	; (8005b10 <MX_GPIO_Init+0x1e0>)
 8005a94:	f002 fe20 	bl	80086d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005aa2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aa8:	f107 0314 	add.w	r3, r7, #20
 8005aac:	4619      	mov	r1, r3
 8005aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ab2:	f002 fe11 	bl	80086d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005ab6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005aba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005abc:	2311      	movs	r3, #17
 8005abe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ac8:	f107 0314 	add.w	r3, r7, #20
 8005acc:	4619      	mov	r1, r3
 8005ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ad2:	f002 fe01 	bl	80086d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 8005ad6:	f44f 7304 	mov.w	r3, #528	; 0x210
 8005ada:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005adc:	2301      	movs	r3, #1
 8005ade:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ae8:	f107 0314 	add.w	r3, r7, #20
 8005aec:	4619      	mov	r1, r3
 8005aee:	4809      	ldr	r0, [pc, #36]	; (8005b14 <MX_GPIO_Init+0x1e4>)
 8005af0:	f002 fdf2 	bl	80086d8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005af4:	2200      	movs	r2, #0
 8005af6:	2100      	movs	r1, #0
 8005af8:	2028      	movs	r0, #40	; 0x28
 8005afa:	f002 f8ea 	bl	8007cd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005afe:	2028      	movs	r0, #40	; 0x28
 8005b00:	f002 f903 	bl	8007d0a <HAL_NVIC_EnableIRQ>

}
 8005b04:	bf00      	nop
 8005b06:	3728      	adds	r7, #40	; 0x28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	48000800 	.word	0x48000800
 8005b14:	48000400 	.word	0x48000400

08005b18 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005b1c:	bf00      	nop
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <HAL_MspInit+0x44>)
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	4a0e      	ldr	r2, [pc, #56]	; (8005b6c <HAL_MspInit+0x44>)
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	6193      	str	r3, [r2, #24]
 8005b3a:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <HAL_MspInit+0x44>)
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	607b      	str	r3, [r7, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b46:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <HAL_MspInit+0x44>)
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	4a08      	ldr	r2, [pc, #32]	; (8005b6c <HAL_MspInit+0x44>)
 8005b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b50:	61d3      	str	r3, [r2, #28]
 8005b52:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <HAL_MspInit+0x44>)
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005b5e:	2007      	movs	r0, #7
 8005b60:	f002 f8ac 	bl	8007cbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40021000 	.word	0x40021000

08005b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	; 0x28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b78:	f107 0314 	add.w	r3, r7, #20
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	605a      	str	r2, [r3, #4]
 8005b82:	609a      	str	r2, [r3, #8]
 8005b84:	60da      	str	r2, [r3, #12]
 8005b86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <HAL_ADC_MspInit+0x84>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d12b      	bne.n	8005bea <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8005b92:	4b19      	ldr	r3, [pc, #100]	; (8005bf8 <HAL_ADC_MspInit+0x88>)
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <HAL_ADC_MspInit+0x88>)
 8005b98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b9c:	6153      	str	r3, [r2, #20]
 8005b9e:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <HAL_ADC_MspInit+0x88>)
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005baa:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <HAL_ADC_MspInit+0x88>)
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	4a12      	ldr	r2, [pc, #72]	; (8005bf8 <HAL_ADC_MspInit+0x88>)
 8005bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb4:	6153      	str	r3, [r2, #20]
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <HAL_ADC_MspInit+0x88>)
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PB1     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bce:	f107 0314 	add.w	r3, r7, #20
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4809      	ldr	r0, [pc, #36]	; (8005bfc <HAL_ADC_MspInit+0x8c>)
 8005bd6:	f002 fd7f 	bl	80086d8 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2100      	movs	r1, #0
 8005bde:	202f      	movs	r0, #47	; 0x2f
 8005be0:	f002 f877 	bl	8007cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8005be4:	202f      	movs	r0, #47	; 0x2f
 8005be6:	f002 f890 	bl	8007d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005bea:	bf00      	nop
 8005bec:	3728      	adds	r7, #40	; 0x28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	50000400 	.word	0x50000400
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	48000400 	.word	0x48000400

08005c00 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c08:	f107 0314 	add.w	r3, r7, #20
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	60da      	str	r2, [r3, #12]
 8005c16:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2c      	ldr	r2, [pc, #176]	; (8005cd0 <HAL_DAC_MspInit+0xd0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d152      	bne.n	8005cc8 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005c22:	4b2c      	ldr	r3, [pc, #176]	; (8005cd4 <HAL_DAC_MspInit+0xd4>)
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	4a2b      	ldr	r2, [pc, #172]	; (8005cd4 <HAL_DAC_MspInit+0xd4>)
 8005c28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c2c:	61d3      	str	r3, [r2, #28]
 8005c2e:	4b29      	ldr	r3, [pc, #164]	; (8005cd4 <HAL_DAC_MspInit+0xd4>)
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c3a:	4b26      	ldr	r3, [pc, #152]	; (8005cd4 <HAL_DAC_MspInit+0xd4>)
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	4a25      	ldr	r2, [pc, #148]	; (8005cd4 <HAL_DAC_MspInit+0xd4>)
 8005c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c44:	6153      	str	r3, [r2, #20]
 8005c46:	4b23      	ldr	r3, [pc, #140]	; (8005cd4 <HAL_DAC_MspInit+0xd4>)
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005c52:	2310      	movs	r3, #16
 8005c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c56:	2303      	movs	r3, #3
 8005c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c5e:	f107 0314 	add.w	r3, r7, #20
 8005c62:	4619      	mov	r1, r3
 8005c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c68:	f002 fd36 	bl	80086d8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8005c6c:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <HAL_DAC_MspInit+0xd8>)
 8005c6e:	4a1b      	ldr	r2, [pc, #108]	; (8005cdc <HAL_DAC_MspInit+0xdc>)
 8005c70:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c72:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <HAL_DAC_MspInit+0xd8>)
 8005c74:	2210      	movs	r2, #16
 8005c76:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c78:	4b17      	ldr	r3, [pc, #92]	; (8005cd8 <HAL_DAC_MspInit+0xd8>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005c7e:	4b16      	ldr	r3, [pc, #88]	; (8005cd8 <HAL_DAC_MspInit+0xd8>)
 8005c80:	2280      	movs	r2, #128	; 0x80
 8005c82:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005c84:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <HAL_DAC_MspInit+0xd8>)
 8005c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005c8c:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <HAL_DAC_MspInit+0xd8>)
 8005c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c92:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8005c94:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <HAL_DAC_MspInit+0xd8>)
 8005c96:	2220      	movs	r2, #32
 8005c98:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <HAL_DAC_MspInit+0xd8>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005ca0:	480d      	ldr	r0, [pc, #52]	; (8005cd8 <HAL_DAC_MspInit+0xd8>)
 8005ca2:	f002 faee 	bl	8008282 <HAL_DMA_Init>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8005cac:	f7ff ff34 	bl	8005b18 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_DAC_MspInit+0xe0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <HAL_DAC_MspInit+0xe0>)
 8005cb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cba:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a06      	ldr	r2, [pc, #24]	; (8005cd8 <HAL_DAC_MspInit+0xd8>)
 8005cc0:	609a      	str	r2, [r3, #8]
 8005cc2:	4a05      	ldr	r2, [pc, #20]	; (8005cd8 <HAL_DAC_MspInit+0xd8>)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005cc8:	bf00      	nop
 8005cca:	3728      	adds	r7, #40	; 0x28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40007400 	.word	0x40007400
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	20000270 	.word	0x20000270
 8005cdc:	40020030 	.word	0x40020030
 8005ce0:	40010000 	.word	0x40010000

08005ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a16      	ldr	r2, [pc, #88]	; (8005d4c <HAL_TIM_Base_MspInit+0x68>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d114      	bne.n	8005d20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005cf6:	4b16      	ldr	r3, [pc, #88]	; (8005d50 <HAL_TIM_Base_MspInit+0x6c>)
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	4a15      	ldr	r2, [pc, #84]	; (8005d50 <HAL_TIM_Base_MspInit+0x6c>)
 8005cfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d00:	6193      	str	r3, [r2, #24]
 8005d02:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <HAL_TIM_Base_MspInit+0x6c>)
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2100      	movs	r1, #0
 8005d12:	201b      	movs	r0, #27
 8005d14:	f001 ffdd 	bl	8007cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005d18:	201b      	movs	r0, #27
 8005d1a:	f001 fff6 	bl	8007d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005d1e:	e010      	b.n	8005d42 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d28:	d10b      	bne.n	8005d42 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <HAL_TIM_Base_MspInit+0x6c>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <HAL_TIM_Base_MspInit+0x6c>)
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	61d3      	str	r3, [r2, #28]
 8005d36:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <HAL_TIM_Base_MspInit+0x6c>)
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	60bb      	str	r3, [r7, #8]
 8005d40:	68bb      	ldr	r3, [r7, #8]
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40012c00 	.word	0x40012c00
 8005d50:	40021000 	.word	0x40021000

08005d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d5c:	f107 030c 	add.w	r3, r7, #12
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	605a      	str	r2, [r3, #4]
 8005d66:	609a      	str	r2, [r3, #8]
 8005d68:	60da      	str	r2, [r3, #12]
 8005d6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a11      	ldr	r2, [pc, #68]	; (8005db8 <HAL_TIM_MspPostInit+0x64>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d11b      	bne.n	8005dae <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d76:	4b11      	ldr	r3, [pc, #68]	; (8005dbc <HAL_TIM_MspPostInit+0x68>)
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	4a10      	ldr	r2, [pc, #64]	; (8005dbc <HAL_TIM_MspPostInit+0x68>)
 8005d7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d80:	6153      	str	r3, [r2, #20]
 8005d82:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <HAL_TIM_MspPostInit+0x68>)
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d8a:	60bb      	str	r3, [r7, #8]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d92:	2302      	movs	r3, #2
 8005d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005da2:	f107 030c 	add.w	r3, r7, #12
 8005da6:	4619      	mov	r1, r3
 8005da8:	4805      	ldr	r0, [pc, #20]	; (8005dc0 <HAL_TIM_MspPostInit+0x6c>)
 8005daa:	f002 fc95 	bl	80086d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005dae:	bf00      	nop
 8005db0:	3720      	adds	r7, #32
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	48000800 	.word	0x48000800

08005dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	609a      	str	r2, [r3, #8]
 8005dd8:	60da      	str	r2, [r3, #12]
 8005dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <HAL_UART_MspInit+0x8c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d130      	bne.n	8005e48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005de6:	4b1b      	ldr	r3, [pc, #108]	; (8005e54 <HAL_UART_MspInit+0x90>)
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	4a1a      	ldr	r2, [pc, #104]	; (8005e54 <HAL_UART_MspInit+0x90>)
 8005dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df0:	61d3      	str	r3, [r2, #28]
 8005df2:	4b18      	ldr	r3, [pc, #96]	; (8005e54 <HAL_UART_MspInit+0x90>)
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dfe:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <HAL_UART_MspInit+0x90>)
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	4a14      	ldr	r2, [pc, #80]	; (8005e54 <HAL_UART_MspInit+0x90>)
 8005e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e08:	6153      	str	r3, [r2, #20]
 8005e0a:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <HAL_UART_MspInit+0x90>)
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005e16:	230c      	movs	r3, #12
 8005e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e22:	2300      	movs	r3, #0
 8005e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e26:	2307      	movs	r3, #7
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e2a:	f107 0314 	add.w	r3, r7, #20
 8005e2e:	4619      	mov	r1, r3
 8005e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e34:	f002 fc50 	bl	80086d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	2026      	movs	r0, #38	; 0x26
 8005e3e:	f001 ff48 	bl	8007cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005e42:	2026      	movs	r0, #38	; 0x26
 8005e44:	f001 ff61 	bl	8007d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005e48:	bf00      	nop
 8005e4a:	3728      	adds	r7, #40	; 0x28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40004400 	.word	0x40004400
 8005e54:	40021000 	.word	0x40021000

08005e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005e5c:	bf00      	nop
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e66:	b480      	push	{r7}
 8005e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e6a:	e7fe      	b.n	8005e6a <HardFault_Handler+0x4>

08005e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e70:	e7fe      	b.n	8005e70 <MemManage_Handler+0x4>

08005e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e72:	b480      	push	{r7}
 8005e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e76:	e7fe      	b.n	8005e76 <BusFault_Handler+0x4>

08005e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e7c:	e7fe      	b.n	8005e7c <UsageFault_Handler+0x4>

08005e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e82:	bf00      	nop
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e90:	bf00      	nop
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e9e:	bf00      	nop
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005eac:	f000 f8f0 	bl	8006090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005eb0:	bf00      	nop
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8005eb8:	4802      	ldr	r0, [pc, #8]	; (8005ec4 <DMA1_Channel3_IRQHandler+0x10>)
 8005eba:	f002 faff 	bl	80084bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005ebe:	bf00      	nop
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000270 	.word	0x20000270

08005ec8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	timer_interrupt = 1;
 8005ecc:	4b03      	ldr	r3, [pc, #12]	; (8005edc <TIM1_CC_IRQHandler+0x14>)
 8005ece:	2201      	movs	r2, #1
 8005ed0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005ed2:	4803      	ldr	r0, [pc, #12]	; (8005ee0 <TIM1_CC_IRQHandler+0x18>)
 8005ed4:	f004 fbc2 	bl	800a65c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005ed8:	bf00      	nop
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20001665 	.word	0x20001665
 8005ee0:	200004c0 	.word	0x200004c0

08005ee4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ee8:	4802      	ldr	r0, [pc, #8]	; (8005ef4 <USART2_IRQHandler+0x10>)
 8005eea:	f005 fd05 	bl	800b8f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005eee:	bf00      	nop
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20001510 	.word	0x20001510

08005ef8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005efc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005f00:	f002 fda4 	bl	8008a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005f04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005f08:	f002 fda0 	bl	8008a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005f0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005f10:	f002 fd9c 	bl	8008a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005f14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005f18:	f002 fd98 	bl	8008a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005f1c:	bf00      	nop
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8005f24:	4802      	ldr	r0, [pc, #8]	; (8005f30 <ADC3_IRQHandler+0x10>)
 8005f26:	f000 fd69 	bl	80069fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8005f2a:	bf00      	nop
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200002bc 	.word	0x200002bc

08005f34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005f3c:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <_sbrk+0x50>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d102      	bne.n	8005f4a <_sbrk+0x16>
		heap_end = &end;
 8005f44:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <_sbrk+0x50>)
 8005f46:	4a10      	ldr	r2, [pc, #64]	; (8005f88 <_sbrk+0x54>)
 8005f48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005f4a:	4b0e      	ldr	r3, [pc, #56]	; (8005f84 <_sbrk+0x50>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <_sbrk+0x50>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4413      	add	r3, r2
 8005f58:	466a      	mov	r2, sp
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d907      	bls.n	8005f6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005f5e:	f006 fe05 	bl	800cb6c <__errno>
 8005f62:	4602      	mov	r2, r0
 8005f64:	230c      	movs	r3, #12
 8005f66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005f68:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6c:	e006      	b.n	8005f7c <_sbrk+0x48>
	}

	heap_end += incr;
 8005f6e:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <_sbrk+0x50>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4413      	add	r3, r2
 8005f76:	4a03      	ldr	r2, [pc, #12]	; (8005f84 <_sbrk+0x50>)
 8005f78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	200000b4 	.word	0x200000b4
 8005f88:	20001678 	.word	0x20001678

08005f8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <SystemInit+0x20>)
 8005f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f96:	4a05      	ldr	r2, [pc, #20]	; (8005fac <SystemInit+0x20>)
 8005f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005fa0:	bf00      	nop
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	e000ed00 	.word	0xe000ed00

08005fb0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005fe8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005fb4:	480d      	ldr	r0, [pc, #52]	; (8005fec <LoopForever+0x6>)
  ldr r1, =_edata
 8005fb6:	490e      	ldr	r1, [pc, #56]	; (8005ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005fb8:	4a0e      	ldr	r2, [pc, #56]	; (8005ff4 <LoopForever+0xe>)
  movs r3, #0
 8005fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005fbc:	e002      	b.n	8005fc4 <LoopCopyDataInit>

08005fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fc2:	3304      	adds	r3, #4

08005fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fc8:	d3f9      	bcc.n	8005fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fca:	4a0b      	ldr	r2, [pc, #44]	; (8005ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005fcc:	4c0b      	ldr	r4, [pc, #44]	; (8005ffc <LoopForever+0x16>)
  movs r3, #0
 8005fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fd0:	e001      	b.n	8005fd6 <LoopFillZerobss>

08005fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fd4:	3204      	adds	r2, #4

08005fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fd8:	d3fb      	bcc.n	8005fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005fda:	f7ff ffd7 	bl	8005f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005fde:	f006 fdcb 	bl	800cb78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005fe2:	f7fb f851 	bl	8001088 <main>

08005fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8005fe6:	e7fe      	b.n	8005fe6 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005fe8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ff0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8005ff4:	0800e7c0 	.word	0x0800e7c0
  ldr r2, =_sbss
 8005ff8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8005ffc:	20001674 	.word	0x20001674

08006000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006000:	e7fe      	b.n	8006000 <ADC1_2_IRQHandler>
	...

08006004 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006008:	4b08      	ldr	r3, [pc, #32]	; (800602c <HAL_Init+0x28>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a07      	ldr	r2, [pc, #28]	; (800602c <HAL_Init+0x28>)
 800600e:	f043 0310 	orr.w	r3, r3, #16
 8006012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006014:	2003      	movs	r0, #3
 8006016:	f001 fe51 	bl	8007cbc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800601a:	2000      	movs	r0, #0
 800601c:	f000 f808 	bl	8006030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006020:	f7ff fd82 	bl	8005b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40022000 	.word	0x40022000

08006030 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006038:	4b12      	ldr	r3, [pc, #72]	; (8006084 <HAL_InitTick+0x54>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	4b12      	ldr	r3, [pc, #72]	; (8006088 <HAL_InitTick+0x58>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	4619      	mov	r1, r3
 8006042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006046:	fbb3 f3f1 	udiv	r3, r3, r1
 800604a:	fbb2 f3f3 	udiv	r3, r2, r3
 800604e:	4618      	mov	r0, r3
 8006050:	f001 fe69 	bl	8007d26 <HAL_SYSTICK_Config>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e00e      	b.n	800607c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b0f      	cmp	r3, #15
 8006062:	d80a      	bhi.n	800607a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006064:	2200      	movs	r2, #0
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	f001 fe31 	bl	8007cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006070:	4a06      	ldr	r2, [pc, #24]	; (800608c <HAL_InitTick+0x5c>)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	e000      	b.n	800607c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	20000020 	.word	0x20000020
 8006088:	20000028 	.word	0x20000028
 800608c:	20000024 	.word	0x20000024

08006090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006094:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <HAL_IncTick+0x20>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_IncTick+0x24>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4413      	add	r3, r2
 80060a0:	4a04      	ldr	r2, [pc, #16]	; (80060b4 <HAL_IncTick+0x24>)
 80060a2:	6013      	str	r3, [r2, #0]
}
 80060a4:	bf00      	nop
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	20000028 	.word	0x20000028
 80060b4:	2000166c 	.word	0x2000166c

080060b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80060bc:	4b03      	ldr	r3, [pc, #12]	; (80060cc <HAL_GetTick+0x14>)
 80060be:	681b      	ldr	r3, [r3, #0]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	2000166c 	.word	0x2000166c

080060d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060d8:	f7ff ffee 	bl	80060b8 <HAL_GetTick>
 80060dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d005      	beq.n	80060f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80060ea:	4b09      	ldr	r3, [pc, #36]	; (8006110 <HAL_Delay+0x40>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80060f6:	bf00      	nop
 80060f8:	f7ff ffde 	bl	80060b8 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	429a      	cmp	r2, r3
 8006106:	d8f7      	bhi.n	80060f8 <HAL_Delay+0x28>
  {
  }
}
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000028 	.word	0x20000028

08006114 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b09a      	sub	sp, #104	; 0x68
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e1e3      	b.n	8006538 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f003 0310 	and.w	r3, r3, #16
 800617e:	2b00      	cmp	r3, #0
 8006180:	d176      	bne.n	8006270 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d152      	bne.n	8006230 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff fce3 	bl	8005b70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d13b      	bne.n	8006230 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 fb95 	bl	80078e8 <ADC_Disable>
 80061be:	4603      	mov	r3, r0
 80061c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d12f      	bne.n	8006230 <HAL_ADC_Init+0xe0>
 80061d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d12b      	bne.n	8006230 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80061e0:	f023 0302 	bic.w	r3, r3, #2
 80061e4:	f043 0202 	orr.w	r2, r3, #2
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80061fa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800620a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800620c:	4b92      	ldr	r3, [pc, #584]	; (8006458 <HAL_ADC_Init+0x308>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a92      	ldr	r2, [pc, #584]	; (800645c <HAL_ADC_Init+0x30c>)
 8006212:	fba2 2303 	umull	r2, r3, r2, r3
 8006216:	0c9a      	lsrs	r2, r3, #18
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006222:	e002      	b.n	800622a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	3b01      	subs	r3, #1
 8006228:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1f9      	bne.n	8006224 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8006248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800624c:	d110      	bne.n	8006270 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f023 0312 	bic.w	r3, r3, #18
 8006256:	f043 0210 	orr.w	r2, r3, #16
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006262:	f043 0201 	orr.w	r2, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 8150 	bne.w	800651e <HAL_ADC_Init+0x3ce>
 800627e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006282:	2b00      	cmp	r3, #0
 8006284:	f040 814b 	bne.w	800651e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8006292:	2b00      	cmp	r3, #0
 8006294:	f040 8143 	bne.w	800651e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80062a0:	f043 0202 	orr.w	r2, r3, #2
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062b0:	d004      	beq.n	80062bc <HAL_ADC_Init+0x16c>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a6a      	ldr	r2, [pc, #424]	; (8006460 <HAL_ADC_Init+0x310>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d101      	bne.n	80062c0 <HAL_ADC_Init+0x170>
 80062bc:	4b69      	ldr	r3, [pc, #420]	; (8006464 <HAL_ADC_Init+0x314>)
 80062be:	e000      	b.n	80062c2 <HAL_ADC_Init+0x172>
 80062c0:	4b69      	ldr	r3, [pc, #420]	; (8006468 <HAL_ADC_Init+0x318>)
 80062c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062cc:	d102      	bne.n	80062d4 <HAL_ADC_Init+0x184>
 80062ce:	4b64      	ldr	r3, [pc, #400]	; (8006460 <HAL_ADC_Init+0x310>)
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	e01a      	b.n	800630a <HAL_ADC_Init+0x1ba>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a61      	ldr	r2, [pc, #388]	; (8006460 <HAL_ADC_Init+0x310>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d103      	bne.n	80062e6 <HAL_ADC_Init+0x196>
 80062de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e011      	b.n	800630a <HAL_ADC_Init+0x1ba>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a60      	ldr	r2, [pc, #384]	; (800646c <HAL_ADC_Init+0x31c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d102      	bne.n	80062f6 <HAL_ADC_Init+0x1a6>
 80062f0:	4b5f      	ldr	r3, [pc, #380]	; (8006470 <HAL_ADC_Init+0x320>)
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e009      	b.n	800630a <HAL_ADC_Init+0x1ba>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a5d      	ldr	r2, [pc, #372]	; (8006470 <HAL_ADC_Init+0x320>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d102      	bne.n	8006306 <HAL_ADC_Init+0x1b6>
 8006300:	4b5a      	ldr	r3, [pc, #360]	; (800646c <HAL_ADC_Init+0x31c>)
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	e001      	b.n	800630a <HAL_ADC_Init+0x1ba>
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	2b01      	cmp	r3, #1
 8006316:	d108      	bne.n	800632a <HAL_ADC_Init+0x1da>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_ADC_Init+0x1da>
 8006326:	2301      	movs	r3, #1
 8006328:	e000      	b.n	800632c <HAL_ADC_Init+0x1dc>
 800632a:	2300      	movs	r3, #0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d11c      	bne.n	800636a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006330:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8006332:	2b00      	cmp	r3, #0
 8006334:	d010      	beq.n	8006358 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	2b01      	cmp	r3, #1
 8006340:	d107      	bne.n	8006352 <HAL_ADC_Init+0x202>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_ADC_Init+0x202>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <HAL_ADC_Init+0x204>
 8006352:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006354:	2b00      	cmp	r3, #0
 8006356:	d108      	bne.n	800636a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8006358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	431a      	orrs	r2, r3
 8006366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006368:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	7e5b      	ldrb	r3, [r3, #25]
 800636e:	035b      	lsls	r3, r3, #13
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006374:	2a01      	cmp	r2, #1
 8006376:	d002      	beq.n	800637e <HAL_ADC_Init+0x22e>
 8006378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800637c:	e000      	b.n	8006380 <HAL_ADC_Init+0x230>
 800637e:	2200      	movs	r2, #0
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	4313      	orrs	r3, r2
 800638e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006390:	4313      	orrs	r3, r2
 8006392:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d11b      	bne.n	80063d6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	7e5b      	ldrb	r3, [r3, #25]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	3b01      	subs	r3, #1
 80063ac:	045a      	lsls	r2, r3, #17
 80063ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b6:	663b      	str	r3, [r7, #96]	; 0x60
 80063b8:	e00d      	b.n	80063d6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80063c2:	f043 0220 	orr.w	r2, r3, #32
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ce:	f043 0201 	orr.w	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d054      	beq.n	8006488 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a22      	ldr	r2, [pc, #136]	; (800646c <HAL_ADC_Init+0x31c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_ADC_Init+0x2a2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a20      	ldr	r2, [pc, #128]	; (8006470 <HAL_ADC_Init+0x320>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d140      	bne.n	8006474 <HAL_ADC_Init+0x324>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80063fa:	d02a      	beq.n	8006452 <HAL_ADC_Init+0x302>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006404:	d022      	beq.n	800644c <HAL_ADC_Init+0x2fc>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800640e:	d01a      	beq.n	8006446 <HAL_ADC_Init+0x2f6>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8006418:	d012      	beq.n	8006440 <HAL_ADC_Init+0x2f0>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8006422:	d00a      	beq.n	800643a <HAL_ADC_Init+0x2ea>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006428:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800642c:	d002      	beq.n	8006434 <HAL_ADC_Init+0x2e4>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	e023      	b.n	800647c <HAL_ADC_Init+0x32c>
 8006434:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006438:	e020      	b.n	800647c <HAL_ADC_Init+0x32c>
 800643a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800643e:	e01d      	b.n	800647c <HAL_ADC_Init+0x32c>
 8006440:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006444:	e01a      	b.n	800647c <HAL_ADC_Init+0x32c>
 8006446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800644a:	e017      	b.n	800647c <HAL_ADC_Init+0x32c>
 800644c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8006450:	e014      	b.n	800647c <HAL_ADC_Init+0x32c>
 8006452:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8006456:	e011      	b.n	800647c <HAL_ADC_Init+0x32c>
 8006458:	20000020 	.word	0x20000020
 800645c:	431bde83 	.word	0x431bde83
 8006460:	50000100 	.word	0x50000100
 8006464:	50000300 	.word	0x50000300
 8006468:	50000700 	.word	0x50000700
 800646c:	50000400 	.word	0x50000400
 8006470:	50000500 	.word	0x50000500
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006480:	4313      	orrs	r3, r2
 8006482:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006484:	4313      	orrs	r3, r2
 8006486:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 030c 	and.w	r3, r3, #12
 8006492:	2b00      	cmp	r3, #0
 8006494:	d114      	bne.n	80064c0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6812      	ldr	r2, [r2, #0]
 80064a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a4:	f023 0302 	bic.w	r3, r3, #2
 80064a8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	7e1b      	ldrb	r3, [r3, #24]
 80064ae:	039a      	lsls	r2, r3, #14
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	4313      	orrs	r3, r2
 80064ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064bc:	4313      	orrs	r3, r2
 80064be:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	4b1e      	ldr	r3, [pc, #120]	; (8006540 <HAL_ADC_Init+0x3f0>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6812      	ldr	r2, [r2, #0]
 80064ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80064d0:	430b      	orrs	r3, r1
 80064d2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d10c      	bne.n	80064f6 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	f023 010f 	bic.w	r1, r3, #15
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	1e5a      	subs	r2, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30
 80064f4:	e007      	b.n	8006506 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 020f 	bic.w	r2, r2, #15
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006510:	f023 0303 	bic.w	r3, r3, #3
 8006514:	f043 0201 	orr.w	r2, r3, #1
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	641a      	str	r2, [r3, #64]	; 0x40
 800651c:	e00a      	b.n	8006534 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f023 0312 	bic.w	r3, r3, #18
 8006526:	f043 0210 	orr.w	r2, r3, #16
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800652e:	2301      	movs	r3, #1
 8006530:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8006534:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006538:	4618      	mov	r0, r3
 800653a:	3768      	adds	r7, #104	; 0x68
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	fff0c007 	.word	0xfff0c007

08006544 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	f040 80f9 	bne.w	8006752 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_ADC_Start+0x2a>
 800656a:	2302      	movs	r3, #2
 800656c:	e0f4      	b.n	8006758 <HAL_ADC_Start+0x214>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f001 f952 	bl	8007820 <ADC_Enable>
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	2b00      	cmp	r3, #0
 8006584:	f040 80e0 	bne.w	8006748 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006590:	f023 0301 	bic.w	r3, r3, #1
 8006594:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065a4:	d004      	beq.n	80065b0 <HAL_ADC_Start+0x6c>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a6d      	ldr	r2, [pc, #436]	; (8006760 <HAL_ADC_Start+0x21c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d106      	bne.n	80065be <HAL_ADC_Start+0x7a>
 80065b0:	4b6c      	ldr	r3, [pc, #432]	; (8006764 <HAL_ADC_Start+0x220>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 031f 	and.w	r3, r3, #31
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d010      	beq.n	80065de <HAL_ADC_Start+0x9a>
 80065bc:	e005      	b.n	80065ca <HAL_ADC_Start+0x86>
 80065be:	4b6a      	ldr	r3, [pc, #424]	; (8006768 <HAL_ADC_Start+0x224>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <HAL_ADC_Start+0x9a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065d2:	d004      	beq.n	80065de <HAL_ADC_Start+0x9a>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a64      	ldr	r2, [pc, #400]	; (800676c <HAL_ADC_Start+0x228>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d115      	bne.n	800660a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d036      	beq.n	8006666 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006600:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8006608:	e02d      	b.n	8006666 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800661e:	d004      	beq.n	800662a <HAL_ADC_Start+0xe6>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a4e      	ldr	r2, [pc, #312]	; (8006760 <HAL_ADC_Start+0x21c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d10a      	bne.n	8006640 <HAL_ADC_Start+0xfc>
 800662a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006634:	2b00      	cmp	r3, #0
 8006636:	bf14      	ite	ne
 8006638:	2301      	movne	r3, #1
 800663a:	2300      	moveq	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	e008      	b.n	8006652 <HAL_ADC_Start+0x10e>
 8006640:	4b4a      	ldr	r3, [pc, #296]	; (800676c <HAL_ADC_Start+0x228>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	bf14      	ite	ne
 800664c:	2301      	movne	r3, #1
 800664e:	2300      	moveq	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d007      	beq.n	8006666 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800665e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800666e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006672:	d106      	bne.n	8006682 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006678:	f023 0206 	bic.w	r2, r3, #6
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	645a      	str	r2, [r3, #68]	; 0x44
 8006680:	e002      	b.n	8006688 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	221c      	movs	r2, #28
 8006696:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066a0:	d004      	beq.n	80066ac <HAL_ADC_Start+0x168>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a2e      	ldr	r2, [pc, #184]	; (8006760 <HAL_ADC_Start+0x21c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d106      	bne.n	80066ba <HAL_ADC_Start+0x176>
 80066ac:	4b2d      	ldr	r3, [pc, #180]	; (8006764 <HAL_ADC_Start+0x220>)
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f003 031f 	and.w	r3, r3, #31
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d03e      	beq.n	8006736 <HAL_ADC_Start+0x1f2>
 80066b8:	e005      	b.n	80066c6 <HAL_ADC_Start+0x182>
 80066ba:	4b2b      	ldr	r3, [pc, #172]	; (8006768 <HAL_ADC_Start+0x224>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 031f 	and.w	r3, r3, #31
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d037      	beq.n	8006736 <HAL_ADC_Start+0x1f2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066ce:	d004      	beq.n	80066da <HAL_ADC_Start+0x196>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a22      	ldr	r2, [pc, #136]	; (8006760 <HAL_ADC_Start+0x21c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d106      	bne.n	80066e8 <HAL_ADC_Start+0x1a4>
 80066da:	4b22      	ldr	r3, [pc, #136]	; (8006764 <HAL_ADC_Start+0x220>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2b05      	cmp	r3, #5
 80066e4:	d027      	beq.n	8006736 <HAL_ADC_Start+0x1f2>
 80066e6:	e005      	b.n	80066f4 <HAL_ADC_Start+0x1b0>
 80066e8:	4b1f      	ldr	r3, [pc, #124]	; (8006768 <HAL_ADC_Start+0x224>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2b05      	cmp	r3, #5
 80066f2:	d020      	beq.n	8006736 <HAL_ADC_Start+0x1f2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066fc:	d004      	beq.n	8006708 <HAL_ADC_Start+0x1c4>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a17      	ldr	r2, [pc, #92]	; (8006760 <HAL_ADC_Start+0x21c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d106      	bne.n	8006716 <HAL_ADC_Start+0x1d2>
 8006708:	4b16      	ldr	r3, [pc, #88]	; (8006764 <HAL_ADC_Start+0x220>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2b09      	cmp	r3, #9
 8006712:	d010      	beq.n	8006736 <HAL_ADC_Start+0x1f2>
 8006714:	e005      	b.n	8006722 <HAL_ADC_Start+0x1de>
 8006716:	4b14      	ldr	r3, [pc, #80]	; (8006768 <HAL_ADC_Start+0x224>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	2b09      	cmp	r3, #9
 8006720:	d009      	beq.n	8006736 <HAL_ADC_Start+0x1f2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800672a:	d004      	beq.n	8006736 <HAL_ADC_Start+0x1f2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0e      	ldr	r2, [pc, #56]	; (800676c <HAL_ADC_Start+0x228>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d10f      	bne.n	8006756 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0204 	orr.w	r2, r2, #4
 8006744:	609a      	str	r2, [r3, #8]
 8006746:	e006      	b.n	8006756 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006750:	e001      	b.n	8006756 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006752:	2302      	movs	r3, #2
 8006754:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	50000100 	.word	0x50000100
 8006764:	50000300 	.word	0x50000300
 8006768:	50000700 	.word	0x50000700
 800676c:	50000400 	.word	0x50000400

08006770 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_ADC_Stop+0x1a>
 8006786:	2302      	movs	r3, #2
 8006788:	e023      	b.n	80067d2 <HAL_ADC_Stop+0x62>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006792:	216c      	movs	r1, #108	; 0x6c
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 f90d 	bl	80079b4 <ADC_ConversionStop>
 800679a:	4603      	mov	r3, r0
 800679c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d111      	bne.n	80067c8 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 f89f 	bl	80078e8 <ADC_Disable>
 80067aa:	4603      	mov	r3, r0
 80067ac:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80067bc:	f023 0301 	bic.w	r3, r3, #1
 80067c0:	f043 0201 	orr.w	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	2b08      	cmp	r3, #8
 80067f0:	d102      	bne.n	80067f8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80067f2:	2308      	movs	r3, #8
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	e03a      	b.n	800686e <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006800:	d004      	beq.n	800680c <HAL_ADC_PollForConversion+0x30>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a72      	ldr	r2, [pc, #456]	; (80069d0 <HAL_ADC_PollForConversion+0x1f4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d101      	bne.n	8006810 <HAL_ADC_PollForConversion+0x34>
 800680c:	4b71      	ldr	r3, [pc, #452]	; (80069d4 <HAL_ADC_PollForConversion+0x1f8>)
 800680e:	e000      	b.n	8006812 <HAL_ADC_PollForConversion+0x36>
 8006810:	4b71      	ldr	r3, [pc, #452]	; (80069d8 <HAL_ADC_PollForConversion+0x1fc>)
 8006812:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 031f 	and.w	r3, r3, #31
 800681c:	2b00      	cmp	r3, #0
 800681e:	d112      	bne.n	8006846 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b01      	cmp	r3, #1
 800682c:	d11d      	bne.n	800686a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	f043 0220 	orr.w	r2, r3, #32
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e0bf      	b.n	80069c6 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00b      	beq.n	800686a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	f043 0220 	orr.w	r2, r3, #32
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e0ad      	b.n	80069c6 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800686a:	230c      	movs	r3, #12
 800686c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006876:	d004      	beq.n	8006882 <HAL_ADC_PollForConversion+0xa6>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a54      	ldr	r2, [pc, #336]	; (80069d0 <HAL_ADC_PollForConversion+0x1f4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d106      	bne.n	8006890 <HAL_ADC_PollForConversion+0xb4>
 8006882:	4b54      	ldr	r3, [pc, #336]	; (80069d4 <HAL_ADC_PollForConversion+0x1f8>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 031f 	and.w	r3, r3, #31
 800688a:	2b00      	cmp	r3, #0
 800688c:	d010      	beq.n	80068b0 <HAL_ADC_PollForConversion+0xd4>
 800688e:	e005      	b.n	800689c <HAL_ADC_PollForConversion+0xc0>
 8006890:	4b51      	ldr	r3, [pc, #324]	; (80069d8 <HAL_ADC_PollForConversion+0x1fc>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 031f 	and.w	r3, r3, #31
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <HAL_ADC_PollForConversion+0xd4>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068a4:	d004      	beq.n	80068b0 <HAL_ADC_PollForConversion+0xd4>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a4c      	ldr	r2, [pc, #304]	; (80069dc <HAL_ADC_PollForConversion+0x200>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d104      	bne.n	80068ba <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	e00f      	b.n	80068da <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068c2:	d004      	beq.n	80068ce <HAL_ADC_PollForConversion+0xf2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a41      	ldr	r2, [pc, #260]	; (80069d0 <HAL_ADC_PollForConversion+0x1f4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d102      	bne.n	80068d4 <HAL_ADC_PollForConversion+0xf8>
 80068ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80068d2:	e000      	b.n	80068d6 <HAL_ADC_PollForConversion+0xfa>
 80068d4:	4b41      	ldr	r3, [pc, #260]	; (80069dc <HAL_ADC_PollForConversion+0x200>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80068da:	f7ff fbed 	bl	80060b8 <HAL_GetTick>
 80068de:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80068e0:	e021      	b.n	8006926 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e8:	d01d      	beq.n	8006926 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d007      	beq.n	8006900 <HAL_ADC_PollForConversion+0x124>
 80068f0:	f7ff fbe2 	bl	80060b8 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d212      	bcs.n	8006926 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	4013      	ands	r3, r2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10b      	bne.n	8006926 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f043 0204 	orr.w	r2, r3, #4
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e04f      	b.n	80069c6 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	4013      	ands	r3, r2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0d6      	beq.n	80068e2 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800694a:	2b00      	cmp	r3, #0
 800694c:	d131      	bne.n	80069b2 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8006954:	2b00      	cmp	r3, #0
 8006956:	d12c      	bne.n	80069b2 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b08      	cmp	r3, #8
 8006964:	d125      	bne.n	80069b2 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d112      	bne.n	800699a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d112      	bne.n	80069b2 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006990:	f043 0201 	orr.w	r2, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	641a      	str	r2, [r3, #64]	; 0x40
 8006998:	e00b      	b.n	80069b2 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	f043 0220 	orr.w	r2, r3, #32
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069aa:	f043 0201 	orr.w	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d103      	bne.n	80069c4 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	50000100 	.word	0x50000100
 80069d4:	50000300 	.word	0x50000300
 80069d8:	50000700 	.word	0x50000700
 80069dc:	50000400 	.word	0x50000400

080069e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
	...

080069fc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d106      	bne.n	8006a2c <HAL_ADC_IRQHandler+0x30>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f003 0304 	and.w	r3, r3, #4
 8006a28:	2b04      	cmp	r3, #4
 8006a2a:	d00f      	beq.n	8006a4c <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	f040 80c0 	bne.w	8006bbc <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f003 0308 	and.w	r3, r3, #8
 8006a46:	2b08      	cmp	r3, #8
 8006a48:	f040 80b8 	bne.w	8006bbc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d105      	bne.n	8006a64 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a6c:	d004      	beq.n	8006a78 <HAL_ADC_IRQHandler+0x7c>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a95      	ldr	r2, [pc, #596]	; (8006cc8 <HAL_ADC_IRQHandler+0x2cc>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d106      	bne.n	8006a86 <HAL_ADC_IRQHandler+0x8a>
 8006a78:	4b94      	ldr	r3, [pc, #592]	; (8006ccc <HAL_ADC_IRQHandler+0x2d0>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f003 031f 	and.w	r3, r3, #31
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d03e      	beq.n	8006b02 <HAL_ADC_IRQHandler+0x106>
 8006a84:	e005      	b.n	8006a92 <HAL_ADC_IRQHandler+0x96>
 8006a86:	4b92      	ldr	r3, [pc, #584]	; (8006cd0 <HAL_ADC_IRQHandler+0x2d4>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d037      	beq.n	8006b02 <HAL_ADC_IRQHandler+0x106>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a9a:	d004      	beq.n	8006aa6 <HAL_ADC_IRQHandler+0xaa>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a89      	ldr	r2, [pc, #548]	; (8006cc8 <HAL_ADC_IRQHandler+0x2cc>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d106      	bne.n	8006ab4 <HAL_ADC_IRQHandler+0xb8>
 8006aa6:	4b89      	ldr	r3, [pc, #548]	; (8006ccc <HAL_ADC_IRQHandler+0x2d0>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	2b05      	cmp	r3, #5
 8006ab0:	d027      	beq.n	8006b02 <HAL_ADC_IRQHandler+0x106>
 8006ab2:	e005      	b.n	8006ac0 <HAL_ADC_IRQHandler+0xc4>
 8006ab4:	4b86      	ldr	r3, [pc, #536]	; (8006cd0 <HAL_ADC_IRQHandler+0x2d4>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 031f 	and.w	r3, r3, #31
 8006abc:	2b05      	cmp	r3, #5
 8006abe:	d020      	beq.n	8006b02 <HAL_ADC_IRQHandler+0x106>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ac8:	d004      	beq.n	8006ad4 <HAL_ADC_IRQHandler+0xd8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a7e      	ldr	r2, [pc, #504]	; (8006cc8 <HAL_ADC_IRQHandler+0x2cc>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d106      	bne.n	8006ae2 <HAL_ADC_IRQHandler+0xe6>
 8006ad4:	4b7d      	ldr	r3, [pc, #500]	; (8006ccc <HAL_ADC_IRQHandler+0x2d0>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	2b09      	cmp	r3, #9
 8006ade:	d010      	beq.n	8006b02 <HAL_ADC_IRQHandler+0x106>
 8006ae0:	e005      	b.n	8006aee <HAL_ADC_IRQHandler+0xf2>
 8006ae2:	4b7b      	ldr	r3, [pc, #492]	; (8006cd0 <HAL_ADC_IRQHandler+0x2d4>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	2b09      	cmp	r3, #9
 8006aec:	d009      	beq.n	8006b02 <HAL_ADC_IRQHandler+0x106>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006af6:	d004      	beq.n	8006b02 <HAL_ADC_IRQHandler+0x106>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a75      	ldr	r2, [pc, #468]	; (8006cd4 <HAL_ADC_IRQHandler+0x2d8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d104      	bne.n	8006b0c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	613b      	str	r3, [r7, #16]
 8006b0a:	e00f      	b.n	8006b2c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b14:	d004      	beq.n	8006b20 <HAL_ADC_IRQHandler+0x124>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a6b      	ldr	r2, [pc, #428]	; (8006cc8 <HAL_ADC_IRQHandler+0x2cc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d102      	bne.n	8006b26 <HAL_ADC_IRQHandler+0x12a>
 8006b20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006b24:	e000      	b.n	8006b28 <HAL_ADC_IRQHandler+0x12c>
 8006b26:	4b6b      	ldr	r3, [pc, #428]	; (8006cd4 <HAL_ADC_IRQHandler+0x2d8>)
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d139      	bne.n	8006bae <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d134      	bne.n	8006bae <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d12d      	bne.n	8006bae <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d11a      	bne.n	8006b96 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 020c 	bic.w	r2, r2, #12
 8006b6e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d112      	bne.n	8006bae <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	f043 0201 	orr.w	r2, r3, #1
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40
 8006b94:	e00b      	b.n	8006bae <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f043 0210 	orr.w	r2, r3, #16
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	f043 0201 	orr.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff fab0 	bl	8006114 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	220c      	movs	r2, #12
 8006bba:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	d106      	bne.n	8006bd8 <HAL_ADC_IRQHandler+0x1dc>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	d00f      	beq.n	8006bf8 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8006be2:	2b40      	cmp	r3, #64	; 0x40
 8006be4:	f040 813c 	bne.w	8006e60 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b40      	cmp	r3, #64	; 0x40
 8006bf4:	f040 8134 	bne.w	8006e60 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c0c:	d004      	beq.n	8006c18 <HAL_ADC_IRQHandler+0x21c>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a2d      	ldr	r2, [pc, #180]	; (8006cc8 <HAL_ADC_IRQHandler+0x2cc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d106      	bne.n	8006c26 <HAL_ADC_IRQHandler+0x22a>
 8006c18:	4b2c      	ldr	r3, [pc, #176]	; (8006ccc <HAL_ADC_IRQHandler+0x2d0>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 031f 	and.w	r3, r3, #31
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d03e      	beq.n	8006ca2 <HAL_ADC_IRQHandler+0x2a6>
 8006c24:	e005      	b.n	8006c32 <HAL_ADC_IRQHandler+0x236>
 8006c26:	4b2a      	ldr	r3, [pc, #168]	; (8006cd0 <HAL_ADC_IRQHandler+0x2d4>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 031f 	and.w	r3, r3, #31
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d037      	beq.n	8006ca2 <HAL_ADC_IRQHandler+0x2a6>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c3a:	d004      	beq.n	8006c46 <HAL_ADC_IRQHandler+0x24a>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a21      	ldr	r2, [pc, #132]	; (8006cc8 <HAL_ADC_IRQHandler+0x2cc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d106      	bne.n	8006c54 <HAL_ADC_IRQHandler+0x258>
 8006c46:	4b21      	ldr	r3, [pc, #132]	; (8006ccc <HAL_ADC_IRQHandler+0x2d0>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	2b05      	cmp	r3, #5
 8006c50:	d027      	beq.n	8006ca2 <HAL_ADC_IRQHandler+0x2a6>
 8006c52:	e005      	b.n	8006c60 <HAL_ADC_IRQHandler+0x264>
 8006c54:	4b1e      	ldr	r3, [pc, #120]	; (8006cd0 <HAL_ADC_IRQHandler+0x2d4>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 031f 	and.w	r3, r3, #31
 8006c5c:	2b05      	cmp	r3, #5
 8006c5e:	d020      	beq.n	8006ca2 <HAL_ADC_IRQHandler+0x2a6>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c68:	d004      	beq.n	8006c74 <HAL_ADC_IRQHandler+0x278>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a16      	ldr	r2, [pc, #88]	; (8006cc8 <HAL_ADC_IRQHandler+0x2cc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d106      	bne.n	8006c82 <HAL_ADC_IRQHandler+0x286>
 8006c74:	4b15      	ldr	r3, [pc, #84]	; (8006ccc <HAL_ADC_IRQHandler+0x2d0>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 031f 	and.w	r3, r3, #31
 8006c7c:	2b09      	cmp	r3, #9
 8006c7e:	d010      	beq.n	8006ca2 <HAL_ADC_IRQHandler+0x2a6>
 8006c80:	e005      	b.n	8006c8e <HAL_ADC_IRQHandler+0x292>
 8006c82:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <HAL_ADC_IRQHandler+0x2d4>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	2b09      	cmp	r3, #9
 8006c8c:	d009      	beq.n	8006ca2 <HAL_ADC_IRQHandler+0x2a6>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c96:	d004      	beq.n	8006ca2 <HAL_ADC_IRQHandler+0x2a6>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a0d      	ldr	r2, [pc, #52]	; (8006cd4 <HAL_ADC_IRQHandler+0x2d8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d104      	bne.n	8006cac <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	613b      	str	r3, [r7, #16]
 8006caa:	e018      	b.n	8006cde <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cb4:	d004      	beq.n	8006cc0 <HAL_ADC_IRQHandler+0x2c4>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a03      	ldr	r2, [pc, #12]	; (8006cc8 <HAL_ADC_IRQHandler+0x2cc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10b      	bne.n	8006cd8 <HAL_ADC_IRQHandler+0x2dc>
 8006cc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006cc4:	e009      	b.n	8006cda <HAL_ADC_IRQHandler+0x2de>
 8006cc6:	bf00      	nop
 8006cc8:	50000100 	.word	0x50000100
 8006ccc:	50000300 	.word	0x50000300
 8006cd0:	50000700 	.word	0x50000700
 8006cd4:	50000400 	.word	0x50000400
 8006cd8:	4b9d      	ldr	r3, [pc, #628]	; (8006f50 <HAL_ADC_IRQHandler+0x554>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f040 80b2 	bne.w	8006e52 <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00d      	beq.n	8006d14 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f040 80a5 	bne.w	8006e52 <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f040 809f 	bne.w	8006e52 <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1e:	2b40      	cmp	r3, #64	; 0x40
 8006d20:	f040 8097 	bne.w	8006e52 <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d2c:	d004      	beq.n	8006d38 <HAL_ADC_IRQHandler+0x33c>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a88      	ldr	r2, [pc, #544]	; (8006f54 <HAL_ADC_IRQHandler+0x558>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d106      	bne.n	8006d46 <HAL_ADC_IRQHandler+0x34a>
 8006d38:	4b87      	ldr	r3, [pc, #540]	; (8006f58 <HAL_ADC_IRQHandler+0x55c>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 031f 	and.w	r3, r3, #31
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d03e      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x3c6>
 8006d44:	e005      	b.n	8006d52 <HAL_ADC_IRQHandler+0x356>
 8006d46:	4b85      	ldr	r3, [pc, #532]	; (8006f5c <HAL_ADC_IRQHandler+0x560>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d037      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x3c6>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d5a:	d004      	beq.n	8006d66 <HAL_ADC_IRQHandler+0x36a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a7c      	ldr	r2, [pc, #496]	; (8006f54 <HAL_ADC_IRQHandler+0x558>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d106      	bne.n	8006d74 <HAL_ADC_IRQHandler+0x378>
 8006d66:	4b7c      	ldr	r3, [pc, #496]	; (8006f58 <HAL_ADC_IRQHandler+0x55c>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 031f 	and.w	r3, r3, #31
 8006d6e:	2b06      	cmp	r3, #6
 8006d70:	d027      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x3c6>
 8006d72:	e005      	b.n	8006d80 <HAL_ADC_IRQHandler+0x384>
 8006d74:	4b79      	ldr	r3, [pc, #484]	; (8006f5c <HAL_ADC_IRQHandler+0x560>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2b06      	cmp	r3, #6
 8006d7e:	d020      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x3c6>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d88:	d004      	beq.n	8006d94 <HAL_ADC_IRQHandler+0x398>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a71      	ldr	r2, [pc, #452]	; (8006f54 <HAL_ADC_IRQHandler+0x558>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d106      	bne.n	8006da2 <HAL_ADC_IRQHandler+0x3a6>
 8006d94:	4b70      	ldr	r3, [pc, #448]	; (8006f58 <HAL_ADC_IRQHandler+0x55c>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	2b07      	cmp	r3, #7
 8006d9e:	d010      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x3c6>
 8006da0:	e005      	b.n	8006dae <HAL_ADC_IRQHandler+0x3b2>
 8006da2:	4b6e      	ldr	r3, [pc, #440]	; (8006f5c <HAL_ADC_IRQHandler+0x560>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 031f 	and.w	r3, r3, #31
 8006daa:	2b07      	cmp	r3, #7
 8006dac:	d009      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x3c6>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006db6:	d004      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x3c6>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a64      	ldr	r2, [pc, #400]	; (8006f50 <HAL_ADC_IRQHandler+0x554>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d104      	bne.n	8006dcc <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	e00f      	b.n	8006dec <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dd4:	d004      	beq.n	8006de0 <HAL_ADC_IRQHandler+0x3e4>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a5e      	ldr	r2, [pc, #376]	; (8006f54 <HAL_ADC_IRQHandler+0x558>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d102      	bne.n	8006de6 <HAL_ADC_IRQHandler+0x3ea>
 8006de0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006de4:	e000      	b.n	8006de8 <HAL_ADC_IRQHandler+0x3ec>
 8006de6:	4b5a      	ldr	r3, [pc, #360]	; (8006f50 <HAL_ADC_IRQHandler+0x554>)
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d12d      	bne.n	8006e52 <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d11a      	bne.n	8006e3a <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e12:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d112      	bne.n	8006e52 <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	f043 0201 	orr.w	r2, r3, #1
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40
 8006e38:	e00b      	b.n	8006e52 <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	f043 0210 	orr.w	r2, r3, #16
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	f043 0201 	orr.w	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f8de 	bl	8007014 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2260      	movs	r2, #96	; 0x60
 8006e5e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6a:	2b80      	cmp	r3, #128	; 0x80
 8006e6c:	d113      	bne.n	8006e96 <HAL_ADC_IRQHandler+0x49a>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e78:	2b80      	cmp	r3, #128	; 0x80
 8006e7a:	d10c      	bne.n	8006e96 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff f94d 	bl	8006128 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2280      	movs	r2, #128	; 0x80
 8006e94:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea4:	d115      	bne.n	8006ed2 <HAL_ADC_IRQHandler+0x4d6>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb4:	d10d      	bne.n	8006ed2 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f8ba 	bl	800703c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ed0:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee0:	d115      	bne.n	8006f0e <HAL_ADC_IRQHandler+0x512>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef0:	d10d      	bne.n	8006f0e <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f8a6 	bl	8007050 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f0c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b10      	cmp	r3, #16
 8006f1a:	d151      	bne.n	8006fc0 <HAL_ADC_IRQHandler+0x5c4>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	2b10      	cmp	r3, #16
 8006f28:	d14a      	bne.n	8006fc0 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d102      	bne.n	8006f38 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8006f32:	2301      	movs	r3, #1
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	e02d      	b.n	8006f94 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f40:	d004      	beq.n	8006f4c <HAL_ADC_IRQHandler+0x550>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a03      	ldr	r2, [pc, #12]	; (8006f54 <HAL_ADC_IRQHandler+0x558>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d109      	bne.n	8006f60 <HAL_ADC_IRQHandler+0x564>
 8006f4c:	4b02      	ldr	r3, [pc, #8]	; (8006f58 <HAL_ADC_IRQHandler+0x55c>)
 8006f4e:	e008      	b.n	8006f62 <HAL_ADC_IRQHandler+0x566>
 8006f50:	50000400 	.word	0x50000400
 8006f54:	50000100 	.word	0x50000100
 8006f58:	50000300 	.word	0x50000300
 8006f5c:	50000700 	.word	0x50000700
 8006f60:	4b2b      	ldr	r3, [pc, #172]	; (8007010 <HAL_ADC_IRQHandler+0x614>)
 8006f62:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 031f 	and.w	r3, r3, #31
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d109      	bne.n	8006f84 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d10a      	bne.n	8006f94 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8006f7e:	2301      	movs	r3, #1
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	e007      	b.n	8006f94 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8006f90:	2301      	movs	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d10e      	bne.n	8006fb8 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	f043 0202 	orr.w	r2, r3, #2
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff f8c2 	bl	800613c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2210      	movs	r2, #16
 8006fbe:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fce:	d11b      	bne.n	8007008 <HAL_ADC_IRQHandler+0x60c>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fde:	d113      	bne.n	8007008 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff0:	f043 0208 	orr.w	r2, r3, #8
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007000:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f810 	bl	8007028 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8007008:	bf00      	nop
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	50000700 	.word	0x50000700

08007014 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007064:	b480      	push	{r7}
 8007066:	b09b      	sub	sp, #108	; 0x6c
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800707e:	2b01      	cmp	r3, #1
 8007080:	d101      	bne.n	8007086 <HAL_ADC_ConfigChannel+0x22>
 8007082:	2302      	movs	r3, #2
 8007084:	e2cb      	b.n	800761e <HAL_ADC_ConfigChannel+0x5ba>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	f040 82af 	bne.w	80075fc <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d81c      	bhi.n	80070e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	4413      	add	r3, r2
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	461a      	mov	r2, r3
 80070ba:	231f      	movs	r3, #31
 80070bc:	4093      	lsls	r3, r2
 80070be:	43db      	mvns	r3, r3
 80070c0:	4019      	ands	r1, r3
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	4613      	mov	r3, r2
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	4413      	add	r3, r2
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	fa00 f203 	lsl.w	r2, r0, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	631a      	str	r2, [r3, #48]	; 0x30
 80070de:	e063      	b.n	80071a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	2b09      	cmp	r3, #9
 80070e6:	d81e      	bhi.n	8007126 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	4413      	add	r3, r2
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	3b1e      	subs	r3, #30
 80070fc:	221f      	movs	r2, #31
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	43db      	mvns	r3, r3
 8007104:	4019      	ands	r1, r3
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	4413      	add	r3, r2
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	3b1e      	subs	r3, #30
 8007118:	fa00 f203 	lsl.w	r2, r0, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	635a      	str	r2, [r3, #52]	; 0x34
 8007124:	e040      	b.n	80071a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b0e      	cmp	r3, #14
 800712c:	d81e      	bhi.n	800716c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	4613      	mov	r3, r2
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	4413      	add	r3, r2
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	3b3c      	subs	r3, #60	; 0x3c
 8007142:	221f      	movs	r2, #31
 8007144:	fa02 f303 	lsl.w	r3, r2, r3
 8007148:	43db      	mvns	r3, r3
 800714a:	4019      	ands	r1, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	4613      	mov	r3, r2
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	4413      	add	r3, r2
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	3b3c      	subs	r3, #60	; 0x3c
 800715e:	fa00 f203 	lsl.w	r2, r0, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	639a      	str	r2, [r3, #56]	; 0x38
 800716a:	e01d      	b.n	80071a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	4413      	add	r3, r2
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	3b5a      	subs	r3, #90	; 0x5a
 8007180:	221f      	movs	r2, #31
 8007182:	fa02 f303 	lsl.w	r3, r2, r3
 8007186:	43db      	mvns	r3, r3
 8007188:	4019      	ands	r1, r3
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	6818      	ldr	r0, [r3, #0]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	4613      	mov	r3, r2
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	4413      	add	r3, r2
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	3b5a      	subs	r3, #90	; 0x5a
 800719c:	fa00 f203 	lsl.w	r2, r0, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 030c 	and.w	r3, r3, #12
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f040 80e5 	bne.w	8007382 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b09      	cmp	r3, #9
 80071be:	d91c      	bls.n	80071fa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6999      	ldr	r1, [r3, #24]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4613      	mov	r3, r2
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	4413      	add	r3, r2
 80071d0:	3b1e      	subs	r3, #30
 80071d2:	2207      	movs	r2, #7
 80071d4:	fa02 f303 	lsl.w	r3, r2, r3
 80071d8:	43db      	mvns	r3, r3
 80071da:	4019      	ands	r1, r3
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	6898      	ldr	r0, [r3, #8]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	4613      	mov	r3, r2
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	4413      	add	r3, r2
 80071ea:	3b1e      	subs	r3, #30
 80071ec:	fa00 f203 	lsl.w	r2, r0, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	619a      	str	r2, [r3, #24]
 80071f8:	e019      	b.n	800722e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6959      	ldr	r1, [r3, #20]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4613      	mov	r3, r2
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	4413      	add	r3, r2
 800720a:	2207      	movs	r2, #7
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	43db      	mvns	r3, r3
 8007212:	4019      	ands	r1, r3
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	6898      	ldr	r0, [r3, #8]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	4613      	mov	r3, r2
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	4413      	add	r3, r2
 8007222:	fa00 f203 	lsl.w	r2, r0, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	695a      	ldr	r2, [r3, #20]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	08db      	lsrs	r3, r3, #3
 800723a:	f003 0303 	and.w	r3, r3, #3
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	fa02 f303 	lsl.w	r3, r2, r3
 8007244:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	3b01      	subs	r3, #1
 800724c:	2b03      	cmp	r3, #3
 800724e:	d84f      	bhi.n	80072f0 <HAL_ADC_ConfigChannel+0x28c>
 8007250:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <HAL_ADC_ConfigChannel+0x1f4>)
 8007252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007256:	bf00      	nop
 8007258:	08007269 	.word	0x08007269
 800725c:	0800728b 	.word	0x0800728b
 8007260:	080072ad 	.word	0x080072ad
 8007264:	080072cf 	.word	0x080072cf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800726e:	4b9f      	ldr	r3, [pc, #636]	; (80074ec <HAL_ADC_ConfigChannel+0x488>)
 8007270:	4013      	ands	r3, r2
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	0691      	lsls	r1, r2, #26
 8007278:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800727a:	430a      	orrs	r2, r1
 800727c:	431a      	orrs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007286:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8007288:	e07e      	b.n	8007388 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007290:	4b96      	ldr	r3, [pc, #600]	; (80074ec <HAL_ADC_ConfigChannel+0x488>)
 8007292:	4013      	ands	r3, r2
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	6812      	ldr	r2, [r2, #0]
 8007298:	0691      	lsls	r1, r2, #26
 800729a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800729c:	430a      	orrs	r2, r1
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80072a8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80072aa:	e06d      	b.n	8007388 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80072b2:	4b8e      	ldr	r3, [pc, #568]	; (80074ec <HAL_ADC_ConfigChannel+0x488>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	6812      	ldr	r2, [r2, #0]
 80072ba:	0691      	lsls	r1, r2, #26
 80072bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072be:	430a      	orrs	r2, r1
 80072c0:	431a      	orrs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80072ca:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80072cc:	e05c      	b.n	8007388 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80072d4:	4b85      	ldr	r3, [pc, #532]	; (80074ec <HAL_ADC_ConfigChannel+0x488>)
 80072d6:	4013      	ands	r3, r2
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	0691      	lsls	r1, r2, #26
 80072de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072e0:	430a      	orrs	r2, r1
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80072ec:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80072ee:	e04b      	b.n	8007388 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	069b      	lsls	r3, r3, #26
 8007300:	429a      	cmp	r2, r3
 8007302:	d107      	bne.n	8007314 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007312:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800731a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	069b      	lsls	r3, r3, #26
 8007324:	429a      	cmp	r2, r3
 8007326:	d107      	bne.n	8007338 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007336:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800733e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	069b      	lsls	r3, r3, #26
 8007348:	429a      	cmp	r2, r3
 800734a:	d107      	bne.n	800735c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800735a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007362:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	069b      	lsls	r3, r3, #26
 800736c:	429a      	cmp	r2, r3
 800736e:	d10a      	bne.n	8007386 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800737e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8007380:	e001      	b.n	8007386 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8007382:	bf00      	nop
 8007384:	e000      	b.n	8007388 <HAL_ADC_ConfigChannel+0x324>
      break;
 8007386:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	2b01      	cmp	r3, #1
 8007394:	d108      	bne.n	80073a8 <HAL_ADC_ConfigChannel+0x344>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <HAL_ADC_ConfigChannel+0x344>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e000      	b.n	80073aa <HAL_ADC_ConfigChannel+0x346>
 80073a8:	2300      	movs	r3, #0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f040 8131 	bne.w	8007612 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d00f      	beq.n	80073d8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2201      	movs	r2, #1
 80073c6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ca:	43da      	mvns	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	400a      	ands	r2, r1
 80073d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80073d6:	e049      	b.n	800746c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2201      	movs	r2, #1
 80073e6:	409a      	lsls	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b09      	cmp	r3, #9
 80073f8:	d91c      	bls.n	8007434 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6999      	ldr	r1, [r3, #24]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	4613      	mov	r3, r2
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	4413      	add	r3, r2
 800740a:	3b1b      	subs	r3, #27
 800740c:	2207      	movs	r2, #7
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	43db      	mvns	r3, r3
 8007414:	4019      	ands	r1, r3
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6898      	ldr	r0, [r3, #8]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	4613      	mov	r3, r2
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	4413      	add	r3, r2
 8007424:	3b1b      	subs	r3, #27
 8007426:	fa00 f203 	lsl.w	r2, r0, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	619a      	str	r2, [r3, #24]
 8007432:	e01b      	b.n	800746c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6959      	ldr	r1, [r3, #20]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	4613      	mov	r3, r2
 8007442:	005b      	lsls	r3, r3, #1
 8007444:	4413      	add	r3, r2
 8007446:	2207      	movs	r2, #7
 8007448:	fa02 f303 	lsl.w	r3, r2, r3
 800744c:	43db      	mvns	r3, r3
 800744e:	4019      	ands	r1, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	6898      	ldr	r0, [r3, #8]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	4613      	mov	r3, r2
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	4413      	add	r3, r2
 8007460:	fa00 f203 	lsl.w	r2, r0, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007474:	d004      	beq.n	8007480 <HAL_ADC_ConfigChannel+0x41c>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1d      	ldr	r2, [pc, #116]	; (80074f0 <HAL_ADC_ConfigChannel+0x48c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d101      	bne.n	8007484 <HAL_ADC_ConfigChannel+0x420>
 8007480:	4b1c      	ldr	r3, [pc, #112]	; (80074f4 <HAL_ADC_ConfigChannel+0x490>)
 8007482:	e000      	b.n	8007486 <HAL_ADC_ConfigChannel+0x422>
 8007484:	4b1c      	ldr	r3, [pc, #112]	; (80074f8 <HAL_ADC_ConfigChannel+0x494>)
 8007486:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b10      	cmp	r3, #16
 800748e:	d105      	bne.n	800749c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8007490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007498:	2b00      	cmp	r3, #0
 800749a:	d015      	beq.n	80074c8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80074a0:	2b11      	cmp	r3, #17
 80074a2:	d105      	bne.n	80074b0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80074a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00b      	beq.n	80074c8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80074b4:	2b12      	cmp	r3, #18
 80074b6:	f040 80ac 	bne.w	8007612 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80074ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f040 80a5 	bne.w	8007612 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074d0:	d102      	bne.n	80074d8 <HAL_ADC_ConfigChannel+0x474>
 80074d2:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <HAL_ADC_ConfigChannel+0x48c>)
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	e023      	b.n	8007520 <HAL_ADC_ConfigChannel+0x4bc>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a04      	ldr	r2, [pc, #16]	; (80074f0 <HAL_ADC_ConfigChannel+0x48c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d10c      	bne.n	80074fc <HAL_ADC_ConfigChannel+0x498>
 80074e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	e01a      	b.n	8007520 <HAL_ADC_ConfigChannel+0x4bc>
 80074ea:	bf00      	nop
 80074ec:	83fff000 	.word	0x83fff000
 80074f0:	50000100 	.word	0x50000100
 80074f4:	50000300 	.word	0x50000300
 80074f8:	50000700 	.word	0x50000700
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a4a      	ldr	r2, [pc, #296]	; (800762c <HAL_ADC_ConfigChannel+0x5c8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d102      	bne.n	800750c <HAL_ADC_ConfigChannel+0x4a8>
 8007506:	4b4a      	ldr	r3, [pc, #296]	; (8007630 <HAL_ADC_ConfigChannel+0x5cc>)
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	e009      	b.n	8007520 <HAL_ADC_ConfigChannel+0x4bc>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a47      	ldr	r2, [pc, #284]	; (8007630 <HAL_ADC_ConfigChannel+0x5cc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d102      	bne.n	800751c <HAL_ADC_ConfigChannel+0x4b8>
 8007516:	4b45      	ldr	r3, [pc, #276]	; (800762c <HAL_ADC_ConfigChannel+0x5c8>)
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	e001      	b.n	8007520 <HAL_ADC_ConfigChannel+0x4bc>
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	2b01      	cmp	r3, #1
 800752c:	d108      	bne.n	8007540 <HAL_ADC_ConfigChannel+0x4dc>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b01      	cmp	r3, #1
 800753a:	d101      	bne.n	8007540 <HAL_ADC_ConfigChannel+0x4dc>
 800753c:	2301      	movs	r3, #1
 800753e:	e000      	b.n	8007542 <HAL_ADC_ConfigChannel+0x4de>
 8007540:	2300      	movs	r3, #0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d150      	bne.n	80075e8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007546:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8007548:	2b00      	cmp	r3, #0
 800754a:	d010      	beq.n	800756e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	2b01      	cmp	r3, #1
 8007556:	d107      	bne.n	8007568 <HAL_ADC_ConfigChannel+0x504>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_ADC_ConfigChannel+0x504>
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <HAL_ADC_ConfigChannel+0x506>
 8007568:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800756a:	2b00      	cmp	r3, #0
 800756c:	d13c      	bne.n	80075e8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b10      	cmp	r3, #16
 8007574:	d11d      	bne.n	80075b2 <HAL_ADC_ConfigChannel+0x54e>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800757e:	d118      	bne.n	80075b2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8007580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800758a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800758c:	4b29      	ldr	r3, [pc, #164]	; (8007634 <HAL_ADC_ConfigChannel+0x5d0>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a29      	ldr	r2, [pc, #164]	; (8007638 <HAL_ADC_ConfigChannel+0x5d4>)
 8007592:	fba2 2303 	umull	r2, r3, r2, r3
 8007596:	0c9a      	lsrs	r2, r3, #18
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80075a2:	e002      	b.n	80075aa <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1f9      	bne.n	80075a4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80075b0:	e02e      	b.n	8007610 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b11      	cmp	r3, #17
 80075b8:	d10b      	bne.n	80075d2 <HAL_ADC_ConfigChannel+0x56e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075c2:	d106      	bne.n	80075d2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80075c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80075cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80075d0:	e01e      	b.n	8007610 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b12      	cmp	r3, #18
 80075d8:	d11a      	bne.n	8007610 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80075da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80075e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075e4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80075e6:	e013      	b.n	8007610 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ec:	f043 0220 	orr.w	r2, r3, #32
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075fa:	e00a      	b.n	8007612 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	f043 0220 	orr.w	r2, r3, #32
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800760e:	e000      	b.n	8007612 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8007610:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800761a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800761e:	4618      	mov	r0, r3
 8007620:	376c      	adds	r7, #108	; 0x6c
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	50000400 	.word	0x50000400
 8007630:	50000500 	.word	0x50000500
 8007634:	20000020 	.word	0x20000020
 8007638:	431bde83 	.word	0x431bde83

0800763c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800763c:	b480      	push	{r7}
 800763e:	b099      	sub	sp, #100	; 0x64
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007654:	d102      	bne.n	800765c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8007656:	4b6d      	ldr	r3, [pc, #436]	; (800780c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8007658:	60bb      	str	r3, [r7, #8]
 800765a:	e01a      	b.n	8007692 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a6a      	ldr	r2, [pc, #424]	; (800780c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d103      	bne.n	800766e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8007666:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800766a:	60bb      	str	r3, [r7, #8]
 800766c:	e011      	b.n	8007692 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a67      	ldr	r2, [pc, #412]	; (8007810 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d102      	bne.n	800767e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007678:	4b66      	ldr	r3, [pc, #408]	; (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800767a:	60bb      	str	r3, [r7, #8]
 800767c:	e009      	b.n	8007692 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a64      	ldr	r2, [pc, #400]	; (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d102      	bne.n	800768e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007688:	4b61      	ldr	r3, [pc, #388]	; (8007810 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800768a:	60bb      	str	r3, [r7, #8]
 800768c:	e001      	b.n	8007692 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800768e:	2300      	movs	r3, #0
 8007690:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e0b0      	b.n	80077fe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e0a9      	b.n	80077fe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f040 808d 	bne.w	80077dc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f003 0304 	and.w	r3, r3, #4
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f040 8086 	bne.w	80077dc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076d8:	d004      	beq.n	80076e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a4b      	ldr	r2, [pc, #300]	; (800780c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d101      	bne.n	80076e8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80076e4:	4b4c      	ldr	r3, [pc, #304]	; (8007818 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80076e6:	e000      	b.n	80076ea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80076e8:	4b4c      	ldr	r3, [pc, #304]	; (800781c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80076ea:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d040      	beq.n	8007776 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80076f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	6859      	ldr	r1, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007706:	035b      	lsls	r3, r3, #13
 8007708:	430b      	orrs	r3, r1
 800770a:	431a      	orrs	r2, r3
 800770c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800770e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	2b01      	cmp	r3, #1
 800771c:	d108      	bne.n	8007730 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b01      	cmp	r3, #1
 800772a:	d101      	bne.n	8007730 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8007730:	2300      	movs	r3, #0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d15c      	bne.n	80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 0303 	and.w	r3, r3, #3
 800773e:	2b01      	cmp	r3, #1
 8007740:	d107      	bne.n	8007752 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b01      	cmp	r3, #1
 800774c:	d101      	bne.n	8007752 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8007752:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8007754:	2b00      	cmp	r3, #0
 8007756:	d14b      	bne.n	80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8007758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007760:	f023 030f 	bic.w	r3, r3, #15
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	6811      	ldr	r1, [r2, #0]
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	6892      	ldr	r2, [r2, #8]
 800776c:	430a      	orrs	r2, r1
 800776e:	431a      	orrs	r2, r3
 8007770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007772:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8007774:	e03c      	b.n	80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800777e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007780:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f003 0303 	and.w	r3, r3, #3
 800778c:	2b01      	cmp	r3, #1
 800778e:	d108      	bne.n	80077a2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b01      	cmp	r3, #1
 800779c:	d101      	bne.n	80077a2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800779e:	2301      	movs	r3, #1
 80077a0:	e000      	b.n	80077a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80077a2:	2300      	movs	r3, #0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d123      	bne.n	80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 0303 	and.w	r3, r3, #3
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d107      	bne.n	80077c4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80077c4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d112      	bne.n	80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80077ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80077d2:	f023 030f 	bic.w	r3, r3, #15
 80077d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077d8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80077da:	e009      	b.n	80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e0:	f043 0220 	orr.w	r2, r3, #32
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80077ee:	e000      	b.n	80077f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80077f0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80077fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80077fe:	4618      	mov	r0, r3
 8007800:	3764      	adds	r7, #100	; 0x64
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	50000100 	.word	0x50000100
 8007810:	50000400 	.word	0x50000400
 8007814:	50000500 	.word	0x50000500
 8007818:	50000300 	.word	0x50000300
 800781c:	50000700 	.word	0x50000700

08007820 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	2b01      	cmp	r3, #1
 8007838:	d108      	bne.n	800784c <ADC_Enable+0x2c>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <ADC_Enable+0x2c>
 8007848:	2301      	movs	r3, #1
 800784a:	e000      	b.n	800784e <ADC_Enable+0x2e>
 800784c:	2300      	movs	r3, #0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d143      	bne.n	80078da <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	4b22      	ldr	r3, [pc, #136]	; (80078e4 <ADC_Enable+0xc4>)
 800785a:	4013      	ands	r3, r2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00d      	beq.n	800787c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007864:	f043 0210 	orr.w	r2, r3, #16
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007870:	f043 0201 	orr.w	r2, r3, #1
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e02f      	b.n	80078dc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689a      	ldr	r2, [r3, #8]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0201 	orr.w	r2, r2, #1
 800788a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800788c:	f7fe fc14 	bl	80060b8 <HAL_GetTick>
 8007890:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007892:	e01b      	b.n	80078cc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007894:	f7fe fc10 	bl	80060b8 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d914      	bls.n	80078cc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d00d      	beq.n	80078cc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	f043 0210 	orr.w	r2, r3, #16
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c0:	f043 0201 	orr.w	r2, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e007      	b.n	80078dc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d1dc      	bne.n	8007894 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	8000003f 	.word	0x8000003f

080078e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d108      	bne.n	8007914 <ADC_Disable+0x2c>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <ADC_Disable+0x2c>
 8007910:	2301      	movs	r3, #1
 8007912:	e000      	b.n	8007916 <ADC_Disable+0x2e>
 8007914:	2300      	movs	r3, #0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d047      	beq.n	80079aa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 030d 	and.w	r3, r3, #13
 8007924:	2b01      	cmp	r3, #1
 8007926:	d10f      	bne.n	8007948 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0202 	orr.w	r2, r2, #2
 8007936:	609a      	str	r2, [r3, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2203      	movs	r2, #3
 800793e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8007940:	f7fe fbba 	bl	80060b8 <HAL_GetTick>
 8007944:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007946:	e029      	b.n	800799c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794c:	f043 0210 	orr.w	r2, r3, #16
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007958:	f043 0201 	orr.w	r2, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e023      	b.n	80079ac <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007964:	f7fe fba8 	bl	80060b8 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d914      	bls.n	800799c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10d      	bne.n	800799c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	f043 0210 	orr.w	r2, r3, #16
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007990:	f043 0201 	orr.w	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e007      	b.n	80079ac <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d0dc      	beq.n	8007964 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f003 030c 	and.w	r3, r3, #12
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 809a 	beq.w	8007b0e <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079e8:	d12a      	bne.n	8007a40 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d126      	bne.n	8007a40 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d122      	bne.n	8007a40 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80079fa:	230c      	movs	r3, #12
 80079fc:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80079fe:	e014      	b.n	8007a2a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	4a45      	ldr	r2, [pc, #276]	; (8007b18 <ADC_ConversionStop+0x164>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d90d      	bls.n	8007a24 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	f043 0210 	orr.w	r2, r3, #16
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a18:	f043 0201 	orr.w	r2, r3, #1
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e075      	b.n	8007b10 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	3301      	adds	r3, #1
 8007a28:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a34:	2b40      	cmp	r3, #64	; 0x40
 8007a36:	d1e3      	bne.n	8007a00 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2240      	movs	r2, #64	; 0x40
 8007a3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b60      	cmp	r3, #96	; 0x60
 8007a44:	d015      	beq.n	8007a72 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d10e      	bne.n	8007a72 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d107      	bne.n	8007a72 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0210 	orr.w	r2, r2, #16
 8007a70:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b0c      	cmp	r3, #12
 8007a76:	d015      	beq.n	8007aa4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 0308 	and.w	r3, r3, #8
 8007a82:	2b08      	cmp	r3, #8
 8007a84:	d10e      	bne.n	8007aa4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d107      	bne.n	8007aa4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0220 	orr.w	r2, r2, #32
 8007aa2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b60      	cmp	r3, #96	; 0x60
 8007aa8:	d004      	beq.n	8007ab4 <ADC_ConversionStop+0x100>
 8007aaa:	2b6c      	cmp	r3, #108	; 0x6c
 8007aac:	d105      	bne.n	8007aba <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007aae:	230c      	movs	r3, #12
 8007ab0:	617b      	str	r3, [r7, #20]
        break;
 8007ab2:	e005      	b.n	8007ac0 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007ab4:	2308      	movs	r3, #8
 8007ab6:	617b      	str	r3, [r7, #20]
        break;
 8007ab8:	e002      	b.n	8007ac0 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007aba:	2304      	movs	r3, #4
 8007abc:	617b      	str	r3, [r7, #20]
        break;
 8007abe:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007ac0:	f7fe fafa 	bl	80060b8 <HAL_GetTick>
 8007ac4:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8007ac6:	e01b      	b.n	8007b00 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007ac8:	f7fe faf6 	bl	80060b8 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b0b      	cmp	r3, #11
 8007ad4:	d914      	bls.n	8007b00 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00d      	beq.n	8007b00 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae8:	f043 0210 	orr.w	r2, r3, #16
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af4:	f043 0201 	orr.w	r2, r3, #1
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e007      	b.n	8007b10 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689a      	ldr	r2, [r3, #8]
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	4013      	ands	r3, r2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1dc      	bne.n	8007ac8 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	000993ff 	.word	0x000993ff

08007b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <__NVIC_SetPriorityGrouping+0x44>)
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b38:	4013      	ands	r3, r2
 8007b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b4e:	4a04      	ldr	r2, [pc, #16]	; (8007b60 <__NVIC_SetPriorityGrouping+0x44>)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	60d3      	str	r3, [r2, #12]
}
 8007b54:	bf00      	nop
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	e000ed00 	.word	0xe000ed00

08007b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b64:	b480      	push	{r7}
 8007b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b68:	4b04      	ldr	r3, [pc, #16]	; (8007b7c <__NVIC_GetPriorityGrouping+0x18>)
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	0a1b      	lsrs	r3, r3, #8
 8007b6e:	f003 0307 	and.w	r3, r3, #7
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	e000ed00 	.word	0xe000ed00

08007b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	db0b      	blt.n	8007baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	f003 021f 	and.w	r2, r3, #31
 8007b98:	4907      	ldr	r1, [pc, #28]	; (8007bb8 <__NVIC_EnableIRQ+0x38>)
 8007b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9e:	095b      	lsrs	r3, r3, #5
 8007ba0:	2001      	movs	r0, #1
 8007ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	e000e100 	.word	0xe000e100

08007bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	6039      	str	r1, [r7, #0]
 8007bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	db0a      	blt.n	8007be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	490c      	ldr	r1, [pc, #48]	; (8007c08 <__NVIC_SetPriority+0x4c>)
 8007bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bda:	0112      	lsls	r2, r2, #4
 8007bdc:	b2d2      	uxtb	r2, r2
 8007bde:	440b      	add	r3, r1
 8007be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007be4:	e00a      	b.n	8007bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	4908      	ldr	r1, [pc, #32]	; (8007c0c <__NVIC_SetPriority+0x50>)
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	f003 030f 	and.w	r3, r3, #15
 8007bf2:	3b04      	subs	r3, #4
 8007bf4:	0112      	lsls	r2, r2, #4
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	761a      	strb	r2, [r3, #24]
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	e000e100 	.word	0xe000e100
 8007c0c:	e000ed00 	.word	0xe000ed00

08007c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b089      	sub	sp, #36	; 0x24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f003 0307 	and.w	r3, r3, #7
 8007c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	f1c3 0307 	rsb	r3, r3, #7
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	bf28      	it	cs
 8007c2e:	2304      	movcs	r3, #4
 8007c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	3304      	adds	r3, #4
 8007c36:	2b06      	cmp	r3, #6
 8007c38:	d902      	bls.n	8007c40 <NVIC_EncodePriority+0x30>
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	3b03      	subs	r3, #3
 8007c3e:	e000      	b.n	8007c42 <NVIC_EncodePriority+0x32>
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c44:	f04f 32ff 	mov.w	r2, #4294967295
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4e:	43da      	mvns	r2, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	401a      	ands	r2, r3
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c58:	f04f 31ff 	mov.w	r1, #4294967295
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c62:	43d9      	mvns	r1, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c68:	4313      	orrs	r3, r2
         );
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3724      	adds	r7, #36	; 0x24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c88:	d301      	bcc.n	8007c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e00f      	b.n	8007cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c8e:	4a0a      	ldr	r2, [pc, #40]	; (8007cb8 <SysTick_Config+0x40>)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c96:	210f      	movs	r1, #15
 8007c98:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9c:	f7ff ff8e 	bl	8007bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ca0:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <SysTick_Config+0x40>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ca6:	4b04      	ldr	r3, [pc, #16]	; (8007cb8 <SysTick_Config+0x40>)
 8007ca8:	2207      	movs	r2, #7
 8007caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	e000e010 	.word	0xe000e010

08007cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff ff29 	bl	8007b1c <__NVIC_SetPriorityGrouping>
}
 8007cca:	bf00      	nop
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b086      	sub	sp, #24
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	4603      	mov	r3, r0
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	607a      	str	r2, [r7, #4]
 8007cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ce4:	f7ff ff3e 	bl	8007b64 <__NVIC_GetPriorityGrouping>
 8007ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	6978      	ldr	r0, [r7, #20]
 8007cf0:	f7ff ff8e 	bl	8007c10 <NVIC_EncodePriority>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff ff5d 	bl	8007bbc <__NVIC_SetPriority>
}
 8007d02:	bf00      	nop
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	4603      	mov	r3, r0
 8007d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff ff31 	bl	8007b80 <__NVIC_EnableIRQ>
}
 8007d1e:	bf00      	nop
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7ff ffa2 	bl	8007c78 <SysTick_Config>
 8007d34:	4603      	mov	r3, r0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e014      	b.n	8007d7a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	791b      	ldrb	r3, [r3, #4]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d105      	bne.n	8007d66 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7fd ff4d 	bl	8005c00 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6819      	ldr	r1, [r3, #0]
 8007d92:	2201      	movs	r2, #1
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9a:	43da      	mvns	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	400a      	ands	r2, r1
 8007da2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6819      	ldr	r1, [r3, #0]
 8007dcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd6:	43da      	mvns	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	400a      	ands	r2, r1
 8007dde:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6819      	ldr	r1, [r3, #0]
 8007de6:	2201      	movs	r2, #1
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	fa02 f303 	lsl.w	r3, r2, r3
 8007dee:	43da      	mvns	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	400a      	ands	r2, r1
 8007df6:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10f      	bne.n	8007e1e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fae3 	bl	80083ce <HAL_DMA_Abort>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	e00e      	b.n	8007e3c <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fad3 	bl	80083ce <HAL_DMA_Abort>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007e3a:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2204      	movs	r2, #4
 8007e46:	711a      	strb	r2, [r3, #4]
 8007e48:	e002      	b.n	8007e50 <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8007e96:	b480      	push	{r7}
 8007e98:	b087      	sub	sp, #28
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
 8007ea2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d105      	bne.n	8007ec0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4413      	add	r3, r2
 8007eba:	3308      	adds	r3, #8
 8007ebc:	617b      	str	r3, [r7, #20]
 8007ebe:	e004      	b.n	8007eca <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	3314      	adds	r3, #20
 8007ec8:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	371c      	adds	r7, #28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	795b      	ldrb	r3, [r3, #5]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d101      	bne.n	8007ef6 <HAL_DAC_Start+0x16>
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e039      	b.n	8007f6a <HAL_DAC_Start+0x8a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2202      	movs	r2, #2
 8007f00:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6819      	ldr	r1, [r3, #0]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	409a      	lsls	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10f      	bne.n	8007f3c <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007f26:	2b3c      	cmp	r3, #60	; 0x3c
 8007f28:	d118      	bne.n	8007f5c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f042 0201 	orr.w	r2, r2, #1
 8007f38:	605a      	str	r2, [r3, #4]
 8007f3a:	e00f      	b.n	8007f5c <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007f46:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8007f4a:	d107      	bne.n	8007f5c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0202 	orr.w	r2, r2, #2
 8007f5a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
	...

08007f78 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	795b      	ldrb	r3, [r3, #5]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <HAL_DAC_Start_DMA+0x1e>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e08e      	b.n	80080b4 <HAL_DAC_Start_DMA+0x13c>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d12a      	bne.n	8007ffe <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	4a43      	ldr	r2, [pc, #268]	; (80080bc <HAL_DAC_Start_DMA+0x144>)
 8007fae:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	4a42      	ldr	r2, [pc, #264]	; (80080c0 <HAL_DAC_Start_DMA+0x148>)
 8007fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	4a41      	ldr	r2, [pc, #260]	; (80080c4 <HAL_DAC_Start_DMA+0x14c>)
 8007fbe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fce:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	d009      	beq.n	8007fea <HAL_DAC_Start_DMA+0x72>
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d00c      	beq.n	8007ff4 <HAL_DAC_Start_DMA+0x7c>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d000      	beq.n	8007fe0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8007fde:	e039      	b.n	8008054 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	617b      	str	r3, [r7, #20]
        break;
 8007fe8:	e034      	b.n	8008054 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	330c      	adds	r3, #12
 8007ff0:	617b      	str	r3, [r7, #20]
        break;
 8007ff2:	e02f      	b.n	8008054 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3310      	adds	r3, #16
 8007ffa:	617b      	str	r3, [r7, #20]
        break;
 8007ffc:	e02a      	b.n	8008054 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	4a31      	ldr	r2, [pc, #196]	; (80080c8 <HAL_DAC_Start_DMA+0x150>)
 8008004:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	4a30      	ldr	r2, [pc, #192]	; (80080cc <HAL_DAC_Start_DMA+0x154>)
 800800c:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	4a2f      	ldr	r2, [pc, #188]	; (80080d0 <HAL_DAC_Start_DMA+0x158>)
 8008014:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008024:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	2b04      	cmp	r3, #4
 800802a:	d009      	beq.n	8008040 <HAL_DAC_Start_DMA+0xc8>
 800802c:	2b08      	cmp	r3, #8
 800802e:	d00c      	beq.n	800804a <HAL_DAC_Start_DMA+0xd2>
 8008030:	2b00      	cmp	r3, #0
 8008032:	d000      	beq.n	8008036 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8008034:	e00e      	b.n	8008054 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3314      	adds	r3, #20
 800803c:	617b      	str	r3, [r7, #20]
        break;
 800803e:	e009      	b.n	8008054 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3318      	adds	r3, #24
 8008046:	617b      	str	r3, [r7, #20]
        break;
 8008048:	e004      	b.n	8008054 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	331c      	adds	r3, #28
 8008050:	617b      	str	r3, [r7, #20]
        break;
 8008052:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10f      	bne.n	800807a <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008068:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6898      	ldr	r0, [r3, #8]
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	f000 f94c 	bl	8008310 <HAL_DMA_Start_IT>
 8008078:	e00e      	b.n	8008098 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008088:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	68d8      	ldr	r0, [r3, #12]
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	f000 f93c 	bl	8008310 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6819      	ldr	r1, [r3, #0]
 80080a4:	2201      	movs	r2, #1
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	409a      	lsls	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	080081ab 	.word	0x080081ab
 80080c0:	080081cd 	.word	0x080081cd
 80080c4:	080081e9 	.word	0x080081e9
 80080c8:	08008217 	.word	0x08008217
 80080cc:	08008239 	.word	0x08008239
 80080d0:	08008255 	.word	0x08008255

080080d4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	2300      	movs	r3, #0
 80080e6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	795b      	ldrb	r3, [r3, #5]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d101      	bne.n	80080f4 <HAL_DAC_ConfigChannel+0x20>
 80080f0:	2302      	movs	r3, #2
 80080f2:	e036      	b.n	8008162 <HAL_DAC_ConfigChannel+0x8e>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2202      	movs	r2, #2
 80080fe:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8008108:	f640 72fe 	movw	r2, #4094	; 0xffe
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	fa02 f303 	lsl.w	r3, r2, r3
 8008112:	43db      	mvns	r3, r3
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4013      	ands	r3, r2
 8008118:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	fa02 f303 	lsl.w	r3, r2, r3
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	4313      	orrs	r3, r2
 8008132:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6819      	ldr	r1, [r3, #0]
 8008142:	22c0      	movs	r2, #192	; 0xc0
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	43da      	mvns	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	400a      	ands	r2, r1
 8008152:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2201      	movs	r2, #1
 8008158:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	371c      	adds	r7, #28
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f7ff fe4e 	bl	8007e5a <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	711a      	strb	r2, [r3, #4]
}
 80081c4:	bf00      	nop
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f7ff fe47 	bl	8007e6e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 80081e0:	bf00      	nop
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f043 0204 	orr.w	r2, r3, #4
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f7ff fe3d 	bl	8007e82 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	711a      	strb	r2, [r3, #4]
}
 800820e:	bf00      	nop
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff ffa2 	bl	800816e <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2201      	movs	r2, #1
 800822e:	711a      	strb	r2, [r3, #4]
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f7ff ff9b 	bl	8008182 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 800824c:	bf00      	nop
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	f043 0204 	orr.w	r2, r3, #4
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f7ff ff91 	bl	8008196 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2201      	movs	r2, #1
 8008278:	711a      	strb	r2, [r3, #4]
}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e037      	b.n	8008308 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80082ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80082b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80082bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f9b8 	bl	8008660 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}  
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
 800831c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d101      	bne.n	8008330 <HAL_DMA_Start_IT+0x20>
 800832c:	2302      	movs	r3, #2
 800832e:	e04a      	b.n	80083c6 <HAL_DMA_Start_IT+0xb6>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800833e:	2b01      	cmp	r3, #1
 8008340:	d13a      	bne.n	80083b8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2202      	movs	r2, #2
 8008346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0201 	bic.w	r2, r2, #1
 800835e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 f94b 	bl	8008602 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d008      	beq.n	8008386 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 020e 	orr.w	r2, r2, #14
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	e00f      	b.n	80083a6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 020a 	orr.w	r2, r2, #10
 8008394:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0204 	bic.w	r2, r2, #4
 80083a4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f042 0201 	orr.w	r2, r2, #1
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	e005      	b.n	80083c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80083c0:	2302      	movs	r3, #2
 80083c2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b083      	sub	sp, #12
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d008      	beq.n	80083f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2204      	movs	r2, #4
 80083e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e020      	b.n	8008434 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 020e 	bic.w	r2, r2, #14
 8008400:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 0201 	bic.w	r2, r2, #1
 8008410:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	2101      	movs	r1, #1
 800841c:	fa01 f202 	lsl.w	r2, r1, r2
 8008420:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008452:	2b02      	cmp	r3, #2
 8008454:	d005      	beq.n	8008462 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2204      	movs	r2, #4
 800845a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	73fb      	strb	r3, [r7, #15]
 8008460:	e027      	b.n	80084b2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 020e 	bic.w	r2, r2, #14
 8008470:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0201 	bic.w	r2, r2, #1
 8008480:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848a:	2101      	movs	r1, #1
 800848c:	fa01 f202 	lsl.w	r2, r1, r2
 8008490:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
    } 
  }
  return status;
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	2204      	movs	r2, #4
 80084da:	409a      	lsls	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4013      	ands	r3, r2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d024      	beq.n	800852e <HAL_DMA_IRQHandler+0x72>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f003 0304 	and.w	r3, r3, #4
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d01f      	beq.n	800852e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0320 	and.w	r3, r3, #32
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d107      	bne.n	800850c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0204 	bic.w	r2, r2, #4
 800850a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008514:	2104      	movs	r1, #4
 8008516:	fa01 f202 	lsl.w	r2, r1, r2
 800851a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d06a      	beq.n	80085fa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800852c:	e065      	b.n	80085fa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008532:	2202      	movs	r2, #2
 8008534:	409a      	lsls	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4013      	ands	r3, r2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d02c      	beq.n	8008598 <HAL_DMA_IRQHandler+0xdc>
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f003 0302 	and.w	r3, r3, #2
 8008544:	2b00      	cmp	r3, #0
 8008546:	d027      	beq.n	8008598 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10b      	bne.n	800856e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 020a 	bic.w	r2, r2, #10
 8008564:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008576:	2102      	movs	r1, #2
 8008578:	fa01 f202 	lsl.w	r2, r1, r2
 800857c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858a:	2b00      	cmp	r3, #0
 800858c:	d035      	beq.n	80085fa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8008596:	e030      	b.n	80085fa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859c:	2208      	movs	r2, #8
 800859e:	409a      	lsls	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4013      	ands	r3, r2
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d028      	beq.n	80085fa <HAL_DMA_IRQHandler+0x13e>
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d023      	beq.n	80085fa <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 020e 	bic.w	r2, r2, #14
 80085c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ca:	2101      	movs	r1, #1
 80085cc:	fa01 f202 	lsl.w	r2, r1, r2
 80085d0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d004      	beq.n	80085fa <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	4798      	blx	r3
    }
  }
}  
 80085f8:	e7ff      	b.n	80085fa <HAL_DMA_IRQHandler+0x13e>
 80085fa:	bf00      	nop
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008602:	b480      	push	{r7}
 8008604:	b085      	sub	sp, #20
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008618:	2101      	movs	r1, #1
 800861a:	fa01 f202 	lsl.w	r2, r1, r2
 800861e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	2b10      	cmp	r3, #16
 800862e:	d108      	bne.n	8008642 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008640:	e007      	b.n	8008652 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	60da      	str	r2, [r3, #12]
}
 8008652:	bf00      	nop
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
	...

08008660 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <DMA_CalcBaseAndBitshift+0x60>)
 8008670:	429a      	cmp	r2, r3
 8008672:	d80f      	bhi.n	8008694 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	4b12      	ldr	r3, [pc, #72]	; (80086c4 <DMA_CalcBaseAndBitshift+0x64>)
 800867c:	4413      	add	r3, r2
 800867e:	4a12      	ldr	r2, [pc, #72]	; (80086c8 <DMA_CalcBaseAndBitshift+0x68>)
 8008680:	fba2 2303 	umull	r2, r3, r2, r3
 8008684:	091b      	lsrs	r3, r3, #4
 8008686:	009a      	lsls	r2, r3, #2
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a0f      	ldr	r2, [pc, #60]	; (80086cc <DMA_CalcBaseAndBitshift+0x6c>)
 8008690:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8008692:	e00e      	b.n	80086b2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	461a      	mov	r2, r3
 800869a:	4b0d      	ldr	r3, [pc, #52]	; (80086d0 <DMA_CalcBaseAndBitshift+0x70>)
 800869c:	4413      	add	r3, r2
 800869e:	4a0a      	ldr	r2, [pc, #40]	; (80086c8 <DMA_CalcBaseAndBitshift+0x68>)
 80086a0:	fba2 2303 	umull	r2, r3, r2, r3
 80086a4:	091b      	lsrs	r3, r3, #4
 80086a6:	009a      	lsls	r2, r3, #2
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a09      	ldr	r2, [pc, #36]	; (80086d4 <DMA_CalcBaseAndBitshift+0x74>)
 80086b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	40020407 	.word	0x40020407
 80086c4:	bffdfff8 	.word	0xbffdfff8
 80086c8:	cccccccd 	.word	0xcccccccd
 80086cc:	40020000 	.word	0x40020000
 80086d0:	bffdfbf8 	.word	0xbffdfbf8
 80086d4:	40020400 	.word	0x40020400

080086d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086d8:	b480      	push	{r7}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086e6:	e160      	b.n	80089aa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	2101      	movs	r1, #1
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	fa01 f303 	lsl.w	r3, r1, r3
 80086f4:	4013      	ands	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f000 8152 	beq.w	80089a4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f003 0303 	and.w	r3, r3, #3
 8008708:	2b01      	cmp	r3, #1
 800870a:	d005      	beq.n	8008718 <HAL_GPIO_Init+0x40>
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f003 0303 	and.w	r3, r3, #3
 8008714:	2b02      	cmp	r3, #2
 8008716:	d130      	bne.n	800877a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	2203      	movs	r2, #3
 8008724:	fa02 f303 	lsl.w	r3, r2, r3
 8008728:	43db      	mvns	r3, r3
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	4013      	ands	r3, r2
 800872e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	fa02 f303 	lsl.w	r3, r2, r3
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	4313      	orrs	r3, r2
 8008740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800874e:	2201      	movs	r2, #1
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	fa02 f303 	lsl.w	r3, r2, r3
 8008756:	43db      	mvns	r3, r3
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4013      	ands	r3, r2
 800875c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	091b      	lsrs	r3, r3, #4
 8008764:	f003 0201 	and.w	r2, r3, #1
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	fa02 f303 	lsl.w	r3, r2, r3
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f003 0303 	and.w	r3, r3, #3
 8008782:	2b03      	cmp	r3, #3
 8008784:	d017      	beq.n	80087b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	005b      	lsls	r3, r3, #1
 8008790:	2203      	movs	r2, #3
 8008792:	fa02 f303 	lsl.w	r3, r2, r3
 8008796:	43db      	mvns	r3, r3
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	4013      	ands	r3, r2
 800879c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	689a      	ldr	r2, [r3, #8]
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	005b      	lsls	r3, r3, #1
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d123      	bne.n	800880a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	08da      	lsrs	r2, r3, #3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	3208      	adds	r2, #8
 80087ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f003 0307 	and.w	r3, r3, #7
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	220f      	movs	r2, #15
 80087da:	fa02 f303 	lsl.w	r3, r2, r3
 80087de:	43db      	mvns	r3, r3
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	4013      	ands	r3, r2
 80087e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	691a      	ldr	r2, [r3, #16]
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	fa02 f303 	lsl.w	r3, r2, r3
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	08da      	lsrs	r2, r3, #3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3208      	adds	r2, #8
 8008804:	6939      	ldr	r1, [r7, #16]
 8008806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	2203      	movs	r2, #3
 8008816:	fa02 f303 	lsl.w	r3, r2, r3
 800881a:	43db      	mvns	r3, r3
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	4013      	ands	r3, r2
 8008820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f003 0203 	and.w	r2, r3, #3
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	fa02 f303 	lsl.w	r3, r2, r3
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	4313      	orrs	r3, r2
 8008836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 80ac 	beq.w	80089a4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800884c:	4b5e      	ldr	r3, [pc, #376]	; (80089c8 <HAL_GPIO_Init+0x2f0>)
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	4a5d      	ldr	r2, [pc, #372]	; (80089c8 <HAL_GPIO_Init+0x2f0>)
 8008852:	f043 0301 	orr.w	r3, r3, #1
 8008856:	6193      	str	r3, [r2, #24]
 8008858:	4b5b      	ldr	r3, [pc, #364]	; (80089c8 <HAL_GPIO_Init+0x2f0>)
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	60bb      	str	r3, [r7, #8]
 8008862:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008864:	4a59      	ldr	r2, [pc, #356]	; (80089cc <HAL_GPIO_Init+0x2f4>)
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	089b      	lsrs	r3, r3, #2
 800886a:	3302      	adds	r3, #2
 800886c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008870:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f003 0303 	and.w	r3, r3, #3
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	220f      	movs	r2, #15
 800887c:	fa02 f303 	lsl.w	r3, r2, r3
 8008880:	43db      	mvns	r3, r3
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	4013      	ands	r3, r2
 8008886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800888e:	d025      	beq.n	80088dc <HAL_GPIO_Init+0x204>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a4f      	ldr	r2, [pc, #316]	; (80089d0 <HAL_GPIO_Init+0x2f8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d01f      	beq.n	80088d8 <HAL_GPIO_Init+0x200>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a4e      	ldr	r2, [pc, #312]	; (80089d4 <HAL_GPIO_Init+0x2fc>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d019      	beq.n	80088d4 <HAL_GPIO_Init+0x1fc>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a4d      	ldr	r2, [pc, #308]	; (80089d8 <HAL_GPIO_Init+0x300>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d013      	beq.n	80088d0 <HAL_GPIO_Init+0x1f8>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a4c      	ldr	r2, [pc, #304]	; (80089dc <HAL_GPIO_Init+0x304>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00d      	beq.n	80088cc <HAL_GPIO_Init+0x1f4>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a4b      	ldr	r2, [pc, #300]	; (80089e0 <HAL_GPIO_Init+0x308>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d007      	beq.n	80088c8 <HAL_GPIO_Init+0x1f0>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a4a      	ldr	r2, [pc, #296]	; (80089e4 <HAL_GPIO_Init+0x30c>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d101      	bne.n	80088c4 <HAL_GPIO_Init+0x1ec>
 80088c0:	2306      	movs	r3, #6
 80088c2:	e00c      	b.n	80088de <HAL_GPIO_Init+0x206>
 80088c4:	2307      	movs	r3, #7
 80088c6:	e00a      	b.n	80088de <HAL_GPIO_Init+0x206>
 80088c8:	2305      	movs	r3, #5
 80088ca:	e008      	b.n	80088de <HAL_GPIO_Init+0x206>
 80088cc:	2304      	movs	r3, #4
 80088ce:	e006      	b.n	80088de <HAL_GPIO_Init+0x206>
 80088d0:	2303      	movs	r3, #3
 80088d2:	e004      	b.n	80088de <HAL_GPIO_Init+0x206>
 80088d4:	2302      	movs	r3, #2
 80088d6:	e002      	b.n	80088de <HAL_GPIO_Init+0x206>
 80088d8:	2301      	movs	r3, #1
 80088da:	e000      	b.n	80088de <HAL_GPIO_Init+0x206>
 80088dc:	2300      	movs	r3, #0
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	f002 0203 	and.w	r2, r2, #3
 80088e4:	0092      	lsls	r2, r2, #2
 80088e6:	4093      	lsls	r3, r2
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80088ee:	4937      	ldr	r1, [pc, #220]	; (80089cc <HAL_GPIO_Init+0x2f4>)
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	089b      	lsrs	r3, r3, #2
 80088f4:	3302      	adds	r3, #2
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80088fc:	4b3a      	ldr	r3, [pc, #232]	; (80089e8 <HAL_GPIO_Init+0x310>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	43db      	mvns	r3, r3
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	4013      	ands	r3, r2
 800890a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4313      	orrs	r3, r2
 800891e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008920:	4a31      	ldr	r2, [pc, #196]	; (80089e8 <HAL_GPIO_Init+0x310>)
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008926:	4b30      	ldr	r3, [pc, #192]	; (80089e8 <HAL_GPIO_Init+0x310>)
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	43db      	mvns	r3, r3
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	4013      	ands	r3, r2
 8008934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4313      	orrs	r3, r2
 8008948:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800894a:	4a27      	ldr	r2, [pc, #156]	; (80089e8 <HAL_GPIO_Init+0x310>)
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008950:	4b25      	ldr	r3, [pc, #148]	; (80089e8 <HAL_GPIO_Init+0x310>)
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	43db      	mvns	r3, r3
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	4013      	ands	r3, r2
 800895e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4313      	orrs	r3, r2
 8008972:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008974:	4a1c      	ldr	r2, [pc, #112]	; (80089e8 <HAL_GPIO_Init+0x310>)
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800897a:	4b1b      	ldr	r3, [pc, #108]	; (80089e8 <HAL_GPIO_Init+0x310>)
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	43db      	mvns	r3, r3
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	4013      	ands	r3, r2
 8008988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4313      	orrs	r3, r2
 800899c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800899e:	4a12      	ldr	r2, [pc, #72]	; (80089e8 <HAL_GPIO_Init+0x310>)
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	3301      	adds	r3, #1
 80089a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	fa22 f303 	lsr.w	r3, r2, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f47f ae97 	bne.w	80086e8 <HAL_GPIO_Init+0x10>
  }
}
 80089ba:	bf00      	nop
 80089bc:	371c      	adds	r7, #28
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	40021000 	.word	0x40021000
 80089cc:	40010000 	.word	0x40010000
 80089d0:	48000400 	.word	0x48000400
 80089d4:	48000800 	.word	0x48000800
 80089d8:	48000c00 	.word	0x48000c00
 80089dc:	48001000 	.word	0x48001000
 80089e0:	48001400 	.word	0x48001400
 80089e4:	48001800 	.word	0x48001800
 80089e8:	40010400 	.word	0x40010400

080089ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	887b      	ldrh	r3, [r7, #2]
 80089fe:	4013      	ands	r3, r2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a04:	2301      	movs	r3, #1
 8008a06:	73fb      	strb	r3, [r7, #15]
 8008a08:	e001      	b.n	8008a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	807b      	strh	r3, [r7, #2]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008a2c:	787b      	ldrb	r3, [r7, #1]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008a32:	887a      	ldrh	r2, [r7, #2]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008a38:	e002      	b.n	8008a40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008a3a:	887a      	ldrh	r2, [r7, #2]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008a56:	4b08      	ldr	r3, [pc, #32]	; (8008a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a58:	695a      	ldr	r2, [r3, #20]
 8008a5a:	88fb      	ldrh	r3, [r7, #6]
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d006      	beq.n	8008a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a62:	4a05      	ldr	r2, [pc, #20]	; (8008a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a64:	88fb      	ldrh	r3, [r7, #6]
 8008a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a68:	88fb      	ldrh	r3, [r7, #6]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f806 	bl	8008a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	40010400 	.word	0x40010400

08008a7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008a86:	bf00      	nop
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
	...

08008a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	1d3b      	adds	r3, r7, #4
 8008a9e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008aa0:	1d3b      	adds	r3, r7, #4
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d102      	bne.n	8008aae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f000 bf01 	b.w	80098b0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008aae:	1d3b      	adds	r3, r7, #4
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 8160 	beq.w	8008d7e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008abe:	4bae      	ldr	r3, [pc, #696]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f003 030c 	and.w	r3, r3, #12
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d00c      	beq.n	8008ae4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008aca:	4bab      	ldr	r3, [pc, #684]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f003 030c 	and.w	r3, r3, #12
 8008ad2:	2b08      	cmp	r3, #8
 8008ad4:	d159      	bne.n	8008b8a <HAL_RCC_OscConfig+0xf6>
 8008ad6:	4ba8      	ldr	r3, [pc, #672]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ae2:	d152      	bne.n	8008b8a <HAL_RCC_OscConfig+0xf6>
 8008ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ae8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008af0:	fa93 f3a3 	rbit	r3, r3
 8008af4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008af8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008afc:	fab3 f383 	clz	r3, r3
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	095b      	lsrs	r3, r3, #5
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d102      	bne.n	8008b16 <HAL_RCC_OscConfig+0x82>
 8008b10:	4b99      	ldr	r3, [pc, #612]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	e015      	b.n	8008b42 <HAL_RCC_OscConfig+0xae>
 8008b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b1a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b1e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008b22:	fa93 f3a3 	rbit	r3, r3
 8008b26:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b2e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008b32:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008b36:	fa93 f3a3 	rbit	r3, r3
 8008b3a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008b3e:	4b8e      	ldr	r3, [pc, #568]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008b46:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8008b4a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008b4e:	fa92 f2a2 	rbit	r2, r2
 8008b52:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8008b56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008b5a:	fab2 f282 	clz	r2, r2
 8008b5e:	b2d2      	uxtb	r2, r2
 8008b60:	f042 0220 	orr.w	r2, r2, #32
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	f002 021f 	and.w	r2, r2, #31
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8008b70:	4013      	ands	r3, r2
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 8102 	beq.w	8008d7c <HAL_RCC_OscConfig+0x2e8>
 8008b78:	1d3b      	adds	r3, r7, #4
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f040 80fc 	bne.w	8008d7c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	f000 be93 	b.w	80098b0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b8a:	1d3b      	adds	r3, r7, #4
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b94:	d106      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x110>
 8008b96:	4b78      	ldr	r3, [pc, #480]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a77      	ldr	r2, [pc, #476]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	e030      	b.n	8008c06 <HAL_RCC_OscConfig+0x172>
 8008ba4:	1d3b      	adds	r3, r7, #4
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10c      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x134>
 8008bae:	4b72      	ldr	r3, [pc, #456]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a71      	ldr	r2, [pc, #452]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	4b6f      	ldr	r3, [pc, #444]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a6e      	ldr	r2, [pc, #440]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	e01e      	b.n	8008c06 <HAL_RCC_OscConfig+0x172>
 8008bc8:	1d3b      	adds	r3, r7, #4
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bd2:	d10c      	bne.n	8008bee <HAL_RCC_OscConfig+0x15a>
 8008bd4:	4b68      	ldr	r3, [pc, #416]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a67      	ldr	r2, [pc, #412]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	4b65      	ldr	r3, [pc, #404]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a64      	ldr	r2, [pc, #400]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bea:	6013      	str	r3, [r2, #0]
 8008bec:	e00b      	b.n	8008c06 <HAL_RCC_OscConfig+0x172>
 8008bee:	4b62      	ldr	r3, [pc, #392]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a61      	ldr	r2, [pc, #388]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bf8:	6013      	str	r3, [r2, #0]
 8008bfa:	4b5f      	ldr	r3, [pc, #380]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a5e      	ldr	r2, [pc, #376]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c04:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c06:	1d3b      	adds	r3, r7, #4
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d059      	beq.n	8008cc4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c10:	f7fd fa52 	bl	80060b8 <HAL_GetTick>
 8008c14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c18:	e00a      	b.n	8008c30 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c1a:	f7fd fa4d 	bl	80060b8 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	2b64      	cmp	r3, #100	; 0x64
 8008c28:	d902      	bls.n	8008c30 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	f000 be40 	b.w	80098b0 <HAL_RCC_OscConfig+0xe1c>
 8008c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c34:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c38:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008c3c:	fa93 f3a3 	rbit	r3, r3
 8008c40:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8008c44:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c48:	fab3 f383 	clz	r3, r3
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	095b      	lsrs	r3, r3, #5
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f043 0301 	orr.w	r3, r3, #1
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d102      	bne.n	8008c62 <HAL_RCC_OscConfig+0x1ce>
 8008c5c:	4b46      	ldr	r3, [pc, #280]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	e015      	b.n	8008c8e <HAL_RCC_OscConfig+0x1fa>
 8008c62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c66:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008c6e:	fa93 f3a3 	rbit	r3, r3
 8008c72:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c7a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008c7e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8008c82:	fa93 f3a3 	rbit	r3, r3
 8008c86:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008c8a:	4b3b      	ldr	r3, [pc, #236]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008c92:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8008c96:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8008c9a:	fa92 f2a2 	rbit	r2, r2
 8008c9e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8008ca2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008ca6:	fab2 f282 	clz	r2, r2
 8008caa:	b2d2      	uxtb	r2, r2
 8008cac:	f042 0220 	orr.w	r2, r2, #32
 8008cb0:	b2d2      	uxtb	r2, r2
 8008cb2:	f002 021f 	and.w	r2, r2, #31
 8008cb6:	2101      	movs	r1, #1
 8008cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d0ab      	beq.n	8008c1a <HAL_RCC_OscConfig+0x186>
 8008cc2:	e05c      	b.n	8008d7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cc4:	f7fd f9f8 	bl	80060b8 <HAL_GetTick>
 8008cc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ccc:	e00a      	b.n	8008ce4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cce:	f7fd f9f3 	bl	80060b8 <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b64      	cmp	r3, #100	; 0x64
 8008cdc:	d902      	bls.n	8008ce4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	f000 bde6 	b.w	80098b0 <HAL_RCC_OscConfig+0xe1c>
 8008ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ce8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008cf0:	fa93 f3a3 	rbit	r3, r3
 8008cf4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8008cf8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cfc:	fab3 f383 	clz	r3, r3
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	095b      	lsrs	r3, r3, #5
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	f043 0301 	orr.w	r3, r3, #1
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d102      	bne.n	8008d16 <HAL_RCC_OscConfig+0x282>
 8008d10:	4b19      	ldr	r3, [pc, #100]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	e015      	b.n	8008d42 <HAL_RCC_OscConfig+0x2ae>
 8008d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d1a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8008d22:	fa93 f3a3 	rbit	r3, r3
 8008d26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d2e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008d32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008d36:	fa93 f3a3 	rbit	r3, r3
 8008d3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008d3e:	4b0e      	ldr	r3, [pc, #56]	; (8008d78 <HAL_RCC_OscConfig+0x2e4>)
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008d46:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8008d4a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8008d4e:	fa92 f2a2 	rbit	r2, r2
 8008d52:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8008d56:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8008d5a:	fab2 f282 	clz	r2, r2
 8008d5e:	b2d2      	uxtb	r2, r2
 8008d60:	f042 0220 	orr.w	r2, r2, #32
 8008d64:	b2d2      	uxtb	r2, r2
 8008d66:	f002 021f 	and.w	r2, r2, #31
 8008d6a:	2101      	movs	r1, #1
 8008d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8008d70:	4013      	ands	r3, r2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1ab      	bne.n	8008cce <HAL_RCC_OscConfig+0x23a>
 8008d76:	e002      	b.n	8008d7e <HAL_RCC_OscConfig+0x2ea>
 8008d78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d7e:	1d3b      	adds	r3, r7, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 8170 	beq.w	800906e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008d8e:	4bd0      	ldr	r3, [pc, #832]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f003 030c 	and.w	r3, r3, #12
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00c      	beq.n	8008db4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008d9a:	4bcd      	ldr	r3, [pc, #820]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f003 030c 	and.w	r3, r3, #12
 8008da2:	2b08      	cmp	r3, #8
 8008da4:	d16d      	bne.n	8008e82 <HAL_RCC_OscConfig+0x3ee>
 8008da6:	4bca      	ldr	r3, [pc, #808]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db2:	d166      	bne.n	8008e82 <HAL_RCC_OscConfig+0x3ee>
 8008db4:	2302      	movs	r3, #2
 8008db6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dba:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008dbe:	fa93 f3a3 	rbit	r3, r3
 8008dc2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8008dc6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dca:	fab3 f383 	clz	r3, r3
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	095b      	lsrs	r3, r3, #5
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	f043 0301 	orr.w	r3, r3, #1
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d102      	bne.n	8008de4 <HAL_RCC_OscConfig+0x350>
 8008dde:	4bbc      	ldr	r3, [pc, #752]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	e013      	b.n	8008e0c <HAL_RCC_OscConfig+0x378>
 8008de4:	2302      	movs	r3, #2
 8008de6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008dee:	fa93 f3a3 	rbit	r3, r3
 8008df2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8008df6:	2302      	movs	r3, #2
 8008df8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8008dfc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008e00:	fa93 f3a3 	rbit	r3, r3
 8008e04:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008e08:	4bb1      	ldr	r3, [pc, #708]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008e12:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008e16:	fa92 f2a2 	rbit	r2, r2
 8008e1a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8008e1e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008e22:	fab2 f282 	clz	r2, r2
 8008e26:	b2d2      	uxtb	r2, r2
 8008e28:	f042 0220 	orr.w	r2, r2, #32
 8008e2c:	b2d2      	uxtb	r2, r2
 8008e2e:	f002 021f 	and.w	r2, r2, #31
 8008e32:	2101      	movs	r1, #1
 8008e34:	fa01 f202 	lsl.w	r2, r1, r2
 8008e38:	4013      	ands	r3, r2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d007      	beq.n	8008e4e <HAL_RCC_OscConfig+0x3ba>
 8008e3e:	1d3b      	adds	r3, r7, #4
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d002      	beq.n	8008e4e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f000 bd31 	b.w	80098b0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e4e:	4ba0      	ldr	r3, [pc, #640]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e56:	1d3b      	adds	r3, r7, #4
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	21f8      	movs	r1, #248	; 0xf8
 8008e5e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e62:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8008e66:	fa91 f1a1 	rbit	r1, r1
 8008e6a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8008e6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8008e72:	fab1 f181 	clz	r1, r1
 8008e76:	b2c9      	uxtb	r1, r1
 8008e78:	408b      	lsls	r3, r1
 8008e7a:	4995      	ldr	r1, [pc, #596]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e80:	e0f5      	b.n	800906e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e82:	1d3b      	adds	r3, r7, #4
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 8085 	beq.w	8008f98 <HAL_RCC_OscConfig+0x504>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e94:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008e98:	fa93 f3a3 	rbit	r3, r3
 8008e9c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8008ea0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ea4:	fab3 f383 	clz	r3, r3
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008eae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eba:	f7fd f8fd 	bl	80060b8 <HAL_GetTick>
 8008ebe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ec2:	e00a      	b.n	8008eda <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ec4:	f7fd f8f8 	bl	80060b8 <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d902      	bls.n	8008eda <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	f000 bceb 	b.w	80098b0 <HAL_RCC_OscConfig+0xe1c>
 8008eda:	2302      	movs	r3, #2
 8008edc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ee0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008ee4:	fa93 f3a3 	rbit	r3, r3
 8008ee8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8008eec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ef0:	fab3 f383 	clz	r3, r3
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	095b      	lsrs	r3, r3, #5
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	f043 0301 	orr.w	r3, r3, #1
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d102      	bne.n	8008f0a <HAL_RCC_OscConfig+0x476>
 8008f04:	4b72      	ldr	r3, [pc, #456]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	e013      	b.n	8008f32 <HAL_RCC_OscConfig+0x49e>
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f10:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008f14:	fa93 f3a3 	rbit	r3, r3
 8008f18:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008f22:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008f26:	fa93 f3a3 	rbit	r3, r3
 8008f2a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008f2e:	4b68      	ldr	r3, [pc, #416]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	2202      	movs	r2, #2
 8008f34:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008f38:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008f3c:	fa92 f2a2 	rbit	r2, r2
 8008f40:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8008f44:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008f48:	fab2 f282 	clz	r2, r2
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	f042 0220 	orr.w	r2, r2, #32
 8008f52:	b2d2      	uxtb	r2, r2
 8008f54:	f002 021f 	and.w	r2, r2, #31
 8008f58:	2101      	movs	r1, #1
 8008f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8008f5e:	4013      	ands	r3, r2
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d0af      	beq.n	8008ec4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f64:	4b5a      	ldr	r3, [pc, #360]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f6c:	1d3b      	adds	r3, r7, #4
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	21f8      	movs	r1, #248	; 0xf8
 8008f74:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f78:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008f7c:	fa91 f1a1 	rbit	r1, r1
 8008f80:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8008f84:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008f88:	fab1 f181 	clz	r1, r1
 8008f8c:	b2c9      	uxtb	r1, r1
 8008f8e:	408b      	lsls	r3, r1
 8008f90:	494f      	ldr	r1, [pc, #316]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	600b      	str	r3, [r1, #0]
 8008f96:	e06a      	b.n	800906e <HAL_RCC_OscConfig+0x5da>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008fa2:	fa93 f3a3 	rbit	r3, r3
 8008fa6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8008faa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fae:	fab3 f383 	clz	r3, r3
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008fb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fc4:	f7fd f878 	bl	80060b8 <HAL_GetTick>
 8008fc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fcc:	e00a      	b.n	8008fe4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fce:	f7fd f873 	bl	80060b8 <HAL_GetTick>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d902      	bls.n	8008fe4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	f000 bc66 	b.w	80098b0 <HAL_RCC_OscConfig+0xe1c>
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008fee:	fa93 f3a3 	rbit	r3, r3
 8008ff2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8008ff6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ffa:	fab3 f383 	clz	r3, r3
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	095b      	lsrs	r3, r3, #5
 8009002:	b2db      	uxtb	r3, r3
 8009004:	f043 0301 	orr.w	r3, r3, #1
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b01      	cmp	r3, #1
 800900c:	d102      	bne.n	8009014 <HAL_RCC_OscConfig+0x580>
 800900e:	4b30      	ldr	r3, [pc, #192]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	e013      	b.n	800903c <HAL_RCC_OscConfig+0x5a8>
 8009014:	2302      	movs	r3, #2
 8009016:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800901a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800901e:	fa93 f3a3 	rbit	r3, r3
 8009022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009026:	2302      	movs	r3, #2
 8009028:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800902c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009030:	fa93 f3a3 	rbit	r3, r3
 8009034:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009038:	4b25      	ldr	r3, [pc, #148]	; (80090d0 <HAL_RCC_OscConfig+0x63c>)
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	2202      	movs	r2, #2
 800903e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8009042:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009046:	fa92 f2a2 	rbit	r2, r2
 800904a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800904e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009052:	fab2 f282 	clz	r2, r2
 8009056:	b2d2      	uxtb	r2, r2
 8009058:	f042 0220 	orr.w	r2, r2, #32
 800905c:	b2d2      	uxtb	r2, r2
 800905e:	f002 021f 	and.w	r2, r2, #31
 8009062:	2101      	movs	r1, #1
 8009064:	fa01 f202 	lsl.w	r2, r1, r2
 8009068:	4013      	ands	r3, r2
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1af      	bne.n	8008fce <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800906e:	1d3b      	adds	r3, r7, #4
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 80da 	beq.w	8009232 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800907e:	1d3b      	adds	r3, r7, #4
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d069      	beq.n	800915c <HAL_RCC_OscConfig+0x6c8>
 8009088:	2301      	movs	r3, #1
 800908a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800908e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009092:	fa93 f3a3 	rbit	r3, r3
 8009096:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800909a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800909e:	fab3 f383 	clz	r3, r3
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	461a      	mov	r2, r3
 80090a6:	4b0b      	ldr	r3, [pc, #44]	; (80090d4 <HAL_RCC_OscConfig+0x640>)
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	461a      	mov	r2, r3
 80090ae:	2301      	movs	r3, #1
 80090b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090b2:	f7fd f801 	bl	80060b8 <HAL_GetTick>
 80090b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090ba:	e00d      	b.n	80090d8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090bc:	f7fc fffc 	bl	80060b8 <HAL_GetTick>
 80090c0:	4602      	mov	r2, r0
 80090c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d905      	bls.n	80090d8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e3ef      	b.n	80098b0 <HAL_RCC_OscConfig+0xe1c>
 80090d0:	40021000 	.word	0x40021000
 80090d4:	10908120 	.word	0x10908120
 80090d8:	2302      	movs	r3, #2
 80090da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090e2:	fa93 f2a3 	rbit	r2, r3
 80090e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80090f0:	2202      	movs	r2, #2
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	fa93 f2a3 	rbit	r2, r3
 80090fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009108:	2202      	movs	r2, #2
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	fa93 f2a3 	rbit	r2, r3
 8009116:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800911a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800911c:	4ba4      	ldr	r3, [pc, #656]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 800911e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009120:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009124:	2102      	movs	r1, #2
 8009126:	6019      	str	r1, [r3, #0]
 8009128:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	fa93 f1a3 	rbit	r1, r3
 8009132:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009136:	6019      	str	r1, [r3, #0]
  return result;
 8009138:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	fab3 f383 	clz	r3, r3
 8009142:	b2db      	uxtb	r3, r3
 8009144:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 031f 	and.w	r3, r3, #31
 800914e:	2101      	movs	r1, #1
 8009150:	fa01 f303 	lsl.w	r3, r1, r3
 8009154:	4013      	ands	r3, r2
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0b0      	beq.n	80090bc <HAL_RCC_OscConfig+0x628>
 800915a:	e06a      	b.n	8009232 <HAL_RCC_OscConfig+0x79e>
 800915c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009160:	2201      	movs	r2, #1
 8009162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009164:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	fa93 f2a3 	rbit	r2, r3
 800916e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009172:	601a      	str	r2, [r3, #0]
  return result;
 8009174:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009178:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800917a:	fab3 f383 	clz	r3, r3
 800917e:	b2db      	uxtb	r3, r3
 8009180:	461a      	mov	r2, r3
 8009182:	4b8c      	ldr	r3, [pc, #560]	; (80093b4 <HAL_RCC_OscConfig+0x920>)
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	461a      	mov	r2, r3
 800918a:	2300      	movs	r3, #0
 800918c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800918e:	f7fc ff93 	bl	80060b8 <HAL_GetTick>
 8009192:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009196:	e009      	b.n	80091ac <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009198:	f7fc ff8e 	bl	80060b8 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d901      	bls.n	80091ac <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e381      	b.n	80098b0 <HAL_RCC_OscConfig+0xe1c>
 80091ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80091b0:	2202      	movs	r2, #2
 80091b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	fa93 f2a3 	rbit	r2, r3
 80091be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80091c8:	2202      	movs	r2, #2
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	fa93 f2a3 	rbit	r2, r3
 80091d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80091e0:	2202      	movs	r2, #2
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	fa93 f2a3 	rbit	r2, r3
 80091ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80091f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091f4:	4b6e      	ldr	r3, [pc, #440]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 80091f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80091fc:	2102      	movs	r1, #2
 80091fe:	6019      	str	r1, [r3, #0]
 8009200:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	fa93 f1a3 	rbit	r1, r3
 800920a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800920e:	6019      	str	r1, [r3, #0]
  return result;
 8009210:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	fab3 f383 	clz	r3, r3
 800921a:	b2db      	uxtb	r3, r3
 800921c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009220:	b2db      	uxtb	r3, r3
 8009222:	f003 031f 	and.w	r3, r3, #31
 8009226:	2101      	movs	r1, #1
 8009228:	fa01 f303 	lsl.w	r3, r1, r3
 800922c:	4013      	ands	r3, r2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1b2      	bne.n	8009198 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009232:	1d3b      	adds	r3, r7, #4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0304 	and.w	r3, r3, #4
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 8157 	beq.w	80094f0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009242:	2300      	movs	r3, #0
 8009244:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009248:	4b59      	ldr	r3, [pc, #356]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 800924a:	69db      	ldr	r3, [r3, #28]
 800924c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d112      	bne.n	800927a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009254:	4b56      	ldr	r3, [pc, #344]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	4a55      	ldr	r2, [pc, #340]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 800925a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800925e:	61d3      	str	r3, [r2, #28]
 8009260:	4b53      	ldr	r3, [pc, #332]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009268:	f107 030c 	add.w	r3, r7, #12
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	f107 030c 	add.w	r3, r7, #12
 8009272:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8009274:	2301      	movs	r3, #1
 8009276:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800927a:	4b4f      	ldr	r3, [pc, #316]	; (80093b8 <HAL_RCC_OscConfig+0x924>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009282:	2b00      	cmp	r3, #0
 8009284:	d11a      	bne.n	80092bc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009286:	4b4c      	ldr	r3, [pc, #304]	; (80093b8 <HAL_RCC_OscConfig+0x924>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a4b      	ldr	r2, [pc, #300]	; (80093b8 <HAL_RCC_OscConfig+0x924>)
 800928c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009290:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009292:	f7fc ff11 	bl	80060b8 <HAL_GetTick>
 8009296:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800929a:	e009      	b.n	80092b0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800929c:	f7fc ff0c 	bl	80060b8 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	2b64      	cmp	r3, #100	; 0x64
 80092aa:	d901      	bls.n	80092b0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e2ff      	b.n	80098b0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092b0:	4b41      	ldr	r3, [pc, #260]	; (80093b8 <HAL_RCC_OscConfig+0x924>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0ef      	beq.n	800929c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092bc:	1d3b      	adds	r3, r7, #4
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d106      	bne.n	80092d4 <HAL_RCC_OscConfig+0x840>
 80092c6:	4b3a      	ldr	r3, [pc, #232]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	4a39      	ldr	r2, [pc, #228]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 80092cc:	f043 0301 	orr.w	r3, r3, #1
 80092d0:	6213      	str	r3, [r2, #32]
 80092d2:	e02f      	b.n	8009334 <HAL_RCC_OscConfig+0x8a0>
 80092d4:	1d3b      	adds	r3, r7, #4
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10c      	bne.n	80092f8 <HAL_RCC_OscConfig+0x864>
 80092de:	4b34      	ldr	r3, [pc, #208]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	4a33      	ldr	r2, [pc, #204]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 80092e4:	f023 0301 	bic.w	r3, r3, #1
 80092e8:	6213      	str	r3, [r2, #32]
 80092ea:	4b31      	ldr	r3, [pc, #196]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	4a30      	ldr	r2, [pc, #192]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 80092f0:	f023 0304 	bic.w	r3, r3, #4
 80092f4:	6213      	str	r3, [r2, #32]
 80092f6:	e01d      	b.n	8009334 <HAL_RCC_OscConfig+0x8a0>
 80092f8:	1d3b      	adds	r3, r7, #4
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	2b05      	cmp	r3, #5
 8009300:	d10c      	bne.n	800931c <HAL_RCC_OscConfig+0x888>
 8009302:	4b2b      	ldr	r3, [pc, #172]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	4a2a      	ldr	r2, [pc, #168]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 8009308:	f043 0304 	orr.w	r3, r3, #4
 800930c:	6213      	str	r3, [r2, #32]
 800930e:	4b28      	ldr	r3, [pc, #160]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	4a27      	ldr	r2, [pc, #156]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 8009314:	f043 0301 	orr.w	r3, r3, #1
 8009318:	6213      	str	r3, [r2, #32]
 800931a:	e00b      	b.n	8009334 <HAL_RCC_OscConfig+0x8a0>
 800931c:	4b24      	ldr	r3, [pc, #144]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	4a23      	ldr	r2, [pc, #140]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 8009322:	f023 0301 	bic.w	r3, r3, #1
 8009326:	6213      	str	r3, [r2, #32]
 8009328:	4b21      	ldr	r3, [pc, #132]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	4a20      	ldr	r2, [pc, #128]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 800932e:	f023 0304 	bic.w	r3, r3, #4
 8009332:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009334:	1d3b      	adds	r3, r7, #4
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d06a      	beq.n	8009414 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800933e:	f7fc febb 	bl	80060b8 <HAL_GetTick>
 8009342:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009346:	e00b      	b.n	8009360 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009348:	f7fc feb6 	bl	80060b8 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	f241 3288 	movw	r2, #5000	; 0x1388
 8009358:	4293      	cmp	r3, r2
 800935a:	d901      	bls.n	8009360 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e2a7      	b.n	80098b0 <HAL_RCC_OscConfig+0xe1c>
 8009360:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009364:	2202      	movs	r2, #2
 8009366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009368:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	fa93 f2a3 	rbit	r2, r3
 8009372:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800937c:	2202      	movs	r2, #2
 800937e:	601a      	str	r2, [r3, #0]
 8009380:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	fa93 f2a3 	rbit	r2, r3
 800938a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800938e:	601a      	str	r2, [r3, #0]
  return result;
 8009390:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009394:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009396:	fab3 f383 	clz	r3, r3
 800939a:	b2db      	uxtb	r3, r3
 800939c:	095b      	lsrs	r3, r3, #5
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f043 0302 	orr.w	r3, r3, #2
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d108      	bne.n	80093bc <HAL_RCC_OscConfig+0x928>
 80093aa:	4b01      	ldr	r3, [pc, #4]	; (80093b0 <HAL_RCC_OscConfig+0x91c>)
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	e013      	b.n	80093d8 <HAL_RCC_OscConfig+0x944>
 80093b0:	40021000 	.word	0x40021000
 80093b4:	10908120 	.word	0x10908120
 80093b8:	40007000 	.word	0x40007000
 80093bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80093c0:	2202      	movs	r2, #2
 80093c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	fa93 f2a3 	rbit	r2, r3
 80093ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	4bc0      	ldr	r3, [pc, #768]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 80093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80093dc:	2102      	movs	r1, #2
 80093de:	6011      	str	r1, [r2, #0]
 80093e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80093e4:	6812      	ldr	r2, [r2, #0]
 80093e6:	fa92 f1a2 	rbit	r1, r2
 80093ea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80093ee:	6011      	str	r1, [r2, #0]
  return result;
 80093f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80093f4:	6812      	ldr	r2, [r2, #0]
 80093f6:	fab2 f282 	clz	r2, r2
 80093fa:	b2d2      	uxtb	r2, r2
 80093fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009400:	b2d2      	uxtb	r2, r2
 8009402:	f002 021f 	and.w	r2, r2, #31
 8009406:	2101      	movs	r1, #1
 8009408:	fa01 f202 	lsl.w	r2, r1, r2
 800940c:	4013      	ands	r3, r2
 800940e:	2b00      	cmp	r3, #0
 8009410:	d09a      	beq.n	8009348 <HAL_RCC_OscConfig+0x8b4>
 8009412:	e063      	b.n	80094dc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009414:	f7fc fe50 	bl	80060b8 <HAL_GetTick>
 8009418:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800941c:	e00b      	b.n	8009436 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800941e:	f7fc fe4b 	bl	80060b8 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	f241 3288 	movw	r2, #5000	; 0x1388
 800942e:	4293      	cmp	r3, r2
 8009430:	d901      	bls.n	8009436 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e23c      	b.n	80098b0 <HAL_RCC_OscConfig+0xe1c>
 8009436:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800943a:	2202      	movs	r2, #2
 800943c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800943e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	fa93 f2a3 	rbit	r2, r3
 8009448:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800944c:	601a      	str	r2, [r3, #0]
 800944e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009452:	2202      	movs	r2, #2
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	fa93 f2a3 	rbit	r2, r3
 8009460:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009464:	601a      	str	r2, [r3, #0]
  return result;
 8009466:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800946a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800946c:	fab3 f383 	clz	r3, r3
 8009470:	b2db      	uxtb	r3, r3
 8009472:	095b      	lsrs	r3, r3, #5
 8009474:	b2db      	uxtb	r3, r3
 8009476:	f043 0302 	orr.w	r3, r3, #2
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b02      	cmp	r3, #2
 800947e:	d102      	bne.n	8009486 <HAL_RCC_OscConfig+0x9f2>
 8009480:	4b95      	ldr	r3, [pc, #596]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	e00d      	b.n	80094a2 <HAL_RCC_OscConfig+0xa0e>
 8009486:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800948a:	2202      	movs	r2, #2
 800948c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800948e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	fa93 f2a3 	rbit	r2, r3
 8009498:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	4b8e      	ldr	r3, [pc, #568]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80094a6:	2102      	movs	r1, #2
 80094a8:	6011      	str	r1, [r2, #0]
 80094aa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80094ae:	6812      	ldr	r2, [r2, #0]
 80094b0:	fa92 f1a2 	rbit	r1, r2
 80094b4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80094b8:	6011      	str	r1, [r2, #0]
  return result;
 80094ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80094be:	6812      	ldr	r2, [r2, #0]
 80094c0:	fab2 f282 	clz	r2, r2
 80094c4:	b2d2      	uxtb	r2, r2
 80094c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ca:	b2d2      	uxtb	r2, r2
 80094cc:	f002 021f 	and.w	r2, r2, #31
 80094d0:	2101      	movs	r1, #1
 80094d2:	fa01 f202 	lsl.w	r2, r1, r2
 80094d6:	4013      	ands	r3, r2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1a0      	bne.n	800941e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80094dc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d105      	bne.n	80094f0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094e4:	4b7c      	ldr	r3, [pc, #496]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 80094e6:	69db      	ldr	r3, [r3, #28]
 80094e8:	4a7b      	ldr	r2, [pc, #492]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 80094ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094f0:	1d3b      	adds	r3, r7, #4
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 81d9 	beq.w	80098ae <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80094fc:	4b76      	ldr	r3, [pc, #472]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f003 030c 	and.w	r3, r3, #12
 8009504:	2b08      	cmp	r3, #8
 8009506:	f000 81a6 	beq.w	8009856 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800950a:	1d3b      	adds	r3, r7, #4
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	2b02      	cmp	r3, #2
 8009512:	f040 811e 	bne.w	8009752 <HAL_RCC_OscConfig+0xcbe>
 8009516:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800951a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800951e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009520:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	fa93 f2a3 	rbit	r2, r3
 800952a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800952e:	601a      	str	r2, [r3, #0]
  return result;
 8009530:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009534:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009536:	fab3 f383 	clz	r3, r3
 800953a:	b2db      	uxtb	r3, r3
 800953c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009540:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	461a      	mov	r2, r3
 8009548:	2300      	movs	r3, #0
 800954a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800954c:	f7fc fdb4 	bl	80060b8 <HAL_GetTick>
 8009550:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009554:	e009      	b.n	800956a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009556:	f7fc fdaf 	bl	80060b8 <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	2b02      	cmp	r3, #2
 8009564:	d901      	bls.n	800956a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e1a2      	b.n	80098b0 <HAL_RCC_OscConfig+0xe1c>
 800956a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800956e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009574:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	fa93 f2a3 	rbit	r2, r3
 800957e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009582:	601a      	str	r2, [r3, #0]
  return result;
 8009584:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009588:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800958a:	fab3 f383 	clz	r3, r3
 800958e:	b2db      	uxtb	r3, r3
 8009590:	095b      	lsrs	r3, r3, #5
 8009592:	b2db      	uxtb	r3, r3
 8009594:	f043 0301 	orr.w	r3, r3, #1
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b01      	cmp	r3, #1
 800959c:	d102      	bne.n	80095a4 <HAL_RCC_OscConfig+0xb10>
 800959e:	4b4e      	ldr	r3, [pc, #312]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	e01b      	b.n	80095dc <HAL_RCC_OscConfig+0xb48>
 80095a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80095a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80095ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	fa93 f2a3 	rbit	r2, r3
 80095b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80095c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	fa93 f2a3 	rbit	r2, r3
 80095d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	4b3f      	ldr	r3, [pc, #252]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80095e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80095e4:	6011      	str	r1, [r2, #0]
 80095e6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80095ea:	6812      	ldr	r2, [r2, #0]
 80095ec:	fa92 f1a2 	rbit	r1, r2
 80095f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80095f4:	6011      	str	r1, [r2, #0]
  return result;
 80095f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80095fa:	6812      	ldr	r2, [r2, #0]
 80095fc:	fab2 f282 	clz	r2, r2
 8009600:	b2d2      	uxtb	r2, r2
 8009602:	f042 0220 	orr.w	r2, r2, #32
 8009606:	b2d2      	uxtb	r2, r2
 8009608:	f002 021f 	and.w	r2, r2, #31
 800960c:	2101      	movs	r1, #1
 800960e:	fa01 f202 	lsl.w	r2, r1, r2
 8009612:	4013      	ands	r3, r2
 8009614:	2b00      	cmp	r3, #0
 8009616:	d19e      	bne.n	8009556 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009618:	4b2f      	ldr	r3, [pc, #188]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 800961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961c:	f023 020f 	bic.w	r2, r3, #15
 8009620:	1d3b      	adds	r3, r7, #4
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	492c      	ldr	r1, [pc, #176]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 8009628:	4313      	orrs	r3, r2
 800962a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800962c:	4b2a      	ldr	r3, [pc, #168]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8009634:	1d3b      	adds	r3, r7, #4
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6a19      	ldr	r1, [r3, #32]
 800963a:	1d3b      	adds	r3, r7, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	430b      	orrs	r3, r1
 8009642:	4925      	ldr	r1, [pc, #148]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 8009644:	4313      	orrs	r3, r2
 8009646:	604b      	str	r3, [r1, #4]
 8009648:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800964c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009652:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	fa93 f2a3 	rbit	r2, r3
 800965c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009660:	601a      	str	r2, [r3, #0]
  return result;
 8009662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009666:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009668:	fab3 f383 	clz	r3, r3
 800966c:	b2db      	uxtb	r3, r3
 800966e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009672:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	461a      	mov	r2, r3
 800967a:	2301      	movs	r3, #1
 800967c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800967e:	f7fc fd1b 	bl	80060b8 <HAL_GetTick>
 8009682:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009686:	e009      	b.n	800969c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009688:	f7fc fd16 	bl	80060b8 <HAL_GetTick>
 800968c:	4602      	mov	r2, r0
 800968e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	2b02      	cmp	r3, #2
 8009696:	d901      	bls.n	800969c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e109      	b.n	80098b0 <HAL_RCC_OscConfig+0xe1c>
 800969c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80096a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80096a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	fa93 f2a3 	rbit	r2, r3
 80096b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80096b4:	601a      	str	r2, [r3, #0]
  return result;
 80096b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80096ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80096bc:	fab3 f383 	clz	r3, r3
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	095b      	lsrs	r3, r3, #5
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	f043 0301 	orr.w	r3, r3, #1
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d105      	bne.n	80096dc <HAL_RCC_OscConfig+0xc48>
 80096d0:	4b01      	ldr	r3, [pc, #4]	; (80096d8 <HAL_RCC_OscConfig+0xc44>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	e01e      	b.n	8009714 <HAL_RCC_OscConfig+0xc80>
 80096d6:	bf00      	nop
 80096d8:	40021000 	.word	0x40021000
 80096dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80096e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80096e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	fa93 f2a3 	rbit	r2, r3
 80096f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80096fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	fa93 f2a3 	rbit	r2, r3
 800970a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	4b6a      	ldr	r3, [pc, #424]	; (80098bc <HAL_RCC_OscConfig+0xe28>)
 8009712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009714:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009718:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800971c:	6011      	str	r1, [r2, #0]
 800971e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009722:	6812      	ldr	r2, [r2, #0]
 8009724:	fa92 f1a2 	rbit	r1, r2
 8009728:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800972c:	6011      	str	r1, [r2, #0]
  return result;
 800972e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009732:	6812      	ldr	r2, [r2, #0]
 8009734:	fab2 f282 	clz	r2, r2
 8009738:	b2d2      	uxtb	r2, r2
 800973a:	f042 0220 	orr.w	r2, r2, #32
 800973e:	b2d2      	uxtb	r2, r2
 8009740:	f002 021f 	and.w	r2, r2, #31
 8009744:	2101      	movs	r1, #1
 8009746:	fa01 f202 	lsl.w	r2, r1, r2
 800974a:	4013      	ands	r3, r2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d09b      	beq.n	8009688 <HAL_RCC_OscConfig+0xbf4>
 8009750:	e0ad      	b.n	80098ae <HAL_RCC_OscConfig+0xe1a>
 8009752:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009756:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800975a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800975c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	fa93 f2a3 	rbit	r2, r3
 8009766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800976a:	601a      	str	r2, [r3, #0]
  return result;
 800976c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009770:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009772:	fab3 f383 	clz	r3, r3
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800977c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	461a      	mov	r2, r3
 8009784:	2300      	movs	r3, #0
 8009786:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009788:	f7fc fc96 	bl	80060b8 <HAL_GetTick>
 800978c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009790:	e009      	b.n	80097a6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009792:	f7fc fc91 	bl	80060b8 <HAL_GetTick>
 8009796:	4602      	mov	r2, r0
 8009798:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d901      	bls.n	80097a6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e084      	b.n	80098b0 <HAL_RCC_OscConfig+0xe1c>
 80097a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80097ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	fa93 f2a3 	rbit	r2, r3
 80097ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80097be:	601a      	str	r2, [r3, #0]
  return result;
 80097c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80097c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80097c6:	fab3 f383 	clz	r3, r3
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	095b      	lsrs	r3, r3, #5
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	f043 0301 	orr.w	r3, r3, #1
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d102      	bne.n	80097e0 <HAL_RCC_OscConfig+0xd4c>
 80097da:	4b38      	ldr	r3, [pc, #224]	; (80098bc <HAL_RCC_OscConfig+0xe28>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	e01b      	b.n	8009818 <HAL_RCC_OscConfig+0xd84>
 80097e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80097e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	fa93 f2a3 	rbit	r2, r3
 80097f4:	f107 0320 	add.w	r3, r7, #32
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	f107 031c 	add.w	r3, r7, #28
 80097fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	f107 031c 	add.w	r3, r7, #28
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	fa93 f2a3 	rbit	r2, r3
 800980e:	f107 0318 	add.w	r3, r7, #24
 8009812:	601a      	str	r2, [r3, #0]
 8009814:	4b29      	ldr	r3, [pc, #164]	; (80098bc <HAL_RCC_OscConfig+0xe28>)
 8009816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009818:	f107 0214 	add.w	r2, r7, #20
 800981c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009820:	6011      	str	r1, [r2, #0]
 8009822:	f107 0214 	add.w	r2, r7, #20
 8009826:	6812      	ldr	r2, [r2, #0]
 8009828:	fa92 f1a2 	rbit	r1, r2
 800982c:	f107 0210 	add.w	r2, r7, #16
 8009830:	6011      	str	r1, [r2, #0]
  return result;
 8009832:	f107 0210 	add.w	r2, r7, #16
 8009836:	6812      	ldr	r2, [r2, #0]
 8009838:	fab2 f282 	clz	r2, r2
 800983c:	b2d2      	uxtb	r2, r2
 800983e:	f042 0220 	orr.w	r2, r2, #32
 8009842:	b2d2      	uxtb	r2, r2
 8009844:	f002 021f 	and.w	r2, r2, #31
 8009848:	2101      	movs	r1, #1
 800984a:	fa01 f202 	lsl.w	r2, r1, r2
 800984e:	4013      	ands	r3, r2
 8009850:	2b00      	cmp	r3, #0
 8009852:	d19e      	bne.n	8009792 <HAL_RCC_OscConfig+0xcfe>
 8009854:	e02b      	b.n	80098ae <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009856:	1d3b      	adds	r3, r7, #4
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d101      	bne.n	8009864 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e025      	b.n	80098b0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009864:	4b15      	ldr	r3, [pc, #84]	; (80098bc <HAL_RCC_OscConfig+0xe28>)
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800986c:	4b13      	ldr	r3, [pc, #76]	; (80098bc <HAL_RCC_OscConfig+0xe28>)
 800986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009870:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009874:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009878:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800987c:	1d3b      	adds	r3, r7, #4
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69db      	ldr	r3, [r3, #28]
 8009882:	429a      	cmp	r2, r3
 8009884:	d111      	bne.n	80098aa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009886:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800988a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800988e:	1d3b      	adds	r3, r7, #4
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009894:	429a      	cmp	r2, r3
 8009896:	d108      	bne.n	80098aa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8009898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800989c:	f003 020f 	and.w	r2, r3, #15
 80098a0:	1d3b      	adds	r3, r7, #4
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d001      	beq.n	80098ae <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e000      	b.n	80098b0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	40021000 	.word	0x40021000

080098c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b09e      	sub	sp, #120	; 0x78
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e162      	b.n	8009b9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80098d8:	4b90      	ldr	r3, [pc, #576]	; (8009b1c <HAL_RCC_ClockConfig+0x25c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0307 	and.w	r3, r3, #7
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d910      	bls.n	8009908 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098e6:	4b8d      	ldr	r3, [pc, #564]	; (8009b1c <HAL_RCC_ClockConfig+0x25c>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f023 0207 	bic.w	r2, r3, #7
 80098ee:	498b      	ldr	r1, [pc, #556]	; (8009b1c <HAL_RCC_ClockConfig+0x25c>)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098f6:	4b89      	ldr	r3, [pc, #548]	; (8009b1c <HAL_RCC_ClockConfig+0x25c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0307 	and.w	r3, r3, #7
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	429a      	cmp	r2, r3
 8009902:	d001      	beq.n	8009908 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e14a      	b.n	8009b9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0302 	and.w	r3, r3, #2
 8009910:	2b00      	cmp	r3, #0
 8009912:	d008      	beq.n	8009926 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009914:	4b82      	ldr	r3, [pc, #520]	; (8009b20 <HAL_RCC_ClockConfig+0x260>)
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	497f      	ldr	r1, [pc, #508]	; (8009b20 <HAL_RCC_ClockConfig+0x260>)
 8009922:	4313      	orrs	r3, r2
 8009924:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 80dc 	beq.w	8009aec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d13c      	bne.n	80099b6 <HAL_RCC_ClockConfig+0xf6>
 800993c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009940:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009944:	fa93 f3a3 	rbit	r3, r3
 8009948:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800994a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800994c:	fab3 f383 	clz	r3, r3
 8009950:	b2db      	uxtb	r3, r3
 8009952:	095b      	lsrs	r3, r3, #5
 8009954:	b2db      	uxtb	r3, r3
 8009956:	f043 0301 	orr.w	r3, r3, #1
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b01      	cmp	r3, #1
 800995e:	d102      	bne.n	8009966 <HAL_RCC_ClockConfig+0xa6>
 8009960:	4b6f      	ldr	r3, [pc, #444]	; (8009b20 <HAL_RCC_ClockConfig+0x260>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	e00f      	b.n	8009986 <HAL_RCC_ClockConfig+0xc6>
 8009966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800996a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800996c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800996e:	fa93 f3a3 	rbit	r3, r3
 8009972:	667b      	str	r3, [r7, #100]	; 0x64
 8009974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009978:	663b      	str	r3, [r7, #96]	; 0x60
 800997a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800997c:	fa93 f3a3 	rbit	r3, r3
 8009980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009982:	4b67      	ldr	r3, [pc, #412]	; (8009b20 <HAL_RCC_ClockConfig+0x260>)
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800998a:	65ba      	str	r2, [r7, #88]	; 0x58
 800998c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800998e:	fa92 f2a2 	rbit	r2, r2
 8009992:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8009994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009996:	fab2 f282 	clz	r2, r2
 800999a:	b2d2      	uxtb	r2, r2
 800999c:	f042 0220 	orr.w	r2, r2, #32
 80099a0:	b2d2      	uxtb	r2, r2
 80099a2:	f002 021f 	and.w	r2, r2, #31
 80099a6:	2101      	movs	r1, #1
 80099a8:	fa01 f202 	lsl.w	r2, r1, r2
 80099ac:	4013      	ands	r3, r2
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d17b      	bne.n	8009aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e0f3      	b.n	8009b9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d13c      	bne.n	8009a38 <HAL_RCC_ClockConfig+0x178>
 80099be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099c6:	fa93 f3a3 	rbit	r3, r3
 80099ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80099cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099ce:	fab3 f383 	clz	r3, r3
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	095b      	lsrs	r3, r3, #5
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	f043 0301 	orr.w	r3, r3, #1
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d102      	bne.n	80099e8 <HAL_RCC_ClockConfig+0x128>
 80099e2:	4b4f      	ldr	r3, [pc, #316]	; (8009b20 <HAL_RCC_ClockConfig+0x260>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	e00f      	b.n	8009a08 <HAL_RCC_ClockConfig+0x148>
 80099e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099f0:	fa93 f3a3 	rbit	r3, r3
 80099f4:	647b      	str	r3, [r7, #68]	; 0x44
 80099f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099fa:	643b      	str	r3, [r7, #64]	; 0x40
 80099fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099fe:	fa93 f3a3 	rbit	r3, r3
 8009a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a04:	4b46      	ldr	r3, [pc, #280]	; (8009b20 <HAL_RCC_ClockConfig+0x260>)
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8009a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a10:	fa92 f2a2 	rbit	r2, r2
 8009a14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8009a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a18:	fab2 f282 	clz	r2, r2
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	f042 0220 	orr.w	r2, r2, #32
 8009a22:	b2d2      	uxtb	r2, r2
 8009a24:	f002 021f 	and.w	r2, r2, #31
 8009a28:	2101      	movs	r1, #1
 8009a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8009a2e:	4013      	ands	r3, r2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d13a      	bne.n	8009aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e0b2      	b.n	8009b9e <HAL_RCC_ClockConfig+0x2de>
 8009a38:	2302      	movs	r3, #2
 8009a3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3e:	fa93 f3a3 	rbit	r3, r3
 8009a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a46:	fab3 f383 	clz	r3, r3
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	095b      	lsrs	r3, r3, #5
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	f043 0301 	orr.w	r3, r3, #1
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d102      	bne.n	8009a60 <HAL_RCC_ClockConfig+0x1a0>
 8009a5a:	4b31      	ldr	r3, [pc, #196]	; (8009b20 <HAL_RCC_ClockConfig+0x260>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	e00d      	b.n	8009a7c <HAL_RCC_ClockConfig+0x1bc>
 8009a60:	2302      	movs	r3, #2
 8009a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	fa93 f3a3 	rbit	r3, r3
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	623b      	str	r3, [r7, #32]
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	fa93 f3a3 	rbit	r3, r3
 8009a76:	61fb      	str	r3, [r7, #28]
 8009a78:	4b29      	ldr	r3, [pc, #164]	; (8009b20 <HAL_RCC_ClockConfig+0x260>)
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	61ba      	str	r2, [r7, #24]
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	fa92 f2a2 	rbit	r2, r2
 8009a86:	617a      	str	r2, [r7, #20]
  return result;
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	fab2 f282 	clz	r2, r2
 8009a8e:	b2d2      	uxtb	r2, r2
 8009a90:	f042 0220 	orr.w	r2, r2, #32
 8009a94:	b2d2      	uxtb	r2, r2
 8009a96:	f002 021f 	and.w	r2, r2, #31
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e079      	b.n	8009b9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009aaa:	4b1d      	ldr	r3, [pc, #116]	; (8009b20 <HAL_RCC_ClockConfig+0x260>)
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f023 0203 	bic.w	r2, r3, #3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	491a      	ldr	r1, [pc, #104]	; (8009b20 <HAL_RCC_ClockConfig+0x260>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009abc:	f7fc fafc 	bl	80060b8 <HAL_GetTick>
 8009ac0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ac2:	e00a      	b.n	8009ada <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ac4:	f7fc faf8 	bl	80060b8 <HAL_GetTick>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d901      	bls.n	8009ada <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e061      	b.n	8009b9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ada:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <HAL_RCC_ClockConfig+0x260>)
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	f003 020c 	and.w	r2, r3, #12
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d1eb      	bne.n	8009ac4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009aec:	4b0b      	ldr	r3, [pc, #44]	; (8009b1c <HAL_RCC_ClockConfig+0x25c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0307 	and.w	r3, r3, #7
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d214      	bcs.n	8009b24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009afa:	4b08      	ldr	r3, [pc, #32]	; (8009b1c <HAL_RCC_ClockConfig+0x25c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f023 0207 	bic.w	r2, r3, #7
 8009b02:	4906      	ldr	r1, [pc, #24]	; (8009b1c <HAL_RCC_ClockConfig+0x25c>)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b0a:	4b04      	ldr	r3, [pc, #16]	; (8009b1c <HAL_RCC_ClockConfig+0x25c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0307 	and.w	r3, r3, #7
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d005      	beq.n	8009b24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e040      	b.n	8009b9e <HAL_RCC_ClockConfig+0x2de>
 8009b1c:	40022000 	.word	0x40022000
 8009b20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d008      	beq.n	8009b42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b30:	4b1d      	ldr	r3, [pc, #116]	; (8009ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	491a      	ldr	r1, [pc, #104]	; (8009ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0308 	and.w	r3, r3, #8
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d009      	beq.n	8009b62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b4e:	4b16      	ldr	r3, [pc, #88]	; (8009ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	4912      	ldr	r1, [pc, #72]	; (8009ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8009b62:	f000 f829 	bl	8009bb8 <HAL_RCC_GetSysClockFreq>
 8009b66:	4601      	mov	r1, r0
 8009b68:	4b0f      	ldr	r3, [pc, #60]	; (8009ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b70:	22f0      	movs	r2, #240	; 0xf0
 8009b72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	fa92 f2a2 	rbit	r2, r2
 8009b7a:	60fa      	str	r2, [r7, #12]
  return result;
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	fab2 f282 	clz	r2, r2
 8009b82:	b2d2      	uxtb	r2, r2
 8009b84:	40d3      	lsrs	r3, r2
 8009b86:	4a09      	ldr	r2, [pc, #36]	; (8009bac <HAL_RCC_ClockConfig+0x2ec>)
 8009b88:	5cd3      	ldrb	r3, [r2, r3]
 8009b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8009b8e:	4a08      	ldr	r2, [pc, #32]	; (8009bb0 <HAL_RCC_ClockConfig+0x2f0>)
 8009b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8009b92:	4b08      	ldr	r3, [pc, #32]	; (8009bb4 <HAL_RCC_ClockConfig+0x2f4>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fc fa4a 	bl	8006030 <HAL_InitTick>
  
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3778      	adds	r7, #120	; 0x78
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	40021000 	.word	0x40021000
 8009bac:	0800e570 	.word	0x0800e570
 8009bb0:	20000020 	.word	0x20000020
 8009bb4:	20000024 	.word	0x20000024

08009bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b08b      	sub	sp, #44	; 0x2c
 8009bbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	61fb      	str	r3, [r7, #28]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	61bb      	str	r3, [r7, #24]
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8009bca:	2300      	movs	r3, #0
 8009bcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8009bd2:	4b2a      	ldr	r3, [pc, #168]	; (8009c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	f003 030c 	and.w	r3, r3, #12
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d002      	beq.n	8009be8 <HAL_RCC_GetSysClockFreq+0x30>
 8009be2:	2b08      	cmp	r3, #8
 8009be4:	d003      	beq.n	8009bee <HAL_RCC_GetSysClockFreq+0x36>
 8009be6:	e03f      	b.n	8009c68 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009be8:	4b25      	ldr	r3, [pc, #148]	; (8009c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009bea:	623b      	str	r3, [r7, #32]
      break;
 8009bec:	e03f      	b.n	8009c6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8009bf4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8009bf8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	fa92 f2a2 	rbit	r2, r2
 8009c00:	607a      	str	r2, [r7, #4]
  return result;
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	fab2 f282 	clz	r2, r2
 8009c08:	b2d2      	uxtb	r2, r2
 8009c0a:	40d3      	lsrs	r3, r2
 8009c0c:	4a1d      	ldr	r2, [pc, #116]	; (8009c84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009c0e:	5cd3      	ldrb	r3, [r2, r3]
 8009c10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009c12:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8009c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c16:	f003 030f 	and.w	r3, r3, #15
 8009c1a:	220f      	movs	r2, #15
 8009c1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	fa92 f2a2 	rbit	r2, r2
 8009c24:	60fa      	str	r2, [r7, #12]
  return result;
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	fab2 f282 	clz	r2, r2
 8009c2c:	b2d2      	uxtb	r2, r2
 8009c2e:	40d3      	lsrs	r3, r2
 8009c30:	4a15      	ldr	r2, [pc, #84]	; (8009c88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009c32:	5cd3      	ldrb	r3, [r2, r3]
 8009c34:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d008      	beq.n	8009c52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009c40:	4a0f      	ldr	r2, [pc, #60]	; (8009c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	fb02 f303 	mul.w	r3, r2, r3
 8009c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c50:	e007      	b.n	8009c62 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009c52:	4a0b      	ldr	r2, [pc, #44]	; (8009c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	fb02 f303 	mul.w	r3, r2, r3
 8009c60:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	623b      	str	r3, [r7, #32]
      break;
 8009c66:	e002      	b.n	8009c6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009c68:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009c6a:	623b      	str	r3, [r7, #32]
      break;
 8009c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c6e:	6a3b      	ldr	r3, [r7, #32]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	372c      	adds	r7, #44	; 0x2c
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	40021000 	.word	0x40021000
 8009c80:	007a1200 	.word	0x007a1200
 8009c84:	0800e588 	.word	0x0800e588
 8009c88:	0800e598 	.word	0x0800e598

08009c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c90:	4b03      	ldr	r3, [pc, #12]	; (8009ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009c92:	681b      	ldr	r3, [r3, #0]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	20000020 	.word	0x20000020

08009ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8009caa:	f7ff ffef 	bl	8009c8c <HAL_RCC_GetHCLKFreq>
 8009cae:	4601      	mov	r1, r0
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cb8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009cbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	fa92 f2a2 	rbit	r2, r2
 8009cc4:	603a      	str	r2, [r7, #0]
  return result;
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	fab2 f282 	clz	r2, r2
 8009ccc:	b2d2      	uxtb	r2, r2
 8009cce:	40d3      	lsrs	r3, r2
 8009cd0:	4a04      	ldr	r2, [pc, #16]	; (8009ce4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009cd2:	5cd3      	ldrb	r3, [r2, r3]
 8009cd4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	40021000 	.word	0x40021000
 8009ce4:	0800e580 	.word	0x0800e580

08009ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8009cee:	f7ff ffcd 	bl	8009c8c <HAL_RCC_GetHCLKFreq>
 8009cf2:	4601      	mov	r1, r0
 8009cf4:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8009cfc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009d00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	fa92 f2a2 	rbit	r2, r2
 8009d08:	603a      	str	r2, [r7, #0]
  return result;
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	fab2 f282 	clz	r2, r2
 8009d10:	b2d2      	uxtb	r2, r2
 8009d12:	40d3      	lsrs	r3, r2
 8009d14:	4a04      	ldr	r2, [pc, #16]	; (8009d28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8009d16:	5cd3      	ldrb	r3, [r2, r3]
 8009d18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	40021000 	.word	0x40021000
 8009d28:	0800e580 	.word	0x0800e580

08009d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b092      	sub	sp, #72	; 0x48
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f000 80d4 	beq.w	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d50:	4b4e      	ldr	r3, [pc, #312]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d52:	69db      	ldr	r3, [r3, #28]
 8009d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10e      	bne.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d5c:	4b4b      	ldr	r3, [pc, #300]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	4a4a      	ldr	r2, [pc, #296]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d66:	61d3      	str	r3, [r2, #28]
 8009d68:	4b48      	ldr	r3, [pc, #288]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d70:	60bb      	str	r3, [r7, #8]
 8009d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d74:	2301      	movs	r3, #1
 8009d76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d7a:	4b45      	ldr	r3, [pc, #276]	; (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d118      	bne.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d86:	4b42      	ldr	r3, [pc, #264]	; (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a41      	ldr	r2, [pc, #260]	; (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d92:	f7fc f991 	bl	80060b8 <HAL_GetTick>
 8009d96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d98:	e008      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d9a:	f7fc f98d 	bl	80060b8 <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	2b64      	cmp	r3, #100	; 0x64
 8009da6:	d901      	bls.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e1d6      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dac:	4b38      	ldr	r3, [pc, #224]	; (8009e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d0f0      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009db8:	4b34      	ldr	r3, [pc, #208]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 8084 	beq.w	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d07c      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009dd8:	4b2c      	ldr	r3, [pc, #176]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009de6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dea:	fa93 f3a3 	rbit	r3, r3
 8009dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009df2:	fab3 f383 	clz	r3, r3
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	461a      	mov	r2, r3
 8009dfa:	4b26      	ldr	r3, [pc, #152]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009dfc:	4413      	add	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	461a      	mov	r2, r3
 8009e02:	2301      	movs	r3, #1
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0e:	fa93 f3a3 	rbit	r3, r3
 8009e12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009e16:	fab3 f383 	clz	r3, r3
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4b1d      	ldr	r3, [pc, #116]	; (8009e94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	461a      	mov	r2, r3
 8009e26:	2300      	movs	r3, #0
 8009e28:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009e2a:	4a18      	ldr	r2, [pc, #96]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e2e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d04b      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e3a:	f7fc f93d 	bl	80060b8 <HAL_GetTick>
 8009e3e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e40:	e00a      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e42:	f7fc f939 	bl	80060b8 <HAL_GetTick>
 8009e46:	4602      	mov	r2, r0
 8009e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d901      	bls.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009e54:	2303      	movs	r3, #3
 8009e56:	e180      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009e58:	2302      	movs	r3, #2
 8009e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	fa93 f3a3 	rbit	r3, r3
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
 8009e64:	2302      	movs	r3, #2
 8009e66:	623b      	str	r3, [r7, #32]
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	fa93 f3a3 	rbit	r3, r3
 8009e6e:	61fb      	str	r3, [r7, #28]
  return result;
 8009e70:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e72:	fab3 f383 	clz	r3, r3
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	095b      	lsrs	r3, r3, #5
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f043 0302 	orr.w	r3, r3, #2
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d108      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009e86:	4b01      	ldr	r3, [pc, #4]	; (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	e00d      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8009e8c:	40021000 	.word	0x40021000
 8009e90:	40007000 	.word	0x40007000
 8009e94:	10908100 	.word	0x10908100
 8009e98:	2302      	movs	r3, #2
 8009e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	fa93 f3a3 	rbit	r3, r3
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	4ba0      	ldr	r3, [pc, #640]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	613a      	str	r2, [r7, #16]
 8009eac:	693a      	ldr	r2, [r7, #16]
 8009eae:	fa92 f2a2 	rbit	r2, r2
 8009eb2:	60fa      	str	r2, [r7, #12]
  return result;
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	fab2 f282 	clz	r2, r2
 8009eba:	b2d2      	uxtb	r2, r2
 8009ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ec0:	b2d2      	uxtb	r2, r2
 8009ec2:	f002 021f 	and.w	r2, r2, #31
 8009ec6:	2101      	movs	r1, #1
 8009ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8009ecc:	4013      	ands	r3, r2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0b7      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009ed2:	4b95      	ldr	r3, [pc, #596]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	4992      	ldr	r1, [pc, #584]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009ee4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d105      	bne.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009eec:	4b8e      	ldr	r3, [pc, #568]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	4a8d      	ldr	r2, [pc, #564]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ef6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d008      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009f04:	4b88      	ldr	r3, [pc, #544]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f08:	f023 0203 	bic.w	r2, r3, #3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	4985      	ldr	r1, [pc, #532]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f12:	4313      	orrs	r3, r2
 8009f14:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d008      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009f22:	4b81      	ldr	r3, [pc, #516]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	497e      	ldr	r1, [pc, #504]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f30:	4313      	orrs	r3, r2
 8009f32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0304 	and.w	r3, r3, #4
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d008      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009f40:	4b79      	ldr	r3, [pc, #484]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	4976      	ldr	r1, [pc, #472]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0320 	and.w	r3, r3, #32
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d008      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f5e:	4b72      	ldr	r3, [pc, #456]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f62:	f023 0210 	bic.w	r2, r3, #16
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	496f      	ldr	r1, [pc, #444]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d008      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8009f7c:	4b6a      	ldr	r3, [pc, #424]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f88:	4967      	ldr	r1, [pc, #412]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d008      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009f9a:	4b63      	ldr	r3, [pc, #396]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9e:	f023 0220 	bic.w	r2, r3, #32
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	4960      	ldr	r1, [pc, #384]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d008      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009fb8:	4b5b      	ldr	r3, [pc, #364]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	4958      	ldr	r1, [pc, #352]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0308 	and.w	r3, r3, #8
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d008      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009fd6:	4b54      	ldr	r3, [pc, #336]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	4951      	ldr	r1, [pc, #324]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0310 	and.w	r3, r3, #16
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d008      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009ff4:	4b4c      	ldr	r3, [pc, #304]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	4949      	ldr	r1, [pc, #292]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a002:	4313      	orrs	r3, r2
 800a004:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d008      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a012:	4b45      	ldr	r3, [pc, #276]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	4942      	ldr	r1, [pc, #264]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a020:	4313      	orrs	r3, r2
 800a022:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d008      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a030:	4b3d      	ldr	r3, [pc, #244]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a034:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03c:	493a      	ldr	r1, [pc, #232]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d008      	beq.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a04e:	4b36      	ldr	r3, [pc, #216]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a052:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05a:	4933      	ldr	r1, [pc, #204]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d008      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a06c:	4b2e      	ldr	r3, [pc, #184]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a078:	492b      	ldr	r1, [pc, #172]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d008      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a08a:	4b27      	ldr	r3, [pc, #156]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a096:	4924      	ldr	r1, [pc, #144]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a098:	4313      	orrs	r3, r2
 800a09a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d008      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800a0a8:	4b1f      	ldr	r3, [pc, #124]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b4:	491c      	ldr	r1, [pc, #112]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d008      	beq.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800a0c6:	4b18      	ldr	r3, [pc, #96]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d2:	4915      	ldr	r1, [pc, #84]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d008      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a0e4:	4b10      	ldr	r3, [pc, #64]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f0:	490d      	ldr	r1, [pc, #52]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d008      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800a102:	4b09      	ldr	r3, [pc, #36]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a106:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a10e:	4906      	ldr	r1, [pc, #24]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a110:	4313      	orrs	r3, r2
 800a112:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00c      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800a120:	4b01      	ldr	r3, [pc, #4]	; (800a128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a124:	e002      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x400>
 800a126:	bf00      	nop
 800a128:	40021000 	.word	0x40021000
 800a12c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a134:	490b      	ldr	r1, [pc, #44]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a136:	4313      	orrs	r3, r2
 800a138:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d008      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800a146:	4b07      	ldr	r3, [pc, #28]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a152:	4904      	ldr	r1, [pc, #16]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a154:	4313      	orrs	r3, r2
 800a156:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3748      	adds	r7, #72	; 0x48
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	40021000 	.word	0x40021000

0800a168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e049      	b.n	800a20e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	d106      	bne.n	800a194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7fb fda8 	bl	8005ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	f000 fce2 	bl	800ab70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
	...

0800a218 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d001      	beq.n	800a230 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e047      	b.n	800a2c0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a23      	ldr	r2, [pc, #140]	; (800a2cc <HAL_TIM_Base_Start+0xb4>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d01d      	beq.n	800a27e <HAL_TIM_Base_Start+0x66>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a24a:	d018      	beq.n	800a27e <HAL_TIM_Base_Start+0x66>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a1f      	ldr	r2, [pc, #124]	; (800a2d0 <HAL_TIM_Base_Start+0xb8>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d013      	beq.n	800a27e <HAL_TIM_Base_Start+0x66>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a1e      	ldr	r2, [pc, #120]	; (800a2d4 <HAL_TIM_Base_Start+0xbc>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d00e      	beq.n	800a27e <HAL_TIM_Base_Start+0x66>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a1c      	ldr	r2, [pc, #112]	; (800a2d8 <HAL_TIM_Base_Start+0xc0>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d009      	beq.n	800a27e <HAL_TIM_Base_Start+0x66>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a1b      	ldr	r2, [pc, #108]	; (800a2dc <HAL_TIM_Base_Start+0xc4>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d004      	beq.n	800a27e <HAL_TIM_Base_Start+0x66>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a19      	ldr	r2, [pc, #100]	; (800a2e0 <HAL_TIM_Base_Start+0xc8>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d115      	bne.n	800a2aa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689a      	ldr	r2, [r3, #8]
 800a284:	4b17      	ldr	r3, [pc, #92]	; (800a2e4 <HAL_TIM_Base_Start+0xcc>)
 800a286:	4013      	ands	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2b06      	cmp	r3, #6
 800a28e:	d015      	beq.n	800a2bc <HAL_TIM_Base_Start+0xa4>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a296:	d011      	beq.n	800a2bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0201 	orr.w	r2, r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2a8:	e008      	b.n	800a2bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f042 0201 	orr.w	r2, r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	e000      	b.n	800a2be <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	40012c00 	.word	0x40012c00
 800a2d0:	40000400 	.word	0x40000400
 800a2d4:	40000800 	.word	0x40000800
 800a2d8:	40013400 	.word	0x40013400
 800a2dc:	40014000 	.word	0x40014000
 800a2e0:	40015000 	.word	0x40015000
 800a2e4:	00010007 	.word	0x00010007

0800a2e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e049      	b.n	800a38e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d106      	bne.n	800a314 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f841 	bl	800a396 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2202      	movs	r2, #2
 800a318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	3304      	adds	r3, #4
 800a324:	4619      	mov	r1, r3
 800a326:	4610      	mov	r0, r2
 800a328:	f000 fc22 	bl	800ab70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a39e:	bf00      	nop
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
	...

0800a3ac <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d109      	bne.n	800a3d4 <HAL_TIM_OC_Start_IT+0x28>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	bf14      	ite	ne
 800a3cc:	2301      	movne	r3, #1
 800a3ce:	2300      	moveq	r3, #0
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	e03c      	b.n	800a44e <HAL_TIM_OC_Start_IT+0xa2>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d109      	bne.n	800a3ee <HAL_TIM_OC_Start_IT+0x42>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	bf14      	ite	ne
 800a3e6:	2301      	movne	r3, #1
 800a3e8:	2300      	moveq	r3, #0
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	e02f      	b.n	800a44e <HAL_TIM_OC_Start_IT+0xa2>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2b08      	cmp	r3, #8
 800a3f2:	d109      	bne.n	800a408 <HAL_TIM_OC_Start_IT+0x5c>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	bf14      	ite	ne
 800a400:	2301      	movne	r3, #1
 800a402:	2300      	moveq	r3, #0
 800a404:	b2db      	uxtb	r3, r3
 800a406:	e022      	b.n	800a44e <HAL_TIM_OC_Start_IT+0xa2>
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2b0c      	cmp	r3, #12
 800a40c:	d109      	bne.n	800a422 <HAL_TIM_OC_Start_IT+0x76>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b01      	cmp	r3, #1
 800a418:	bf14      	ite	ne
 800a41a:	2301      	movne	r3, #1
 800a41c:	2300      	moveq	r3, #0
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	e015      	b.n	800a44e <HAL_TIM_OC_Start_IT+0xa2>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b10      	cmp	r3, #16
 800a426:	d109      	bne.n	800a43c <HAL_TIM_OC_Start_IT+0x90>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b01      	cmp	r3, #1
 800a432:	bf14      	ite	ne
 800a434:	2301      	movne	r3, #1
 800a436:	2300      	moveq	r3, #0
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	e008      	b.n	800a44e <HAL_TIM_OC_Start_IT+0xa2>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b01      	cmp	r3, #1
 800a446:	bf14      	ite	ne
 800a448:	2301      	movne	r3, #1
 800a44a:	2300      	moveq	r3, #0
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d001      	beq.n	800a456 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e0ec      	b.n	800a630 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <HAL_TIM_OC_Start_IT+0xba>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2202      	movs	r2, #2
 800a460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a464:	e023      	b.n	800a4ae <HAL_TIM_OC_Start_IT+0x102>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b04      	cmp	r3, #4
 800a46a:	d104      	bne.n	800a476 <HAL_TIM_OC_Start_IT+0xca>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2202      	movs	r2, #2
 800a470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a474:	e01b      	b.n	800a4ae <HAL_TIM_OC_Start_IT+0x102>
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2b08      	cmp	r3, #8
 800a47a:	d104      	bne.n	800a486 <HAL_TIM_OC_Start_IT+0xda>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2202      	movs	r2, #2
 800a480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a484:	e013      	b.n	800a4ae <HAL_TIM_OC_Start_IT+0x102>
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b0c      	cmp	r3, #12
 800a48a:	d104      	bne.n	800a496 <HAL_TIM_OC_Start_IT+0xea>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2202      	movs	r2, #2
 800a490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a494:	e00b      	b.n	800a4ae <HAL_TIM_OC_Start_IT+0x102>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b10      	cmp	r3, #16
 800a49a:	d104      	bne.n	800a4a6 <HAL_TIM_OC_Start_IT+0xfa>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4a4:	e003      	b.n	800a4ae <HAL_TIM_OC_Start_IT+0x102>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2202      	movs	r2, #2
 800a4aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b0c      	cmp	r3, #12
 800a4b2:	d841      	bhi.n	800a538 <HAL_TIM_OC_Start_IT+0x18c>
 800a4b4:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <HAL_TIM_OC_Start_IT+0x110>)
 800a4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ba:	bf00      	nop
 800a4bc:	0800a4f1 	.word	0x0800a4f1
 800a4c0:	0800a539 	.word	0x0800a539
 800a4c4:	0800a539 	.word	0x0800a539
 800a4c8:	0800a539 	.word	0x0800a539
 800a4cc:	0800a503 	.word	0x0800a503
 800a4d0:	0800a539 	.word	0x0800a539
 800a4d4:	0800a539 	.word	0x0800a539
 800a4d8:	0800a539 	.word	0x0800a539
 800a4dc:	0800a515 	.word	0x0800a515
 800a4e0:	0800a539 	.word	0x0800a539
 800a4e4:	0800a539 	.word	0x0800a539
 800a4e8:	0800a539 	.word	0x0800a539
 800a4ec:	0800a527 	.word	0x0800a527
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0202 	orr.w	r2, r2, #2
 800a4fe:	60da      	str	r2, [r3, #12]
      break;
 800a500:	e01d      	b.n	800a53e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68da      	ldr	r2, [r3, #12]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f042 0204 	orr.w	r2, r2, #4
 800a510:	60da      	str	r2, [r3, #12]
      break;
 800a512:	e014      	b.n	800a53e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68da      	ldr	r2, [r3, #12]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f042 0208 	orr.w	r2, r2, #8
 800a522:	60da      	str	r2, [r3, #12]
      break;
 800a524:	e00b      	b.n	800a53e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68da      	ldr	r2, [r3, #12]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f042 0210 	orr.w	r2, r2, #16
 800a534:	60da      	str	r2, [r3, #12]
      break;
 800a536:	e002      	b.n	800a53e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	73fb      	strb	r3, [r7, #15]
      break;
 800a53c:	bf00      	nop
  }

  if (status == HAL_OK)
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d174      	bne.n	800a62e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2201      	movs	r2, #1
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 ff4d 	bl	800b3ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a38      	ldr	r2, [pc, #224]	; (800a638 <HAL_TIM_OC_Start_IT+0x28c>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d018      	beq.n	800a58e <HAL_TIM_OC_Start_IT+0x1e2>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a36      	ldr	r2, [pc, #216]	; (800a63c <HAL_TIM_OC_Start_IT+0x290>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d013      	beq.n	800a58e <HAL_TIM_OC_Start_IT+0x1e2>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a35      	ldr	r2, [pc, #212]	; (800a640 <HAL_TIM_OC_Start_IT+0x294>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d00e      	beq.n	800a58e <HAL_TIM_OC_Start_IT+0x1e2>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a33      	ldr	r2, [pc, #204]	; (800a644 <HAL_TIM_OC_Start_IT+0x298>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d009      	beq.n	800a58e <HAL_TIM_OC_Start_IT+0x1e2>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a32      	ldr	r2, [pc, #200]	; (800a648 <HAL_TIM_OC_Start_IT+0x29c>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d004      	beq.n	800a58e <HAL_TIM_OC_Start_IT+0x1e2>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a30      	ldr	r2, [pc, #192]	; (800a64c <HAL_TIM_OC_Start_IT+0x2a0>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d101      	bne.n	800a592 <HAL_TIM_OC_Start_IT+0x1e6>
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <HAL_TIM_OC_Start_IT+0x1e8>
 800a592:	2300      	movs	r3, #0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d007      	beq.n	800a5a8 <HAL_TIM_OC_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a22      	ldr	r2, [pc, #136]	; (800a638 <HAL_TIM_OC_Start_IT+0x28c>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d01d      	beq.n	800a5ee <HAL_TIM_OC_Start_IT+0x242>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ba:	d018      	beq.n	800a5ee <HAL_TIM_OC_Start_IT+0x242>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a23      	ldr	r2, [pc, #140]	; (800a650 <HAL_TIM_OC_Start_IT+0x2a4>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d013      	beq.n	800a5ee <HAL_TIM_OC_Start_IT+0x242>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a22      	ldr	r2, [pc, #136]	; (800a654 <HAL_TIM_OC_Start_IT+0x2a8>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d00e      	beq.n	800a5ee <HAL_TIM_OC_Start_IT+0x242>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a19      	ldr	r2, [pc, #100]	; (800a63c <HAL_TIM_OC_Start_IT+0x290>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d009      	beq.n	800a5ee <HAL_TIM_OC_Start_IT+0x242>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a18      	ldr	r2, [pc, #96]	; (800a640 <HAL_TIM_OC_Start_IT+0x294>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d004      	beq.n	800a5ee <HAL_TIM_OC_Start_IT+0x242>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a18      	ldr	r2, [pc, #96]	; (800a64c <HAL_TIM_OC_Start_IT+0x2a0>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d115      	bne.n	800a61a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689a      	ldr	r2, [r3, #8]
 800a5f4:	4b18      	ldr	r3, [pc, #96]	; (800a658 <HAL_TIM_OC_Start_IT+0x2ac>)
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2b06      	cmp	r3, #6
 800a5fe:	d015      	beq.n	800a62c <HAL_TIM_OC_Start_IT+0x280>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a606:	d011      	beq.n	800a62c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0201 	orr.w	r2, r2, #1
 800a616:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a618:	e008      	b.n	800a62c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f042 0201 	orr.w	r2, r2, #1
 800a628:	601a      	str	r2, [r3, #0]
 800a62a:	e000      	b.n	800a62e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a62c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	40012c00 	.word	0x40012c00
 800a63c:	40013400 	.word	0x40013400
 800a640:	40014000 	.word	0x40014000
 800a644:	40014400 	.word	0x40014400
 800a648:	40014800 	.word	0x40014800
 800a64c:	40015000 	.word	0x40015000
 800a650:	40000400 	.word	0x40000400
 800a654:	40000800 	.word	0x40000800
 800a658:	00010007 	.word	0x00010007

0800a65c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	f003 0302 	and.w	r3, r3, #2
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d122      	bne.n	800a6b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f003 0302 	and.w	r3, r3, #2
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d11b      	bne.n	800a6b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f06f 0202 	mvn.w	r2, #2
 800a688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2201      	movs	r2, #1
 800a68e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	f003 0303 	and.w	r3, r3, #3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d003      	beq.n	800a6a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fa48 	bl	800ab34 <HAL_TIM_IC_CaptureCallback>
 800a6a4:	e005      	b.n	800a6b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fa3a 	bl	800ab20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fa4b 	bl	800ab48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	f003 0304 	and.w	r3, r3, #4
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d122      	bne.n	800a70c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	f003 0304 	and.w	r3, r3, #4
 800a6d0:	2b04      	cmp	r3, #4
 800a6d2:	d11b      	bne.n	800a70c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f06f 0204 	mvn.w	r2, #4
 800a6dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fa1e 	bl	800ab34 <HAL_TIM_IC_CaptureCallback>
 800a6f8:	e005      	b.n	800a706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fa10 	bl	800ab20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fa21 	bl	800ab48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	f003 0308 	and.w	r3, r3, #8
 800a716:	2b08      	cmp	r3, #8
 800a718:	d122      	bne.n	800a760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	f003 0308 	and.w	r3, r3, #8
 800a724:	2b08      	cmp	r3, #8
 800a726:	d11b      	bne.n	800a760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f06f 0208 	mvn.w	r2, #8
 800a730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2204      	movs	r2, #4
 800a736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	69db      	ldr	r3, [r3, #28]
 800a73e:	f003 0303 	and.w	r3, r3, #3
 800a742:	2b00      	cmp	r3, #0
 800a744:	d003      	beq.n	800a74e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f9f4 	bl	800ab34 <HAL_TIM_IC_CaptureCallback>
 800a74c:	e005      	b.n	800a75a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f9e6 	bl	800ab20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f9f7 	bl	800ab48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	f003 0310 	and.w	r3, r3, #16
 800a76a:	2b10      	cmp	r3, #16
 800a76c:	d122      	bne.n	800a7b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	f003 0310 	and.w	r3, r3, #16
 800a778:	2b10      	cmp	r3, #16
 800a77a:	d11b      	bne.n	800a7b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f06f 0210 	mvn.w	r2, #16
 800a784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2208      	movs	r2, #8
 800a78a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a796:	2b00      	cmp	r3, #0
 800a798:	d003      	beq.n	800a7a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f9ca 	bl	800ab34 <HAL_TIM_IC_CaptureCallback>
 800a7a0:	e005      	b.n	800a7ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f9bc 	bl	800ab20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f9cd 	bl	800ab48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d10e      	bne.n	800a7e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	f003 0301 	and.w	r3, r3, #1
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d107      	bne.n	800a7e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f06f 0201 	mvn.w	r2, #1
 800a7d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f996 	bl	800ab0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ea:	2b80      	cmp	r3, #128	; 0x80
 800a7ec:	d10e      	bne.n	800a80c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7f8:	2b80      	cmp	r3, #128	; 0x80
 800a7fa:	d107      	bne.n	800a80c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 ff32 	bl	800b670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a81a:	d10e      	bne.n	800a83a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a826:	2b80      	cmp	r3, #128	; 0x80
 800a828:	d107      	bne.n	800a83a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 ff25 	bl	800b684 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a844:	2b40      	cmp	r3, #64	; 0x40
 800a846:	d10e      	bne.n	800a866 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a852:	2b40      	cmp	r3, #64	; 0x40
 800a854:	d107      	bne.n	800a866 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f97b 	bl	800ab5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	f003 0320 	and.w	r3, r3, #32
 800a870:	2b20      	cmp	r3, #32
 800a872:	d10e      	bne.n	800a892 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	f003 0320 	and.w	r3, r3, #32
 800a87e:	2b20      	cmp	r3, #32
 800a880:	d107      	bne.n	800a892 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f06f 0220 	mvn.w	r2, #32
 800a88a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fee5 	bl	800b65c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a892:	bf00      	nop
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
	...

0800a89c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d101      	bne.n	800a8ba <HAL_TIM_OC_ConfigChannel+0x1e>
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	e066      	b.n	800a988 <HAL_TIM_OC_ConfigChannel+0xec>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b14      	cmp	r3, #20
 800a8c6:	d857      	bhi.n	800a978 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a8c8:	a201      	add	r2, pc, #4	; (adr r2, 800a8d0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ce:	bf00      	nop
 800a8d0:	0800a925 	.word	0x0800a925
 800a8d4:	0800a979 	.word	0x0800a979
 800a8d8:	0800a979 	.word	0x0800a979
 800a8dc:	0800a979 	.word	0x0800a979
 800a8e0:	0800a933 	.word	0x0800a933
 800a8e4:	0800a979 	.word	0x0800a979
 800a8e8:	0800a979 	.word	0x0800a979
 800a8ec:	0800a979 	.word	0x0800a979
 800a8f0:	0800a941 	.word	0x0800a941
 800a8f4:	0800a979 	.word	0x0800a979
 800a8f8:	0800a979 	.word	0x0800a979
 800a8fc:	0800a979 	.word	0x0800a979
 800a900:	0800a94f 	.word	0x0800a94f
 800a904:	0800a979 	.word	0x0800a979
 800a908:	0800a979 	.word	0x0800a979
 800a90c:	0800a979 	.word	0x0800a979
 800a910:	0800a95d 	.word	0x0800a95d
 800a914:	0800a979 	.word	0x0800a979
 800a918:	0800a979 	.word	0x0800a979
 800a91c:	0800a979 	.word	0x0800a979
 800a920:	0800a96b 	.word	0x0800a96b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68b9      	ldr	r1, [r7, #8]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 f9be 	bl	800acac <TIM_OC1_SetConfig>
      break;
 800a930:	e025      	b.n	800a97e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68b9      	ldr	r1, [r7, #8]
 800a938:	4618      	mov	r0, r3
 800a93a:	f000 fa51 	bl	800ade0 <TIM_OC2_SetConfig>
      break;
 800a93e:	e01e      	b.n	800a97e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68b9      	ldr	r1, [r7, #8]
 800a946:	4618      	mov	r0, r3
 800a948:	f000 fade 	bl	800af08 <TIM_OC3_SetConfig>
      break;
 800a94c:	e017      	b.n	800a97e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68b9      	ldr	r1, [r7, #8]
 800a954:	4618      	mov	r0, r3
 800a956:	f000 fb69 	bl	800b02c <TIM_OC4_SetConfig>
      break;
 800a95a:	e010      	b.n	800a97e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68b9      	ldr	r1, [r7, #8]
 800a962:	4618      	mov	r0, r3
 800a964:	f000 fbd2 	bl	800b10c <TIM_OC5_SetConfig>
      break;
 800a968:	e009      	b.n	800a97e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68b9      	ldr	r1, [r7, #8]
 800a970:	4618      	mov	r0, r3
 800a972:	f000 fc35 	bl	800b1e0 <TIM_OC6_SetConfig>
      break;
 800a976:	e002      	b.n	800a97e <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	75fb      	strb	r3, [r7, #23]
      break;
 800a97c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a986:	7dfb      	ldrb	r3, [r7, #23]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3718      	adds	r7, #24
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d101      	bne.n	800a9ac <HAL_TIM_ConfigClockSource+0x1c>
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	e0ab      	b.n	800ab04 <HAL_TIM_ConfigClockSource+0x174>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a9ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b40      	cmp	r3, #64	; 0x40
 800a9e6:	d067      	beq.n	800aab8 <HAL_TIM_ConfigClockSource+0x128>
 800a9e8:	2b40      	cmp	r3, #64	; 0x40
 800a9ea:	d80b      	bhi.n	800aa04 <HAL_TIM_ConfigClockSource+0x74>
 800a9ec:	2b10      	cmp	r3, #16
 800a9ee:	d073      	beq.n	800aad8 <HAL_TIM_ConfigClockSource+0x148>
 800a9f0:	2b10      	cmp	r3, #16
 800a9f2:	d802      	bhi.n	800a9fa <HAL_TIM_ConfigClockSource+0x6a>
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d06f      	beq.n	800aad8 <HAL_TIM_ConfigClockSource+0x148>
 800a9f8:	e077      	b.n	800aaea <HAL_TIM_ConfigClockSource+0x15a>
 800a9fa:	2b20      	cmp	r3, #32
 800a9fc:	d06c      	beq.n	800aad8 <HAL_TIM_ConfigClockSource+0x148>
 800a9fe:	2b30      	cmp	r3, #48	; 0x30
 800aa00:	d06a      	beq.n	800aad8 <HAL_TIM_ConfigClockSource+0x148>
 800aa02:	e072      	b.n	800aaea <HAL_TIM_ConfigClockSource+0x15a>
 800aa04:	2b70      	cmp	r3, #112	; 0x70
 800aa06:	d00d      	beq.n	800aa24 <HAL_TIM_ConfigClockSource+0x94>
 800aa08:	2b70      	cmp	r3, #112	; 0x70
 800aa0a:	d804      	bhi.n	800aa16 <HAL_TIM_ConfigClockSource+0x86>
 800aa0c:	2b50      	cmp	r3, #80	; 0x50
 800aa0e:	d033      	beq.n	800aa78 <HAL_TIM_ConfigClockSource+0xe8>
 800aa10:	2b60      	cmp	r3, #96	; 0x60
 800aa12:	d041      	beq.n	800aa98 <HAL_TIM_ConfigClockSource+0x108>
 800aa14:	e069      	b.n	800aaea <HAL_TIM_ConfigClockSource+0x15a>
 800aa16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa1a:	d069      	beq.n	800aaf0 <HAL_TIM_ConfigClockSource+0x160>
 800aa1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa20:	d017      	beq.n	800aa52 <HAL_TIM_ConfigClockSource+0xc2>
 800aa22:	e062      	b.n	800aaea <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6818      	ldr	r0, [r3, #0]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	6899      	ldr	r1, [r3, #8]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	685a      	ldr	r2, [r3, #4]
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	f000 fcba 	bl	800b3ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aa46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	609a      	str	r2, [r3, #8]
      break;
 800aa50:	e04f      	b.n	800aaf2 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6818      	ldr	r0, [r3, #0]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	6899      	ldr	r1, [r3, #8]
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	f000 fca3 	bl	800b3ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	689a      	ldr	r2, [r3, #8]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa74:	609a      	str	r2, [r3, #8]
      break;
 800aa76:	e03c      	b.n	800aaf2 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6818      	ldr	r0, [r3, #0]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	6859      	ldr	r1, [r3, #4]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	461a      	mov	r2, r3
 800aa86:	f000 fc17 	bl	800b2b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2150      	movs	r1, #80	; 0x50
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 fc70 	bl	800b376 <TIM_ITRx_SetConfig>
      break;
 800aa96:	e02c      	b.n	800aaf2 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6818      	ldr	r0, [r3, #0]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	6859      	ldr	r1, [r3, #4]
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	f000 fc36 	bl	800b316 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2160      	movs	r1, #96	; 0x60
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 fc60 	bl	800b376 <TIM_ITRx_SetConfig>
      break;
 800aab6:	e01c      	b.n	800aaf2 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	6859      	ldr	r1, [r3, #4]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	461a      	mov	r2, r3
 800aac6:	f000 fbf7 	bl	800b2b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2140      	movs	r1, #64	; 0x40
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 fc50 	bl	800b376 <TIM_ITRx_SetConfig>
      break;
 800aad6:	e00c      	b.n	800aaf2 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4619      	mov	r1, r3
 800aae2:	4610      	mov	r0, r2
 800aae4:	f000 fc47 	bl	800b376 <TIM_ITRx_SetConfig>
      break;
 800aae8:	e003      	b.n	800aaf2 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	73fb      	strb	r3, [r7, #15]
      break;
 800aaee:	e000      	b.n	800aaf2 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800aaf0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a42      	ldr	r2, [pc, #264]	; (800ac8c <TIM_Base_SetConfig+0x11c>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d013      	beq.n	800abb0 <TIM_Base_SetConfig+0x40>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab8e:	d00f      	beq.n	800abb0 <TIM_Base_SetConfig+0x40>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a3f      	ldr	r2, [pc, #252]	; (800ac90 <TIM_Base_SetConfig+0x120>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d00b      	beq.n	800abb0 <TIM_Base_SetConfig+0x40>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a3e      	ldr	r2, [pc, #248]	; (800ac94 <TIM_Base_SetConfig+0x124>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d007      	beq.n	800abb0 <TIM_Base_SetConfig+0x40>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a3d      	ldr	r2, [pc, #244]	; (800ac98 <TIM_Base_SetConfig+0x128>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d003      	beq.n	800abb0 <TIM_Base_SetConfig+0x40>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a3c      	ldr	r2, [pc, #240]	; (800ac9c <TIM_Base_SetConfig+0x12c>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d108      	bne.n	800abc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a31      	ldr	r2, [pc, #196]	; (800ac8c <TIM_Base_SetConfig+0x11c>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d01f      	beq.n	800ac0a <TIM_Base_SetConfig+0x9a>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abd0:	d01b      	beq.n	800ac0a <TIM_Base_SetConfig+0x9a>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a2e      	ldr	r2, [pc, #184]	; (800ac90 <TIM_Base_SetConfig+0x120>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d017      	beq.n	800ac0a <TIM_Base_SetConfig+0x9a>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a2d      	ldr	r2, [pc, #180]	; (800ac94 <TIM_Base_SetConfig+0x124>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d013      	beq.n	800ac0a <TIM_Base_SetConfig+0x9a>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a2c      	ldr	r2, [pc, #176]	; (800ac98 <TIM_Base_SetConfig+0x128>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d00f      	beq.n	800ac0a <TIM_Base_SetConfig+0x9a>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a2c      	ldr	r2, [pc, #176]	; (800aca0 <TIM_Base_SetConfig+0x130>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d00b      	beq.n	800ac0a <TIM_Base_SetConfig+0x9a>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a2b      	ldr	r2, [pc, #172]	; (800aca4 <TIM_Base_SetConfig+0x134>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d007      	beq.n	800ac0a <TIM_Base_SetConfig+0x9a>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a2a      	ldr	r2, [pc, #168]	; (800aca8 <TIM_Base_SetConfig+0x138>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d003      	beq.n	800ac0a <TIM_Base_SetConfig+0x9a>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a25      	ldr	r2, [pc, #148]	; (800ac9c <TIM_Base_SetConfig+0x12c>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d108      	bne.n	800ac1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	689a      	ldr	r2, [r3, #8]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a12      	ldr	r2, [pc, #72]	; (800ac8c <TIM_Base_SetConfig+0x11c>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d013      	beq.n	800ac70 <TIM_Base_SetConfig+0x100>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a13      	ldr	r2, [pc, #76]	; (800ac98 <TIM_Base_SetConfig+0x128>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00f      	beq.n	800ac70 <TIM_Base_SetConfig+0x100>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a13      	ldr	r2, [pc, #76]	; (800aca0 <TIM_Base_SetConfig+0x130>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d00b      	beq.n	800ac70 <TIM_Base_SetConfig+0x100>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a12      	ldr	r2, [pc, #72]	; (800aca4 <TIM_Base_SetConfig+0x134>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d007      	beq.n	800ac70 <TIM_Base_SetConfig+0x100>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a11      	ldr	r2, [pc, #68]	; (800aca8 <TIM_Base_SetConfig+0x138>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d003      	beq.n	800ac70 <TIM_Base_SetConfig+0x100>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a0c      	ldr	r2, [pc, #48]	; (800ac9c <TIM_Base_SetConfig+0x12c>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d103      	bne.n	800ac78 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	691a      	ldr	r2, [r3, #16]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	615a      	str	r2, [r3, #20]
}
 800ac7e:	bf00      	nop
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	40012c00 	.word	0x40012c00
 800ac90:	40000400 	.word	0x40000400
 800ac94:	40000800 	.word	0x40000800
 800ac98:	40013400 	.word	0x40013400
 800ac9c:	40015000 	.word	0x40015000
 800aca0:	40014000 	.word	0x40014000
 800aca4:	40014400 	.word	0x40014400
 800aca8:	40014800 	.word	0x40014800

0800acac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acac:	b480      	push	{r7}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	f023 0201 	bic.w	r2, r3, #1
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f023 0303 	bic.w	r3, r3, #3
 800ace6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	4313      	orrs	r3, r2
 800acf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f023 0302 	bic.w	r3, r3, #2
 800acf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a30      	ldr	r2, [pc, #192]	; (800adc8 <TIM_OC1_SetConfig+0x11c>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d013      	beq.n	800ad34 <TIM_OC1_SetConfig+0x88>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a2f      	ldr	r2, [pc, #188]	; (800adcc <TIM_OC1_SetConfig+0x120>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d00f      	beq.n	800ad34 <TIM_OC1_SetConfig+0x88>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a2e      	ldr	r2, [pc, #184]	; (800add0 <TIM_OC1_SetConfig+0x124>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d00b      	beq.n	800ad34 <TIM_OC1_SetConfig+0x88>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a2d      	ldr	r2, [pc, #180]	; (800add4 <TIM_OC1_SetConfig+0x128>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d007      	beq.n	800ad34 <TIM_OC1_SetConfig+0x88>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a2c      	ldr	r2, [pc, #176]	; (800add8 <TIM_OC1_SetConfig+0x12c>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d003      	beq.n	800ad34 <TIM_OC1_SetConfig+0x88>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a2b      	ldr	r2, [pc, #172]	; (800addc <TIM_OC1_SetConfig+0x130>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d10c      	bne.n	800ad4e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	f023 0308 	bic.w	r3, r3, #8
 800ad3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f023 0304 	bic.w	r3, r3, #4
 800ad4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a1d      	ldr	r2, [pc, #116]	; (800adc8 <TIM_OC1_SetConfig+0x11c>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d013      	beq.n	800ad7e <TIM_OC1_SetConfig+0xd2>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a1c      	ldr	r2, [pc, #112]	; (800adcc <TIM_OC1_SetConfig+0x120>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d00f      	beq.n	800ad7e <TIM_OC1_SetConfig+0xd2>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a1b      	ldr	r2, [pc, #108]	; (800add0 <TIM_OC1_SetConfig+0x124>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d00b      	beq.n	800ad7e <TIM_OC1_SetConfig+0xd2>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a1a      	ldr	r2, [pc, #104]	; (800add4 <TIM_OC1_SetConfig+0x128>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d007      	beq.n	800ad7e <TIM_OC1_SetConfig+0xd2>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a19      	ldr	r2, [pc, #100]	; (800add8 <TIM_OC1_SetConfig+0x12c>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d003      	beq.n	800ad7e <TIM_OC1_SetConfig+0xd2>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a18      	ldr	r2, [pc, #96]	; (800addc <TIM_OC1_SetConfig+0x130>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d111      	bne.n	800ada2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	695b      	ldr	r3, [r3, #20]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	621a      	str	r2, [r3, #32]
}
 800adbc:	bf00      	nop
 800adbe:	371c      	adds	r7, #28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	40012c00 	.word	0x40012c00
 800adcc:	40013400 	.word	0x40013400
 800add0:	40014000 	.word	0x40014000
 800add4:	40014400 	.word	0x40014400
 800add8:	40014800 	.word	0x40014800
 800addc:	40015000 	.word	0x40015000

0800ade0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b087      	sub	sp, #28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	f023 0210 	bic.w	r2, r3, #16
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a1b      	ldr	r3, [r3, #32]
 800adfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	021b      	lsls	r3, r3, #8
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f023 0320 	bic.w	r3, r3, #32
 800ae2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a2c      	ldr	r2, [pc, #176]	; (800aef0 <TIM_OC2_SetConfig+0x110>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d007      	beq.n	800ae54 <TIM_OC2_SetConfig+0x74>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a2b      	ldr	r2, [pc, #172]	; (800aef4 <TIM_OC2_SetConfig+0x114>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d003      	beq.n	800ae54 <TIM_OC2_SetConfig+0x74>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a2a      	ldr	r2, [pc, #168]	; (800aef8 <TIM_OC2_SetConfig+0x118>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d10d      	bne.n	800ae70 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	011b      	lsls	r3, r3, #4
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a1f      	ldr	r2, [pc, #124]	; (800aef0 <TIM_OC2_SetConfig+0x110>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d013      	beq.n	800aea0 <TIM_OC2_SetConfig+0xc0>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a1e      	ldr	r2, [pc, #120]	; (800aef4 <TIM_OC2_SetConfig+0x114>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d00f      	beq.n	800aea0 <TIM_OC2_SetConfig+0xc0>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a1e      	ldr	r2, [pc, #120]	; (800aefc <TIM_OC2_SetConfig+0x11c>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d00b      	beq.n	800aea0 <TIM_OC2_SetConfig+0xc0>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a1d      	ldr	r2, [pc, #116]	; (800af00 <TIM_OC2_SetConfig+0x120>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d007      	beq.n	800aea0 <TIM_OC2_SetConfig+0xc0>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a1c      	ldr	r2, [pc, #112]	; (800af04 <TIM_OC2_SetConfig+0x124>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d003      	beq.n	800aea0 <TIM_OC2_SetConfig+0xc0>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a17      	ldr	r2, [pc, #92]	; (800aef8 <TIM_OC2_SetConfig+0x118>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d113      	bne.n	800aec8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aea6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aeae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	695b      	ldr	r3, [r3, #20]
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	693a      	ldr	r2, [r7, #16]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	621a      	str	r2, [r3, #32]
}
 800aee2:	bf00      	nop
 800aee4:	371c      	adds	r7, #28
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	40012c00 	.word	0x40012c00
 800aef4:	40013400 	.word	0x40013400
 800aef8:	40015000 	.word	0x40015000
 800aefc:	40014000 	.word	0x40014000
 800af00:	40014400 	.word	0x40014400
 800af04:	40014800 	.word	0x40014800

0800af08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af08:	b480      	push	{r7}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f023 0303 	bic.w	r3, r3, #3
 800af42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	021b      	lsls	r3, r3, #8
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	4313      	orrs	r3, r2
 800af60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4a2b      	ldr	r2, [pc, #172]	; (800b014 <TIM_OC3_SetConfig+0x10c>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d007      	beq.n	800af7a <TIM_OC3_SetConfig+0x72>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a2a      	ldr	r2, [pc, #168]	; (800b018 <TIM_OC3_SetConfig+0x110>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d003      	beq.n	800af7a <TIM_OC3_SetConfig+0x72>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a29      	ldr	r2, [pc, #164]	; (800b01c <TIM_OC3_SetConfig+0x114>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d10d      	bne.n	800af96 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	021b      	lsls	r3, r3, #8
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af94:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a1e      	ldr	r2, [pc, #120]	; (800b014 <TIM_OC3_SetConfig+0x10c>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d013      	beq.n	800afc6 <TIM_OC3_SetConfig+0xbe>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a1d      	ldr	r2, [pc, #116]	; (800b018 <TIM_OC3_SetConfig+0x110>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d00f      	beq.n	800afc6 <TIM_OC3_SetConfig+0xbe>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a1d      	ldr	r2, [pc, #116]	; (800b020 <TIM_OC3_SetConfig+0x118>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d00b      	beq.n	800afc6 <TIM_OC3_SetConfig+0xbe>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a1c      	ldr	r2, [pc, #112]	; (800b024 <TIM_OC3_SetConfig+0x11c>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d007      	beq.n	800afc6 <TIM_OC3_SetConfig+0xbe>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a1b      	ldr	r2, [pc, #108]	; (800b028 <TIM_OC3_SetConfig+0x120>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d003      	beq.n	800afc6 <TIM_OC3_SetConfig+0xbe>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a16      	ldr	r2, [pc, #88]	; (800b01c <TIM_OC3_SetConfig+0x114>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d113      	bne.n	800afee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800afd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	695b      	ldr	r3, [r3, #20]
 800afda:	011b      	lsls	r3, r3, #4
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	4313      	orrs	r3, r2
 800afe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	011b      	lsls	r3, r3, #4
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	4313      	orrs	r3, r2
 800afec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	685a      	ldr	r2, [r3, #4]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	621a      	str	r2, [r3, #32]
}
 800b008:	bf00      	nop
 800b00a:	371c      	adds	r7, #28
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	40012c00 	.word	0x40012c00
 800b018:	40013400 	.word	0x40013400
 800b01c:	40015000 	.word	0x40015000
 800b020:	40014000 	.word	0x40014000
 800b024:	40014400 	.word	0x40014400
 800b028:	40014800 	.word	0x40014800

0800b02c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b087      	sub	sp, #28
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	69db      	ldr	r3, [r3, #28]
 800b052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b05a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b05e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	021b      	lsls	r3, r3, #8
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	4313      	orrs	r3, r2
 800b072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b07a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	031b      	lsls	r3, r3, #12
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	4313      	orrs	r3, r2
 800b086:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a1a      	ldr	r2, [pc, #104]	; (800b0f4 <TIM_OC4_SetConfig+0xc8>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d013      	beq.n	800b0b8 <TIM_OC4_SetConfig+0x8c>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4a19      	ldr	r2, [pc, #100]	; (800b0f8 <TIM_OC4_SetConfig+0xcc>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d00f      	beq.n	800b0b8 <TIM_OC4_SetConfig+0x8c>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a18      	ldr	r2, [pc, #96]	; (800b0fc <TIM_OC4_SetConfig+0xd0>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d00b      	beq.n	800b0b8 <TIM_OC4_SetConfig+0x8c>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a17      	ldr	r2, [pc, #92]	; (800b100 <TIM_OC4_SetConfig+0xd4>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d007      	beq.n	800b0b8 <TIM_OC4_SetConfig+0x8c>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a16      	ldr	r2, [pc, #88]	; (800b104 <TIM_OC4_SetConfig+0xd8>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d003      	beq.n	800b0b8 <TIM_OC4_SetConfig+0x8c>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a15      	ldr	r2, [pc, #84]	; (800b108 <TIM_OC4_SetConfig+0xdc>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d109      	bne.n	800b0cc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	695b      	ldr	r3, [r3, #20]
 800b0c4:	019b      	lsls	r3, r3, #6
 800b0c6:	697a      	ldr	r2, [r7, #20]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	697a      	ldr	r2, [r7, #20]
 800b0d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	621a      	str	r2, [r3, #32]
}
 800b0e6:	bf00      	nop
 800b0e8:	371c      	adds	r7, #28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	40012c00 	.word	0x40012c00
 800b0f8:	40013400 	.word	0x40013400
 800b0fc:	40014000 	.word	0x40014000
 800b100:	40014400 	.word	0x40014400
 800b104:	40014800 	.word	0x40014800
 800b108:	40015000 	.word	0x40015000

0800b10c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b087      	sub	sp, #28
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a1b      	ldr	r3, [r3, #32]
 800b126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b13a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b13e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	4313      	orrs	r3, r2
 800b148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b150:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	041b      	lsls	r3, r3, #16
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a19      	ldr	r2, [pc, #100]	; (800b1c8 <TIM_OC5_SetConfig+0xbc>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d013      	beq.n	800b18e <TIM_OC5_SetConfig+0x82>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a18      	ldr	r2, [pc, #96]	; (800b1cc <TIM_OC5_SetConfig+0xc0>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d00f      	beq.n	800b18e <TIM_OC5_SetConfig+0x82>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a17      	ldr	r2, [pc, #92]	; (800b1d0 <TIM_OC5_SetConfig+0xc4>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d00b      	beq.n	800b18e <TIM_OC5_SetConfig+0x82>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a16      	ldr	r2, [pc, #88]	; (800b1d4 <TIM_OC5_SetConfig+0xc8>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d007      	beq.n	800b18e <TIM_OC5_SetConfig+0x82>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a15      	ldr	r2, [pc, #84]	; (800b1d8 <TIM_OC5_SetConfig+0xcc>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d003      	beq.n	800b18e <TIM_OC5_SetConfig+0x82>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a14      	ldr	r2, [pc, #80]	; (800b1dc <TIM_OC5_SetConfig+0xd0>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d109      	bne.n	800b1a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b194:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	695b      	ldr	r3, [r3, #20]
 800b19a:	021b      	lsls	r3, r3, #8
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	685a      	ldr	r2, [r3, #4]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	621a      	str	r2, [r3, #32]
}
 800b1bc:	bf00      	nop
 800b1be:	371c      	adds	r7, #28
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr
 800b1c8:	40012c00 	.word	0x40012c00
 800b1cc:	40013400 	.word	0x40013400
 800b1d0:	40014000 	.word	0x40014000
 800b1d4:	40014400 	.word	0x40014400
 800b1d8:	40014800 	.word	0x40014800
 800b1dc:	40015000 	.word	0x40015000

0800b1e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a1b      	ldr	r3, [r3, #32]
 800b1ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b20e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	021b      	lsls	r3, r3, #8
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	051b      	lsls	r3, r3, #20
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	4313      	orrs	r3, r2
 800b232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a1a      	ldr	r2, [pc, #104]	; (800b2a0 <TIM_OC6_SetConfig+0xc0>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d013      	beq.n	800b264 <TIM_OC6_SetConfig+0x84>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a19      	ldr	r2, [pc, #100]	; (800b2a4 <TIM_OC6_SetConfig+0xc4>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d00f      	beq.n	800b264 <TIM_OC6_SetConfig+0x84>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a18      	ldr	r2, [pc, #96]	; (800b2a8 <TIM_OC6_SetConfig+0xc8>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d00b      	beq.n	800b264 <TIM_OC6_SetConfig+0x84>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a17      	ldr	r2, [pc, #92]	; (800b2ac <TIM_OC6_SetConfig+0xcc>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d007      	beq.n	800b264 <TIM_OC6_SetConfig+0x84>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a16      	ldr	r2, [pc, #88]	; (800b2b0 <TIM_OC6_SetConfig+0xd0>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d003      	beq.n	800b264 <TIM_OC6_SetConfig+0x84>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a15      	ldr	r2, [pc, #84]	; (800b2b4 <TIM_OC6_SetConfig+0xd4>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d109      	bne.n	800b278 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b26a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	029b      	lsls	r3, r3, #10
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	4313      	orrs	r3, r2
 800b276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	697a      	ldr	r2, [r7, #20]
 800b27c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	621a      	str	r2, [r3, #32]
}
 800b292:	bf00      	nop
 800b294:	371c      	adds	r7, #28
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	40012c00 	.word	0x40012c00
 800b2a4:	40013400 	.word	0x40013400
 800b2a8:	40014000 	.word	0x40014000
 800b2ac:	40014400 	.word	0x40014400
 800b2b0:	40014800 	.word	0x40014800
 800b2b4:	40015000 	.word	0x40015000

0800b2b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
 800b2c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	f023 0201 	bic.w	r2, r3, #1
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	011b      	lsls	r3, r3, #4
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	f023 030a 	bic.w	r3, r3, #10
 800b2f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	621a      	str	r2, [r3, #32]
}
 800b30a:	bf00      	nop
 800b30c:	371c      	adds	r7, #28
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b316:	b480      	push	{r7}
 800b318:	b087      	sub	sp, #28
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	60f8      	str	r0, [r7, #12]
 800b31e:	60b9      	str	r1, [r7, #8]
 800b320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	f023 0210 	bic.w	r2, r3, #16
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6a1b      	ldr	r3, [r3, #32]
 800b338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	031b      	lsls	r3, r3, #12
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	4313      	orrs	r3, r2
 800b34a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	011b      	lsls	r3, r3, #4
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	621a      	str	r2, [r3, #32]
}
 800b36a:	bf00      	nop
 800b36c:	371c      	adds	r7, #28
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b376:	b480      	push	{r7}
 800b378:	b085      	sub	sp, #20
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4313      	orrs	r3, r2
 800b394:	f043 0307 	orr.w	r3, r3, #7
 800b398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	609a      	str	r2, [r3, #8]
}
 800b3a0:	bf00      	nop
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	021a      	lsls	r2, r3, #8
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	431a      	orrs	r2, r3
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	697a      	ldr	r2, [r7, #20]
 800b3de:	609a      	str	r2, [r3, #8]
}
 800b3e0:	bf00      	nop
 800b3e2:	371c      	adds	r7, #28
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b087      	sub	sp, #28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	f003 031f 	and.w	r3, r3, #31
 800b3fe:	2201      	movs	r2, #1
 800b400:	fa02 f303 	lsl.w	r3, r2, r3
 800b404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6a1a      	ldr	r2, [r3, #32]
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	43db      	mvns	r3, r3
 800b40e:	401a      	ands	r2, r3
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a1a      	ldr	r2, [r3, #32]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	f003 031f 	and.w	r3, r3, #31
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	fa01 f303 	lsl.w	r3, r1, r3
 800b424:	431a      	orrs	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	621a      	str	r2, [r3, #32]
}
 800b42a:	bf00      	nop
 800b42c:	371c      	adds	r7, #28
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
	...

0800b438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d101      	bne.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b44c:	2302      	movs	r3, #2
 800b44e:	e06d      	b.n	800b52c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a30      	ldr	r2, [pc, #192]	; (800b538 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d009      	beq.n	800b48e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a2f      	ldr	r2, [pc, #188]	; (800b53c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d004      	beq.n	800b48e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a2d      	ldr	r2, [pc, #180]	; (800b540 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d108      	bne.n	800b4a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b494:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a1e      	ldr	r2, [pc, #120]	; (800b538 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d01d      	beq.n	800b500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4cc:	d018      	beq.n	800b500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a1c      	ldr	r2, [pc, #112]	; (800b544 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d013      	beq.n	800b500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a1a      	ldr	r2, [pc, #104]	; (800b548 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d00e      	beq.n	800b500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a15      	ldr	r2, [pc, #84]	; (800b53c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d009      	beq.n	800b500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a16      	ldr	r2, [pc, #88]	; (800b54c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d004      	beq.n	800b500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a11      	ldr	r2, [pc, #68]	; (800b540 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d10c      	bne.n	800b51a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b506:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	4313      	orrs	r3, r2
 800b510:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2201      	movs	r2, #1
 800b51e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3714      	adds	r7, #20
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	40012c00 	.word	0x40012c00
 800b53c:	40013400 	.word	0x40013400
 800b540:	40015000 	.word	0x40015000
 800b544:	40000400 	.word	0x40000400
 800b548:	40000800 	.word	0x40000800
 800b54c:	40014000 	.word	0x40014000

0800b550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b55a:	2300      	movs	r3, #0
 800b55c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b564:	2b01      	cmp	r3, #1
 800b566:	d101      	bne.n	800b56c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b568:	2302      	movs	r3, #2
 800b56a:	e06a      	b.n	800b642 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	4313      	orrs	r3, r2
 800b580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	041b      	lsls	r3, r3, #16
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a19      	ldr	r2, [pc, #100]	; (800b650 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d009      	beq.n	800b604 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a17      	ldr	r2, [pc, #92]	; (800b654 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d004      	beq.n	800b604 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a16      	ldr	r2, [pc, #88]	; (800b658 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d115      	bne.n	800b630 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	051b      	lsls	r3, r3, #20
 800b610:	4313      	orrs	r3, r2
 800b612:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	69db      	ldr	r3, [r3, #28]
 800b61e:	4313      	orrs	r3, r2
 800b620:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	40012c00 	.word	0x40012c00
 800b654:	40013400 	.word	0x40013400
 800b658:	40015000 	.word	0x40015000

0800b65c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b678:	bf00      	nop
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d101      	bne.n	800b6aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e040      	b.n	800b72c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d106      	bne.n	800b6c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7fa fb82 	bl	8005dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2224      	movs	r2, #36	; 0x24
 800b6c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f022 0201 	bic.w	r2, r2, #1
 800b6d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fc0e 	bl	800bef8 <UART_SetConfig>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d101      	bne.n	800b6e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e022      	b.n	800b72c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fdd6 	bl	800c2a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	685a      	ldr	r2, [r3, #4]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689a      	ldr	r2, [r3, #8]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f042 0201 	orr.w	r2, r2, #1
 800b722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fe5d 	bl	800c3e4 <UART_CheckIdleState>
 800b72a:	4603      	mov	r3, r0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b08a      	sub	sp, #40	; 0x28
 800b738:	af02      	add	r7, sp, #8
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	603b      	str	r3, [r7, #0]
 800b740:	4613      	mov	r3, r2
 800b742:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b748:	2b20      	cmp	r3, #32
 800b74a:	f040 8082 	bne.w	800b852 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <HAL_UART_Transmit+0x26>
 800b754:	88fb      	ldrh	r3, [r7, #6]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d101      	bne.n	800b75e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e07a      	b.n	800b854 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b764:	2b01      	cmp	r3, #1
 800b766:	d101      	bne.n	800b76c <HAL_UART_Transmit+0x38>
 800b768:	2302      	movs	r3, #2
 800b76a:	e073      	b.n	800b854 <HAL_UART_Transmit+0x120>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2200      	movs	r2, #0
 800b778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2221      	movs	r2, #33	; 0x21
 800b780:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b782:	f7fa fc99 	bl	80060b8 <HAL_GetTick>
 800b786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	88fa      	ldrh	r2, [r7, #6]
 800b78c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	88fa      	ldrh	r2, [r7, #6]
 800b794:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7a0:	d108      	bne.n	800b7b4 <HAL_UART_Transmit+0x80>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d104      	bne.n	800b7b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	61bb      	str	r3, [r7, #24]
 800b7b2:	e003      	b.n	800b7bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b7c4:	e02d      	b.n	800b822 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	2180      	movs	r1, #128	; 0x80
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f000 fe50 	bl	800c476 <UART_WaitOnFlagUntilTimeout>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e039      	b.n	800b854 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d10b      	bne.n	800b7fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	881a      	ldrh	r2, [r3, #0]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b7f2:	b292      	uxth	r2, r2
 800b7f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	3302      	adds	r3, #2
 800b7fa:	61bb      	str	r3, [r7, #24]
 800b7fc:	e008      	b.n	800b810 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	781a      	ldrb	r2, [r3, #0]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	b292      	uxth	r2, r2
 800b808:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	3301      	adds	r3, #1
 800b80e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b816:	b29b      	uxth	r3, r3
 800b818:	3b01      	subs	r3, #1
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b828:	b29b      	uxth	r3, r3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1cb      	bne.n	800b7c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	9300      	str	r3, [sp, #0]
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	2200      	movs	r2, #0
 800b836:	2140      	movs	r1, #64	; 0x40
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f000 fe1c 	bl	800c476 <UART_WaitOnFlagUntilTimeout>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d001      	beq.n	800b848 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800b844:	2303      	movs	r3, #3
 800b846:	e005      	b.n	800b854 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2220      	movs	r2, #32
 800b84c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	e000      	b.n	800b854 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800b852:	2302      	movs	r3, #2
  }
}
 800b854:	4618      	mov	r0, r3
 800b856:	3720      	adds	r7, #32
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08a      	sub	sp, #40	; 0x28
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	4613      	mov	r3, r2
 800b868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b86e:	2b20      	cmp	r3, #32
 800b870:	d13d      	bne.n	800b8ee <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d002      	beq.n	800b87e <HAL_UART_Receive_IT+0x22>
 800b878:	88fb      	ldrh	r3, [r7, #6]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d101      	bne.n	800b882 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e036      	b.n	800b8f0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d101      	bne.n	800b890 <HAL_UART_Receive_IT+0x34>
 800b88c:	2302      	movs	r3, #2
 800b88e:	e02f      	b.n	800b8f0 <HAL_UART_Receive_IT+0x94>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d018      	beq.n	800b8de <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b8c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ca:	623b      	str	r3, [r7, #32]
 800b8cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ce:	69f9      	ldr	r1, [r7, #28]
 800b8d0:	6a3a      	ldr	r2, [r7, #32]
 800b8d2:	e841 2300 	strex	r3, r2, [r1]
 800b8d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1e6      	bne.n	800b8ac <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b8de:	88fb      	ldrh	r3, [r7, #6]
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	68b9      	ldr	r1, [r7, #8]
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	f000 fe8b 	bl	800c600 <UART_Start_Receive_IT>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	e000      	b.n	800b8f0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b8ee:	2302      	movs	r3, #2
  }
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3728      	adds	r7, #40	; 0x28
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b0ba      	sub	sp, #232	; 0xe8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	69db      	ldr	r3, [r3, #28]
 800b906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b91e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b922:	f640 030f 	movw	r3, #2063	; 0x80f
 800b926:	4013      	ands	r3, r2
 800b928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b92c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b930:	2b00      	cmp	r3, #0
 800b932:	d115      	bne.n	800b960 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b938:	f003 0320 	and.w	r3, r3, #32
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00f      	beq.n	800b960 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b944:	f003 0320 	and.w	r3, r3, #32
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d009      	beq.n	800b960 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 82a4 	beq.w	800be9e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	4798      	blx	r3
      }
      return;
 800b95e:	e29e      	b.n	800be9e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b964:	2b00      	cmp	r3, #0
 800b966:	f000 8117 	beq.w	800bb98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b96a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b96e:	f003 0301 	and.w	r3, r3, #1
 800b972:	2b00      	cmp	r3, #0
 800b974:	d106      	bne.n	800b984 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b97a:	4b85      	ldr	r3, [pc, #532]	; (800bb90 <HAL_UART_IRQHandler+0x298>)
 800b97c:	4013      	ands	r3, r2
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f000 810a 	beq.w	800bb98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d011      	beq.n	800b9b4 <HAL_UART_IRQHandler+0xbc>
 800b990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00b      	beq.n	800b9b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9aa:	f043 0201 	orr.w	r2, r3, #1
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9b8:	f003 0302 	and.w	r3, r3, #2
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d011      	beq.n	800b9e4 <HAL_UART_IRQHandler+0xec>
 800b9c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9c4:	f003 0301 	and.w	r3, r3, #1
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00b      	beq.n	800b9e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2202      	movs	r2, #2
 800b9d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9da:	f043 0204 	orr.w	r2, r3, #4
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9e8:	f003 0304 	and.w	r3, r3, #4
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d011      	beq.n	800ba14 <HAL_UART_IRQHandler+0x11c>
 800b9f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9f4:	f003 0301 	and.w	r3, r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00b      	beq.n	800ba14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2204      	movs	r2, #4
 800ba02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba0a:	f043 0202 	orr.w	r2, r3, #2
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba18:	f003 0308 	and.w	r3, r3, #8
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d017      	beq.n	800ba50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ba20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba24:	f003 0320 	and.w	r3, r3, #32
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d105      	bne.n	800ba38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ba2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00b      	beq.n	800ba50 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2208      	movs	r2, #8
 800ba3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba46:	f043 0208 	orr.w	r2, r3, #8
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d012      	beq.n	800ba82 <HAL_UART_IRQHandler+0x18a>
 800ba5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00c      	beq.n	800ba82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba78:	f043 0220 	orr.w	r2, r3, #32
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 820a 	beq.w	800bea2 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ba8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba92:	f003 0320 	and.w	r3, r3, #32
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00d      	beq.n	800bab6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ba9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba9e:	f003 0320 	and.w	r3, r3, #32
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d007      	beq.n	800bab6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800babc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baca:	2b40      	cmp	r3, #64	; 0x40
 800bacc:	d005      	beq.n	800bada <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bad2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d04f      	beq.n	800bb7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fe3c 	bl	800c758 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baea:	2b40      	cmp	r3, #64	; 0x40
 800baec:	d141      	bne.n	800bb72 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	3308      	adds	r3, #8
 800baf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bafc:	e853 3f00 	ldrex	r3, [r3]
 800bb00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	3308      	adds	r3, #8
 800bb16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb2a:	e841 2300 	strex	r3, r2, [r1]
 800bb2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1d9      	bne.n	800baee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d013      	beq.n	800bb6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb46:	4a13      	ldr	r2, [pc, #76]	; (800bb94 <HAL_UART_IRQHandler+0x29c>)
 800bb48:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fc fc76 	bl	8008440 <HAL_DMA_Abort_IT>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d017      	beq.n	800bb8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800bb64:	4610      	mov	r0, r2
 800bb66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb68:	e00f      	b.n	800bb8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f9ae 	bl	800becc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb70:	e00b      	b.n	800bb8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f9aa 	bl	800becc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb78:	e007      	b.n	800bb8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f9a6 	bl	800becc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800bb88:	e18b      	b.n	800bea2 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb8a:	bf00      	nop
    return;
 800bb8c:	e189      	b.n	800bea2 <HAL_UART_IRQHandler+0x5aa>
 800bb8e:	bf00      	nop
 800bb90:	04000120 	.word	0x04000120
 800bb94:	0800c81f 	.word	0x0800c81f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	f040 8143 	bne.w	800be28 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bba6:	f003 0310 	and.w	r3, r3, #16
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 813c 	beq.w	800be28 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bbb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbb4:	f003 0310 	and.w	r3, r3, #16
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f000 8135 	beq.w	800be28 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2210      	movs	r2, #16
 800bbc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd0:	2b40      	cmp	r3, #64	; 0x40
 800bbd2:	f040 80b1 	bne.w	800bd38 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbe2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f000 815d 	beq.w	800bea6 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bbf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	f080 8155 	bcs.w	800bea6 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	2b20      	cmp	r3, #32
 800bc0e:	f000 8085 	beq.w	800bd1c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc1e:	e853 3f00 	ldrex	r3, [r3]
 800bc22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	461a      	mov	r2, r3
 800bc38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bc3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc4c:	e841 2300 	strex	r3, r2, [r1]
 800bc50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1da      	bne.n	800bc12 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	3308      	adds	r3, #8
 800bc62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc66:	e853 3f00 	ldrex	r3, [r3]
 800bc6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc6e:	f023 0301 	bic.w	r3, r3, #1
 800bc72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc8c:	e841 2300 	strex	r3, r2, [r1]
 800bc90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1e1      	bne.n	800bc5c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3308      	adds	r3, #8
 800bc9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bca2:	e853 3f00 	ldrex	r3, [r3]
 800bca6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bcbc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bcbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bcc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bcc4:	e841 2300 	strex	r3, r2, [r1]
 800bcc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bcca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1e3      	bne.n	800bc98 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2220      	movs	r2, #32
 800bcd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce4:	e853 3f00 	ldrex	r3, [r3]
 800bce8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bcea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcec:	f023 0310 	bic.w	r3, r3, #16
 800bcf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bcfe:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd06:	e841 2300 	strex	r3, r2, [r1]
 800bd0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1e4      	bne.n	800bcdc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fc fb59 	bl	80083ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 f8d5 	bl	800bee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd36:	e0b6      	b.n	800bea6 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f000 80a8 	beq.w	800beaa <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800bd5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f000 80a3 	beq.w	800beaa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6c:	e853 3f00 	ldrex	r3, [r3]
 800bd70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	461a      	mov	r2, r3
 800bd82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd86:	647b      	str	r3, [r7, #68]	; 0x44
 800bd88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd8e:	e841 2300 	strex	r3, r2, [r1]
 800bd92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1e4      	bne.n	800bd64 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3308      	adds	r3, #8
 800bda0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda4:	e853 3f00 	ldrex	r3, [r3]
 800bda8:	623b      	str	r3, [r7, #32]
   return(result);
 800bdaa:	6a3b      	ldr	r3, [r7, #32]
 800bdac:	f023 0301 	bic.w	r3, r3, #1
 800bdb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3308      	adds	r3, #8
 800bdba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bdbe:	633a      	str	r2, [r7, #48]	; 0x30
 800bdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdc6:	e841 2300 	strex	r3, r2, [r1]
 800bdca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1e3      	bne.n	800bd9a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2220      	movs	r2, #32
 800bdd6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	e853 3f00 	ldrex	r3, [r3]
 800bdf0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f023 0310 	bic.w	r3, r3, #16
 800bdf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	461a      	mov	r2, r3
 800be02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800be06:	61fb      	str	r3, [r7, #28]
 800be08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0a:	69b9      	ldr	r1, [r7, #24]
 800be0c:	69fa      	ldr	r2, [r7, #28]
 800be0e:	e841 2300 	strex	r3, r2, [r1]
 800be12:	617b      	str	r3, [r7, #20]
   return(result);
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1e4      	bne.n	800bde4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f85d 	bl	800bee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be26:	e040      	b.n	800beaa <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00e      	beq.n	800be52 <HAL_UART_IRQHandler+0x55a>
 800be34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d008      	beq.n	800be52 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800be48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fe83 	bl	800cb56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be50:	e02e      	b.n	800beb0 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800be52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00e      	beq.n	800be7c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800be5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be66:	2b00      	cmp	r3, #0
 800be68:	d008      	beq.n	800be7c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d01d      	beq.n	800beae <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	4798      	blx	r3
    }
    return;
 800be7a:	e018      	b.n	800beae <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800be7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be84:	2b00      	cmp	r3, #0
 800be86:	d013      	beq.n	800beb0 <HAL_UART_IRQHandler+0x5b8>
 800be88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00d      	beq.n	800beb0 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 fcd8 	bl	800c84a <UART_EndTransmit_IT>
    return;
 800be9a:	bf00      	nop
 800be9c:	e008      	b.n	800beb0 <HAL_UART_IRQHandler+0x5b8>
      return;
 800be9e:	bf00      	nop
 800bea0:	e006      	b.n	800beb0 <HAL_UART_IRQHandler+0x5b8>
    return;
 800bea2:	bf00      	nop
 800bea4:	e004      	b.n	800beb0 <HAL_UART_IRQHandler+0x5b8>
      return;
 800bea6:	bf00      	nop
 800bea8:	e002      	b.n	800beb0 <HAL_UART_IRQHandler+0x5b8>
      return;
 800beaa:	bf00      	nop
 800beac:	e000      	b.n	800beb0 <HAL_UART_IRQHandler+0x5b8>
    return;
 800beae:	bf00      	nop
  }

}
 800beb0:	37e8      	adds	r7, #232	; 0xe8
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop

0800beb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800beec:	bf00      	nop
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b088      	sub	sp, #32
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	689a      	ldr	r2, [r3, #8]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	691b      	ldr	r3, [r3, #16]
 800bf0c:	431a      	orrs	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	695b      	ldr	r3, [r3, #20]
 800bf12:	431a      	orrs	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	69db      	ldr	r3, [r3, #28]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	4baa      	ldr	r3, [pc, #680]	; (800c1cc <UART_SetConfig+0x2d4>)
 800bf24:	4013      	ands	r3, r2
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	6812      	ldr	r2, [r2, #0]
 800bf2a:	6979      	ldr	r1, [r7, #20]
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	68da      	ldr	r2, [r3, #12]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	430a      	orrs	r2, r1
 800bf44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	699b      	ldr	r3, [r3, #24]
 800bf4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a1b      	ldr	r3, [r3, #32]
 800bf50:	697a      	ldr	r2, [r7, #20]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	697a      	ldr	r2, [r7, #20]
 800bf66:	430a      	orrs	r2, r1
 800bf68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a98      	ldr	r2, [pc, #608]	; (800c1d0 <UART_SetConfig+0x2d8>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d121      	bne.n	800bfb8 <UART_SetConfig+0xc0>
 800bf74:	4b97      	ldr	r3, [pc, #604]	; (800c1d4 <UART_SetConfig+0x2dc>)
 800bf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf78:	f003 0303 	and.w	r3, r3, #3
 800bf7c:	2b03      	cmp	r3, #3
 800bf7e:	d817      	bhi.n	800bfb0 <UART_SetConfig+0xb8>
 800bf80:	a201      	add	r2, pc, #4	; (adr r2, 800bf88 <UART_SetConfig+0x90>)
 800bf82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf86:	bf00      	nop
 800bf88:	0800bf99 	.word	0x0800bf99
 800bf8c:	0800bfa5 	.word	0x0800bfa5
 800bf90:	0800bfab 	.word	0x0800bfab
 800bf94:	0800bf9f 	.word	0x0800bf9f
 800bf98:	2301      	movs	r3, #1
 800bf9a:	77fb      	strb	r3, [r7, #31]
 800bf9c:	e0b2      	b.n	800c104 <UART_SetConfig+0x20c>
 800bf9e:	2302      	movs	r3, #2
 800bfa0:	77fb      	strb	r3, [r7, #31]
 800bfa2:	e0af      	b.n	800c104 <UART_SetConfig+0x20c>
 800bfa4:	2304      	movs	r3, #4
 800bfa6:	77fb      	strb	r3, [r7, #31]
 800bfa8:	e0ac      	b.n	800c104 <UART_SetConfig+0x20c>
 800bfaa:	2308      	movs	r3, #8
 800bfac:	77fb      	strb	r3, [r7, #31]
 800bfae:	e0a9      	b.n	800c104 <UART_SetConfig+0x20c>
 800bfb0:	2310      	movs	r3, #16
 800bfb2:	77fb      	strb	r3, [r7, #31]
 800bfb4:	bf00      	nop
 800bfb6:	e0a5      	b.n	800c104 <UART_SetConfig+0x20c>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a86      	ldr	r2, [pc, #536]	; (800c1d8 <UART_SetConfig+0x2e0>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d123      	bne.n	800c00a <UART_SetConfig+0x112>
 800bfc2:	4b84      	ldr	r3, [pc, #528]	; (800c1d4 <UART_SetConfig+0x2dc>)
 800bfc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bfca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfce:	d012      	beq.n	800bff6 <UART_SetConfig+0xfe>
 800bfd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfd4:	d802      	bhi.n	800bfdc <UART_SetConfig+0xe4>
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d007      	beq.n	800bfea <UART_SetConfig+0xf2>
 800bfda:	e012      	b.n	800c002 <UART_SetConfig+0x10a>
 800bfdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfe0:	d00c      	beq.n	800bffc <UART_SetConfig+0x104>
 800bfe2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bfe6:	d003      	beq.n	800bff0 <UART_SetConfig+0xf8>
 800bfe8:	e00b      	b.n	800c002 <UART_SetConfig+0x10a>
 800bfea:	2300      	movs	r3, #0
 800bfec:	77fb      	strb	r3, [r7, #31]
 800bfee:	e089      	b.n	800c104 <UART_SetConfig+0x20c>
 800bff0:	2302      	movs	r3, #2
 800bff2:	77fb      	strb	r3, [r7, #31]
 800bff4:	e086      	b.n	800c104 <UART_SetConfig+0x20c>
 800bff6:	2304      	movs	r3, #4
 800bff8:	77fb      	strb	r3, [r7, #31]
 800bffa:	e083      	b.n	800c104 <UART_SetConfig+0x20c>
 800bffc:	2308      	movs	r3, #8
 800bffe:	77fb      	strb	r3, [r7, #31]
 800c000:	e080      	b.n	800c104 <UART_SetConfig+0x20c>
 800c002:	2310      	movs	r3, #16
 800c004:	77fb      	strb	r3, [r7, #31]
 800c006:	bf00      	nop
 800c008:	e07c      	b.n	800c104 <UART_SetConfig+0x20c>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a73      	ldr	r2, [pc, #460]	; (800c1dc <UART_SetConfig+0x2e4>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d123      	bne.n	800c05c <UART_SetConfig+0x164>
 800c014:	4b6f      	ldr	r3, [pc, #444]	; (800c1d4 <UART_SetConfig+0x2dc>)
 800c016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c018:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c01c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c020:	d012      	beq.n	800c048 <UART_SetConfig+0x150>
 800c022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c026:	d802      	bhi.n	800c02e <UART_SetConfig+0x136>
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d007      	beq.n	800c03c <UART_SetConfig+0x144>
 800c02c:	e012      	b.n	800c054 <UART_SetConfig+0x15c>
 800c02e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c032:	d00c      	beq.n	800c04e <UART_SetConfig+0x156>
 800c034:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c038:	d003      	beq.n	800c042 <UART_SetConfig+0x14a>
 800c03a:	e00b      	b.n	800c054 <UART_SetConfig+0x15c>
 800c03c:	2300      	movs	r3, #0
 800c03e:	77fb      	strb	r3, [r7, #31]
 800c040:	e060      	b.n	800c104 <UART_SetConfig+0x20c>
 800c042:	2302      	movs	r3, #2
 800c044:	77fb      	strb	r3, [r7, #31]
 800c046:	e05d      	b.n	800c104 <UART_SetConfig+0x20c>
 800c048:	2304      	movs	r3, #4
 800c04a:	77fb      	strb	r3, [r7, #31]
 800c04c:	e05a      	b.n	800c104 <UART_SetConfig+0x20c>
 800c04e:	2308      	movs	r3, #8
 800c050:	77fb      	strb	r3, [r7, #31]
 800c052:	e057      	b.n	800c104 <UART_SetConfig+0x20c>
 800c054:	2310      	movs	r3, #16
 800c056:	77fb      	strb	r3, [r7, #31]
 800c058:	bf00      	nop
 800c05a:	e053      	b.n	800c104 <UART_SetConfig+0x20c>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a5f      	ldr	r2, [pc, #380]	; (800c1e0 <UART_SetConfig+0x2e8>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d123      	bne.n	800c0ae <UART_SetConfig+0x1b6>
 800c066:	4b5b      	ldr	r3, [pc, #364]	; (800c1d4 <UART_SetConfig+0x2dc>)
 800c068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c06e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c072:	d012      	beq.n	800c09a <UART_SetConfig+0x1a2>
 800c074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c078:	d802      	bhi.n	800c080 <UART_SetConfig+0x188>
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d007      	beq.n	800c08e <UART_SetConfig+0x196>
 800c07e:	e012      	b.n	800c0a6 <UART_SetConfig+0x1ae>
 800c080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c084:	d00c      	beq.n	800c0a0 <UART_SetConfig+0x1a8>
 800c086:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c08a:	d003      	beq.n	800c094 <UART_SetConfig+0x19c>
 800c08c:	e00b      	b.n	800c0a6 <UART_SetConfig+0x1ae>
 800c08e:	2300      	movs	r3, #0
 800c090:	77fb      	strb	r3, [r7, #31]
 800c092:	e037      	b.n	800c104 <UART_SetConfig+0x20c>
 800c094:	2302      	movs	r3, #2
 800c096:	77fb      	strb	r3, [r7, #31]
 800c098:	e034      	b.n	800c104 <UART_SetConfig+0x20c>
 800c09a:	2304      	movs	r3, #4
 800c09c:	77fb      	strb	r3, [r7, #31]
 800c09e:	e031      	b.n	800c104 <UART_SetConfig+0x20c>
 800c0a0:	2308      	movs	r3, #8
 800c0a2:	77fb      	strb	r3, [r7, #31]
 800c0a4:	e02e      	b.n	800c104 <UART_SetConfig+0x20c>
 800c0a6:	2310      	movs	r3, #16
 800c0a8:	77fb      	strb	r3, [r7, #31]
 800c0aa:	bf00      	nop
 800c0ac:	e02a      	b.n	800c104 <UART_SetConfig+0x20c>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a4c      	ldr	r2, [pc, #304]	; (800c1e4 <UART_SetConfig+0x2ec>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d123      	bne.n	800c100 <UART_SetConfig+0x208>
 800c0b8:	4b46      	ldr	r3, [pc, #280]	; (800c1d4 <UART_SetConfig+0x2dc>)
 800c0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c0c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0c4:	d012      	beq.n	800c0ec <UART_SetConfig+0x1f4>
 800c0c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0ca:	d802      	bhi.n	800c0d2 <UART_SetConfig+0x1da>
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d007      	beq.n	800c0e0 <UART_SetConfig+0x1e8>
 800c0d0:	e012      	b.n	800c0f8 <UART_SetConfig+0x200>
 800c0d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c0d6:	d00c      	beq.n	800c0f2 <UART_SetConfig+0x1fa>
 800c0d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c0dc:	d003      	beq.n	800c0e6 <UART_SetConfig+0x1ee>
 800c0de:	e00b      	b.n	800c0f8 <UART_SetConfig+0x200>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	77fb      	strb	r3, [r7, #31]
 800c0e4:	e00e      	b.n	800c104 <UART_SetConfig+0x20c>
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	77fb      	strb	r3, [r7, #31]
 800c0ea:	e00b      	b.n	800c104 <UART_SetConfig+0x20c>
 800c0ec:	2304      	movs	r3, #4
 800c0ee:	77fb      	strb	r3, [r7, #31]
 800c0f0:	e008      	b.n	800c104 <UART_SetConfig+0x20c>
 800c0f2:	2308      	movs	r3, #8
 800c0f4:	77fb      	strb	r3, [r7, #31]
 800c0f6:	e005      	b.n	800c104 <UART_SetConfig+0x20c>
 800c0f8:	2310      	movs	r3, #16
 800c0fa:	77fb      	strb	r3, [r7, #31]
 800c0fc:	bf00      	nop
 800c0fe:	e001      	b.n	800c104 <UART_SetConfig+0x20c>
 800c100:	2310      	movs	r3, #16
 800c102:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	69db      	ldr	r3, [r3, #28]
 800c108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c10c:	d16e      	bne.n	800c1ec <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800c10e:	7ffb      	ldrb	r3, [r7, #31]
 800c110:	2b08      	cmp	r3, #8
 800c112:	d828      	bhi.n	800c166 <UART_SetConfig+0x26e>
 800c114:	a201      	add	r2, pc, #4	; (adr r2, 800c11c <UART_SetConfig+0x224>)
 800c116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11a:	bf00      	nop
 800c11c:	0800c141 	.word	0x0800c141
 800c120:	0800c149 	.word	0x0800c149
 800c124:	0800c151 	.word	0x0800c151
 800c128:	0800c167 	.word	0x0800c167
 800c12c:	0800c157 	.word	0x0800c157
 800c130:	0800c167 	.word	0x0800c167
 800c134:	0800c167 	.word	0x0800c167
 800c138:	0800c167 	.word	0x0800c167
 800c13c:	0800c15f 	.word	0x0800c15f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c140:	f7fd fdb0 	bl	8009ca4 <HAL_RCC_GetPCLK1Freq>
 800c144:	61b8      	str	r0, [r7, #24]
        break;
 800c146:	e013      	b.n	800c170 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c148:	f7fd fdce 	bl	8009ce8 <HAL_RCC_GetPCLK2Freq>
 800c14c:	61b8      	str	r0, [r7, #24]
        break;
 800c14e:	e00f      	b.n	800c170 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c150:	4b25      	ldr	r3, [pc, #148]	; (800c1e8 <UART_SetConfig+0x2f0>)
 800c152:	61bb      	str	r3, [r7, #24]
        break;
 800c154:	e00c      	b.n	800c170 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c156:	f7fd fd2f 	bl	8009bb8 <HAL_RCC_GetSysClockFreq>
 800c15a:	61b8      	str	r0, [r7, #24]
        break;
 800c15c:	e008      	b.n	800c170 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c15e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c162:	61bb      	str	r3, [r7, #24]
        break;
 800c164:	e004      	b.n	800c170 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800c166:	2300      	movs	r3, #0
 800c168:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	77bb      	strb	r3, [r7, #30]
        break;
 800c16e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	2b00      	cmp	r3, #0
 800c174:	f000 8086 	beq.w	800c284 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	005a      	lsls	r2, r3, #1
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	085b      	lsrs	r3, r3, #1
 800c182:	441a      	add	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	fbb2 f3f3 	udiv	r3, r2, r3
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	2b0f      	cmp	r3, #15
 800c194:	d916      	bls.n	800c1c4 <UART_SetConfig+0x2cc>
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c19c:	d212      	bcs.n	800c1c4 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	f023 030f 	bic.w	r3, r3, #15
 800c1a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	085b      	lsrs	r3, r3, #1
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	f003 0307 	and.w	r3, r3, #7
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	89fb      	ldrh	r3, [r7, #14]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	89fa      	ldrh	r2, [r7, #14]
 800c1c0:	60da      	str	r2, [r3, #12]
 800c1c2:	e05f      	b.n	800c284 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	77bb      	strb	r3, [r7, #30]
 800c1c8:	e05c      	b.n	800c284 <UART_SetConfig+0x38c>
 800c1ca:	bf00      	nop
 800c1cc:	efff69f3 	.word	0xefff69f3
 800c1d0:	40013800 	.word	0x40013800
 800c1d4:	40021000 	.word	0x40021000
 800c1d8:	40004400 	.word	0x40004400
 800c1dc:	40004800 	.word	0x40004800
 800c1e0:	40004c00 	.word	0x40004c00
 800c1e4:	40005000 	.word	0x40005000
 800c1e8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800c1ec:	7ffb      	ldrb	r3, [r7, #31]
 800c1ee:	2b08      	cmp	r3, #8
 800c1f0:	d827      	bhi.n	800c242 <UART_SetConfig+0x34a>
 800c1f2:	a201      	add	r2, pc, #4	; (adr r2, 800c1f8 <UART_SetConfig+0x300>)
 800c1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f8:	0800c21d 	.word	0x0800c21d
 800c1fc:	0800c225 	.word	0x0800c225
 800c200:	0800c22d 	.word	0x0800c22d
 800c204:	0800c243 	.word	0x0800c243
 800c208:	0800c233 	.word	0x0800c233
 800c20c:	0800c243 	.word	0x0800c243
 800c210:	0800c243 	.word	0x0800c243
 800c214:	0800c243 	.word	0x0800c243
 800c218:	0800c23b 	.word	0x0800c23b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c21c:	f7fd fd42 	bl	8009ca4 <HAL_RCC_GetPCLK1Freq>
 800c220:	61b8      	str	r0, [r7, #24]
        break;
 800c222:	e013      	b.n	800c24c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c224:	f7fd fd60 	bl	8009ce8 <HAL_RCC_GetPCLK2Freq>
 800c228:	61b8      	str	r0, [r7, #24]
        break;
 800c22a:	e00f      	b.n	800c24c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c22c:	4b1b      	ldr	r3, [pc, #108]	; (800c29c <UART_SetConfig+0x3a4>)
 800c22e:	61bb      	str	r3, [r7, #24]
        break;
 800c230:	e00c      	b.n	800c24c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c232:	f7fd fcc1 	bl	8009bb8 <HAL_RCC_GetSysClockFreq>
 800c236:	61b8      	str	r0, [r7, #24]
        break;
 800c238:	e008      	b.n	800c24c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c23a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c23e:	61bb      	str	r3, [r7, #24]
        break;
 800c240:	e004      	b.n	800c24c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800c242:	2300      	movs	r3, #0
 800c244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c246:	2301      	movs	r3, #1
 800c248:	77bb      	strb	r3, [r7, #30]
        break;
 800c24a:	bf00      	nop
    }

    if (pclk != 0U)
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d018      	beq.n	800c284 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	085a      	lsrs	r2, r3, #1
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	441a      	add	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	fbb2 f3f3 	udiv	r3, r2, r3
 800c264:	b29b      	uxth	r3, r3
 800c266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	2b0f      	cmp	r3, #15
 800c26c:	d908      	bls.n	800c280 <UART_SetConfig+0x388>
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c274:	d204      	bcs.n	800c280 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	693a      	ldr	r2, [r7, #16]
 800c27c:	60da      	str	r2, [r3, #12]
 800c27e:	e001      	b.n	800c284 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c290:	7fbb      	ldrb	r3, [r7, #30]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3720      	adds	r7, #32
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	007a1200 	.word	0x007a1200

0800c2a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00a      	beq.n	800c2ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	430a      	orrs	r2, r1
 800c2c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ce:	f003 0302 	and.w	r3, r3, #2
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00a      	beq.n	800c2ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	430a      	orrs	r2, r1
 800c2ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f0:	f003 0304 	and.w	r3, r3, #4
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00a      	beq.n	800c30e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	430a      	orrs	r2, r1
 800c30c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c312:	f003 0308 	and.w	r3, r3, #8
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00a      	beq.n	800c330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	430a      	orrs	r2, r1
 800c32e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c334:	f003 0310 	and.w	r3, r3, #16
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00a      	beq.n	800c352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	430a      	orrs	r2, r1
 800c350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c356:	f003 0320 	and.w	r3, r3, #32
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00a      	beq.n	800c374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	430a      	orrs	r2, r1
 800c372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d01a      	beq.n	800c3b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	430a      	orrs	r2, r1
 800c394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c39e:	d10a      	bne.n	800c3b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	430a      	orrs	r2, r1
 800c3b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00a      	beq.n	800c3d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	430a      	orrs	r2, r1
 800c3d6:	605a      	str	r2, [r3, #4]
  }
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af02      	add	r7, sp, #8
 800c3ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c3f4:	f7f9 fe60 	bl	80060b8 <HAL_GetTick>
 800c3f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 0308 	and.w	r3, r3, #8
 800c404:	2b08      	cmp	r3, #8
 800c406:	d10e      	bne.n	800c426 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c40c:	9300      	str	r3, [sp, #0]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2200      	movs	r2, #0
 800c412:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 f82d 	bl	800c476 <UART_WaitOnFlagUntilTimeout>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d001      	beq.n	800c426 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c422:	2303      	movs	r3, #3
 800c424:	e023      	b.n	800c46e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 0304 	and.w	r3, r3, #4
 800c430:	2b04      	cmp	r3, #4
 800c432:	d10e      	bne.n	800c452 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2200      	movs	r2, #0
 800c43e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 f817 	bl	800c476 <UART_WaitOnFlagUntilTimeout>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d001      	beq.n	800c452 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c44e:	2303      	movs	r3, #3
 800c450:	e00d      	b.n	800c46e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2220      	movs	r2, #32
 800c456:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2220      	movs	r2, #32
 800c45c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b09c      	sub	sp, #112	; 0x70
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	60f8      	str	r0, [r7, #12]
 800c47e:	60b9      	str	r1, [r7, #8]
 800c480:	603b      	str	r3, [r7, #0]
 800c482:	4613      	mov	r3, r2
 800c484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c486:	e0a5      	b.n	800c5d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48e:	f000 80a1 	beq.w	800c5d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c492:	f7f9 fe11 	bl	80060b8 <HAL_GetTick>
 800c496:	4602      	mov	r2, r0
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d302      	bcc.n	800c4a8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c4a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d13e      	bne.n	800c526 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4b0:	e853 3f00 	ldrex	r3, [r3]
 800c4b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c4b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c4bc:	667b      	str	r3, [r7, #100]	; 0x64
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c4cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c4ce:	e841 2300 	strex	r3, r2, [r1]
 800c4d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c4d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e6      	bne.n	800c4a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3308      	adds	r3, #8
 800c4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e4:	e853 3f00 	ldrex	r3, [r3]
 800c4e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	f023 0301 	bic.w	r3, r3, #1
 800c4f0:	663b      	str	r3, [r7, #96]	; 0x60
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	3308      	adds	r3, #8
 800c4f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c4fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800c4fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c502:	e841 2300 	strex	r3, r2, [r1]
 800c506:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1e5      	bne.n	800c4da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2220      	movs	r2, #32
 800c512:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2220      	movs	r2, #32
 800c518:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c522:	2303      	movs	r3, #3
 800c524:	e067      	b.n	800c5f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f003 0304 	and.w	r3, r3, #4
 800c530:	2b00      	cmp	r3, #0
 800c532:	d04f      	beq.n	800c5d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	69db      	ldr	r3, [r3, #28]
 800c53a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c53e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c542:	d147      	bne.n	800c5d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c54c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c556:	e853 3f00 	ldrex	r3, [r3]
 800c55a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c562:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	461a      	mov	r2, r3
 800c56a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c56c:	637b      	str	r3, [r7, #52]	; 0x34
 800c56e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c570:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c574:	e841 2300 	strex	r3, r2, [r1]
 800c578:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1e6      	bne.n	800c54e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	3308      	adds	r3, #8
 800c586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	e853 3f00 	ldrex	r3, [r3]
 800c58e:	613b      	str	r3, [r7, #16]
   return(result);
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	f023 0301 	bic.w	r3, r3, #1
 800c596:	66bb      	str	r3, [r7, #104]	; 0x68
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	3308      	adds	r3, #8
 800c59e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5a0:	623a      	str	r2, [r7, #32]
 800c5a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a4:	69f9      	ldr	r1, [r7, #28]
 800c5a6:	6a3a      	ldr	r2, [r7, #32]
 800c5a8:	e841 2300 	strex	r3, r2, [r1]
 800c5ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1e5      	bne.n	800c580 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2220      	movs	r2, #32
 800c5b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2220      	movs	r2, #32
 800c5be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2220      	movs	r2, #32
 800c5c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e010      	b.n	800c5f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	69da      	ldr	r2, [r3, #28]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	4013      	ands	r3, r2
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	bf0c      	ite	eq
 800c5e4:	2301      	moveq	r3, #1
 800c5e6:	2300      	movne	r3, #0
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	79fb      	ldrb	r3, [r7, #7]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	f43f af4a 	beq.w	800c488 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3770      	adds	r7, #112	; 0x70
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
	...

0800c600 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c600:	b480      	push	{r7}
 800c602:	b091      	sub	sp, #68	; 0x44
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	4613      	mov	r3, r2
 800c60c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	88fa      	ldrh	r2, [r7, #6]
 800c618:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	88fa      	ldrh	r2, [r7, #6]
 800c620:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c632:	d10e      	bne.n	800c652 <UART_Start_Receive_IT+0x52>
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d105      	bne.n	800c648 <UART_Start_Receive_IT+0x48>
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c642:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c646:	e02d      	b.n	800c6a4 <UART_Start_Receive_IT+0xa4>
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	22ff      	movs	r2, #255	; 0xff
 800c64c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c650:	e028      	b.n	800c6a4 <UART_Start_Receive_IT+0xa4>
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10d      	bne.n	800c676 <UART_Start_Receive_IT+0x76>
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d104      	bne.n	800c66c <UART_Start_Receive_IT+0x6c>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	22ff      	movs	r2, #255	; 0xff
 800c666:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c66a:	e01b      	b.n	800c6a4 <UART_Start_Receive_IT+0xa4>
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	227f      	movs	r2, #127	; 0x7f
 800c670:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c674:	e016      	b.n	800c6a4 <UART_Start_Receive_IT+0xa4>
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	689b      	ldr	r3, [r3, #8]
 800c67a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c67e:	d10d      	bne.n	800c69c <UART_Start_Receive_IT+0x9c>
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d104      	bne.n	800c692 <UART_Start_Receive_IT+0x92>
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	227f      	movs	r2, #127	; 0x7f
 800c68c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c690:	e008      	b.n	800c6a4 <UART_Start_Receive_IT+0xa4>
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	223f      	movs	r2, #63	; 0x3f
 800c696:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c69a:	e003      	b.n	800c6a4 <UART_Start_Receive_IT+0xa4>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2222      	movs	r2, #34	; 0x22
 800c6b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	3308      	adds	r3, #8
 800c6b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6bc:	e853 3f00 	ldrex	r3, [r3]
 800c6c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c4:	f043 0301 	orr.w	r3, r3, #1
 800c6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	3308      	adds	r3, #8
 800c6d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c6d2:	637a      	str	r2, [r7, #52]	; 0x34
 800c6d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6da:	e841 2300 	strex	r3, r2, [r1]
 800c6de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1e5      	bne.n	800c6b2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6ee:	d107      	bne.n	800c700 <UART_Start_Receive_IT+0x100>
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d103      	bne.n	800c700 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	4a15      	ldr	r2, [pc, #84]	; (800c750 <UART_Start_Receive_IT+0x150>)
 800c6fc:	665a      	str	r2, [r3, #100]	; 0x64
 800c6fe:	e002      	b.n	800c706 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	4a14      	ldr	r2, [pc, #80]	; (800c754 <UART_Start_Receive_IT+0x154>)
 800c704:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	e853 3f00 	ldrex	r3, [r3]
 800c71a:	613b      	str	r3, [r7, #16]
   return(result);
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c722:	63bb      	str	r3, [r7, #56]	; 0x38
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	461a      	mov	r2, r3
 800c72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72c:	623b      	str	r3, [r7, #32]
 800c72e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c730:	69f9      	ldr	r1, [r7, #28]
 800c732:	6a3a      	ldr	r2, [r7, #32]
 800c734:	e841 2300 	strex	r3, r2, [r1]
 800c738:	61bb      	str	r3, [r7, #24]
   return(result);
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1e6      	bne.n	800c70e <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3744      	adds	r7, #68	; 0x44
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	0800c9fb 	.word	0x0800c9fb
 800c754:	0800c89f 	.word	0x0800c89f

0800c758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c758:	b480      	push	{r7}
 800c75a:	b095      	sub	sp, #84	; 0x54
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c768:	e853 3f00 	ldrex	r3, [r3]
 800c76c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c774:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	461a      	mov	r2, r3
 800c77c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c77e:	643b      	str	r3, [r7, #64]	; 0x40
 800c780:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c786:	e841 2300 	strex	r3, r2, [r1]
 800c78a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1e6      	bne.n	800c760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	3308      	adds	r3, #8
 800c798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79a:	6a3b      	ldr	r3, [r7, #32]
 800c79c:	e853 3f00 	ldrex	r3, [r3]
 800c7a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	f023 0301 	bic.w	r3, r3, #1
 800c7a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7ba:	e841 2300 	strex	r3, r2, [r1]
 800c7be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d1e5      	bne.n	800c792 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d118      	bne.n	800c800 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	e853 3f00 	ldrex	r3, [r3]
 800c7da:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	f023 0310 	bic.w	r3, r3, #16
 800c7e2:	647b      	str	r3, [r7, #68]	; 0x44
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ec:	61bb      	str	r3, [r7, #24]
 800c7ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f0:	6979      	ldr	r1, [r7, #20]
 800c7f2:	69ba      	ldr	r2, [r7, #24]
 800c7f4:	e841 2300 	strex	r3, r2, [r1]
 800c7f8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1e6      	bne.n	800c7ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2220      	movs	r2, #32
 800c804:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c812:	bf00      	nop
 800c814:	3754      	adds	r7, #84	; 0x54
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c81e:	b580      	push	{r7, lr}
 800c820:	b084      	sub	sp, #16
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2200      	movs	r2, #0
 800c838:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f7ff fb45 	bl	800becc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c842:	bf00      	nop
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b088      	sub	sp, #32
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	e853 3f00 	ldrex	r3, [r3]
 800c85e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c866:	61fb      	str	r3, [r7, #28]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	461a      	mov	r2, r3
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	61bb      	str	r3, [r7, #24]
 800c872:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c874:	6979      	ldr	r1, [r7, #20]
 800c876:	69ba      	ldr	r2, [r7, #24]
 800c878:	e841 2300 	strex	r3, r2, [r1]
 800c87c:	613b      	str	r3, [r7, #16]
   return(result);
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1e6      	bne.n	800c852 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2220      	movs	r2, #32
 800c888:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f7ff fb11 	bl	800beb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c896:	bf00      	nop
 800c898:	3720      	adds	r7, #32
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}

0800c89e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b096      	sub	sp, #88	; 0x58
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8b4:	2b22      	cmp	r3, #34	; 0x22
 800c8b6:	f040 8094 	bne.w	800c9e2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c8c0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c8c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c8c8:	b2d9      	uxtb	r1, r3
 800c8ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c8ce:	b2da      	uxtb	r2, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8d4:	400a      	ands	r2, r1
 800c8d6:	b2d2      	uxtb	r2, r2
 800c8d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d177      	bne.n	800c9f2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90a:	e853 3f00 	ldrex	r3, [r3]
 800c90e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c916:	653b      	str	r3, [r7, #80]	; 0x50
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	461a      	mov	r2, r3
 800c91e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c920:	647b      	str	r3, [r7, #68]	; 0x44
 800c922:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c924:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c928:	e841 2300 	strex	r3, r2, [r1]
 800c92c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1e6      	bne.n	800c902 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	3308      	adds	r3, #8
 800c93a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	e853 3f00 	ldrex	r3, [r3]
 800c942:	623b      	str	r3, [r7, #32]
   return(result);
 800c944:	6a3b      	ldr	r3, [r7, #32]
 800c946:	f023 0301 	bic.w	r3, r3, #1
 800c94a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	3308      	adds	r3, #8
 800c952:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c954:	633a      	str	r2, [r7, #48]	; 0x30
 800c956:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c95a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c95c:	e841 2300 	strex	r3, r2, [r1]
 800c960:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1e5      	bne.n	800c934 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2220      	movs	r2, #32
 800c96c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d12e      	bne.n	800c9da <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	e853 3f00 	ldrex	r3, [r3]
 800c98e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f023 0310 	bic.w	r3, r3, #16
 800c996:	64bb      	str	r3, [r7, #72]	; 0x48
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	461a      	mov	r2, r3
 800c99e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9a0:	61fb      	str	r3, [r7, #28]
 800c9a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a4:	69b9      	ldr	r1, [r7, #24]
 800c9a6:	69fa      	ldr	r2, [r7, #28]
 800c9a8:	e841 2300 	strex	r3, r2, [r1]
 800c9ac:	617b      	str	r3, [r7, #20]
   return(result);
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1e6      	bne.n	800c982 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	f003 0310 	and.w	r3, r3, #16
 800c9be:	2b10      	cmp	r3, #16
 800c9c0:	d103      	bne.n	800c9ca <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2210      	movs	r2, #16
 800c9c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff fa84 	bl	800bee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c9d8:	e00b      	b.n	800c9f2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f7f4 fa8a 	bl	8000ef4 <HAL_UART_RxCpltCallback>
}
 800c9e0:	e007      	b.n	800c9f2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	699a      	ldr	r2, [r3, #24]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f042 0208 	orr.w	r2, r2, #8
 800c9f0:	619a      	str	r2, [r3, #24]
}
 800c9f2:	bf00      	nop
 800c9f4:	3758      	adds	r7, #88	; 0x58
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b096      	sub	sp, #88	; 0x58
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca10:	2b22      	cmp	r3, #34	; 0x22
 800ca12:	f040 8094 	bne.w	800cb3e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ca1c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca24:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800ca26:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800ca2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ca2e:	4013      	ands	r3, r2
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca3a:	1c9a      	adds	r2, r3, #2
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d177      	bne.n	800cb4e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca66:	e853 3f00 	ldrex	r3, [r3]
 800ca6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	461a      	mov	r2, r3
 800ca7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca7c:	643b      	str	r3, [r7, #64]	; 0x40
 800ca7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca84:	e841 2300 	strex	r3, r2, [r1]
 800ca88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1e6      	bne.n	800ca5e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	3308      	adds	r3, #8
 800ca96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca98:	6a3b      	ldr	r3, [r7, #32]
 800ca9a:	e853 3f00 	ldrex	r3, [r3]
 800ca9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	f023 0301 	bic.w	r3, r3, #1
 800caa6:	64bb      	str	r3, [r7, #72]	; 0x48
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	3308      	adds	r3, #8
 800caae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cab8:	e841 2300 	strex	r3, r2, [r1]
 800cabc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1e5      	bne.n	800ca90 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2220      	movs	r2, #32
 800cac8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d12e      	bne.n	800cb36 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	e853 3f00 	ldrex	r3, [r3]
 800caea:	60bb      	str	r3, [r7, #8]
   return(result);
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	f023 0310 	bic.w	r3, r3, #16
 800caf2:	647b      	str	r3, [r7, #68]	; 0x44
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	461a      	mov	r2, r3
 800cafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cafc:	61bb      	str	r3, [r7, #24]
 800cafe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb00:	6979      	ldr	r1, [r7, #20]
 800cb02:	69ba      	ldr	r2, [r7, #24]
 800cb04:	e841 2300 	strex	r3, r2, [r1]
 800cb08:	613b      	str	r3, [r7, #16]
   return(result);
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d1e6      	bne.n	800cade <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	69db      	ldr	r3, [r3, #28]
 800cb16:	f003 0310 	and.w	r3, r3, #16
 800cb1a:	2b10      	cmp	r3, #16
 800cb1c:	d103      	bne.n	800cb26 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2210      	movs	r2, #16
 800cb24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f7ff f9d6 	bl	800bee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb34:	e00b      	b.n	800cb4e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7f4 f9dc 	bl	8000ef4 <HAL_UART_RxCpltCallback>
}
 800cb3c:	e007      	b.n	800cb4e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	699a      	ldr	r2, [r3, #24]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f042 0208 	orr.w	r2, r2, #8
 800cb4c:	619a      	str	r2, [r3, #24]
}
 800cb4e:	bf00      	nop
 800cb50:	3758      	adds	r7, #88	; 0x58
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cb56:	b480      	push	{r7}
 800cb58:	b083      	sub	sp, #12
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cb5e:	bf00      	nop
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr
	...

0800cb6c <__errno>:
 800cb6c:	4b01      	ldr	r3, [pc, #4]	; (800cb74 <__errno+0x8>)
 800cb6e:	6818      	ldr	r0, [r3, #0]
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	2000002c 	.word	0x2000002c

0800cb78 <__libc_init_array>:
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	4e0d      	ldr	r6, [pc, #52]	; (800cbb0 <__libc_init_array+0x38>)
 800cb7c:	4c0d      	ldr	r4, [pc, #52]	; (800cbb4 <__libc_init_array+0x3c>)
 800cb7e:	1ba4      	subs	r4, r4, r6
 800cb80:	10a4      	asrs	r4, r4, #2
 800cb82:	2500      	movs	r5, #0
 800cb84:	42a5      	cmp	r5, r4
 800cb86:	d109      	bne.n	800cb9c <__libc_init_array+0x24>
 800cb88:	4e0b      	ldr	r6, [pc, #44]	; (800cbb8 <__libc_init_array+0x40>)
 800cb8a:	4c0c      	ldr	r4, [pc, #48]	; (800cbbc <__libc_init_array+0x44>)
 800cb8c:	f001 fc3a 	bl	800e404 <_init>
 800cb90:	1ba4      	subs	r4, r4, r6
 800cb92:	10a4      	asrs	r4, r4, #2
 800cb94:	2500      	movs	r5, #0
 800cb96:	42a5      	cmp	r5, r4
 800cb98:	d105      	bne.n	800cba6 <__libc_init_array+0x2e>
 800cb9a:	bd70      	pop	{r4, r5, r6, pc}
 800cb9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cba0:	4798      	blx	r3
 800cba2:	3501      	adds	r5, #1
 800cba4:	e7ee      	b.n	800cb84 <__libc_init_array+0xc>
 800cba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cbaa:	4798      	blx	r3
 800cbac:	3501      	adds	r5, #1
 800cbae:	e7f2      	b.n	800cb96 <__libc_init_array+0x1e>
 800cbb0:	0800e7b8 	.word	0x0800e7b8
 800cbb4:	0800e7b8 	.word	0x0800e7b8
 800cbb8:	0800e7b8 	.word	0x0800e7b8
 800cbbc:	0800e7bc 	.word	0x0800e7bc

0800cbc0 <memset>:
 800cbc0:	4402      	add	r2, r0
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d100      	bne.n	800cbca <memset+0xa>
 800cbc8:	4770      	bx	lr
 800cbca:	f803 1b01 	strb.w	r1, [r3], #1
 800cbce:	e7f9      	b.n	800cbc4 <memset+0x4>

0800cbd0 <siprintf>:
 800cbd0:	b40e      	push	{r1, r2, r3}
 800cbd2:	b500      	push	{lr}
 800cbd4:	b09c      	sub	sp, #112	; 0x70
 800cbd6:	ab1d      	add	r3, sp, #116	; 0x74
 800cbd8:	9002      	str	r0, [sp, #8]
 800cbda:	9006      	str	r0, [sp, #24]
 800cbdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbe0:	4809      	ldr	r0, [pc, #36]	; (800cc08 <siprintf+0x38>)
 800cbe2:	9107      	str	r1, [sp, #28]
 800cbe4:	9104      	str	r1, [sp, #16]
 800cbe6:	4909      	ldr	r1, [pc, #36]	; (800cc0c <siprintf+0x3c>)
 800cbe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbec:	9105      	str	r1, [sp, #20]
 800cbee:	6800      	ldr	r0, [r0, #0]
 800cbf0:	9301      	str	r3, [sp, #4]
 800cbf2:	a902      	add	r1, sp, #8
 800cbf4:	f000 f866 	bl	800ccc4 <_svfiprintf_r>
 800cbf8:	9b02      	ldr	r3, [sp, #8]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	701a      	strb	r2, [r3, #0]
 800cbfe:	b01c      	add	sp, #112	; 0x70
 800cc00:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc04:	b003      	add	sp, #12
 800cc06:	4770      	bx	lr
 800cc08:	2000002c 	.word	0x2000002c
 800cc0c:	ffff0208 	.word	0xffff0208

0800cc10 <__ssputs_r>:
 800cc10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc14:	688e      	ldr	r6, [r1, #8]
 800cc16:	429e      	cmp	r6, r3
 800cc18:	4682      	mov	sl, r0
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	4690      	mov	r8, r2
 800cc1e:	4699      	mov	r9, r3
 800cc20:	d837      	bhi.n	800cc92 <__ssputs_r+0x82>
 800cc22:	898a      	ldrh	r2, [r1, #12]
 800cc24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc28:	d031      	beq.n	800cc8e <__ssputs_r+0x7e>
 800cc2a:	6825      	ldr	r5, [r4, #0]
 800cc2c:	6909      	ldr	r1, [r1, #16]
 800cc2e:	1a6f      	subs	r7, r5, r1
 800cc30:	6965      	ldr	r5, [r4, #20]
 800cc32:	2302      	movs	r3, #2
 800cc34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc38:	fb95 f5f3 	sdiv	r5, r5, r3
 800cc3c:	f109 0301 	add.w	r3, r9, #1
 800cc40:	443b      	add	r3, r7
 800cc42:	429d      	cmp	r5, r3
 800cc44:	bf38      	it	cc
 800cc46:	461d      	movcc	r5, r3
 800cc48:	0553      	lsls	r3, r2, #21
 800cc4a:	d530      	bpl.n	800ccae <__ssputs_r+0x9e>
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	f000 fb2b 	bl	800d2a8 <_malloc_r>
 800cc52:	4606      	mov	r6, r0
 800cc54:	b950      	cbnz	r0, 800cc6c <__ssputs_r+0x5c>
 800cc56:	230c      	movs	r3, #12
 800cc58:	f8ca 3000 	str.w	r3, [sl]
 800cc5c:	89a3      	ldrh	r3, [r4, #12]
 800cc5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc62:	81a3      	strh	r3, [r4, #12]
 800cc64:	f04f 30ff 	mov.w	r0, #4294967295
 800cc68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc6c:	463a      	mov	r2, r7
 800cc6e:	6921      	ldr	r1, [r4, #16]
 800cc70:	f000 faa8 	bl	800d1c4 <memcpy>
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc7e:	81a3      	strh	r3, [r4, #12]
 800cc80:	6126      	str	r6, [r4, #16]
 800cc82:	6165      	str	r5, [r4, #20]
 800cc84:	443e      	add	r6, r7
 800cc86:	1bed      	subs	r5, r5, r7
 800cc88:	6026      	str	r6, [r4, #0]
 800cc8a:	60a5      	str	r5, [r4, #8]
 800cc8c:	464e      	mov	r6, r9
 800cc8e:	454e      	cmp	r6, r9
 800cc90:	d900      	bls.n	800cc94 <__ssputs_r+0x84>
 800cc92:	464e      	mov	r6, r9
 800cc94:	4632      	mov	r2, r6
 800cc96:	4641      	mov	r1, r8
 800cc98:	6820      	ldr	r0, [r4, #0]
 800cc9a:	f000 fa9e 	bl	800d1da <memmove>
 800cc9e:	68a3      	ldr	r3, [r4, #8]
 800cca0:	1b9b      	subs	r3, r3, r6
 800cca2:	60a3      	str	r3, [r4, #8]
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	441e      	add	r6, r3
 800cca8:	6026      	str	r6, [r4, #0]
 800ccaa:	2000      	movs	r0, #0
 800ccac:	e7dc      	b.n	800cc68 <__ssputs_r+0x58>
 800ccae:	462a      	mov	r2, r5
 800ccb0:	f000 fb54 	bl	800d35c <_realloc_r>
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	d1e2      	bne.n	800cc80 <__ssputs_r+0x70>
 800ccba:	6921      	ldr	r1, [r4, #16]
 800ccbc:	4650      	mov	r0, sl
 800ccbe:	f000 faa5 	bl	800d20c <_free_r>
 800ccc2:	e7c8      	b.n	800cc56 <__ssputs_r+0x46>

0800ccc4 <_svfiprintf_r>:
 800ccc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc8:	461d      	mov	r5, r3
 800ccca:	898b      	ldrh	r3, [r1, #12]
 800cccc:	061f      	lsls	r7, r3, #24
 800ccce:	b09d      	sub	sp, #116	; 0x74
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	4616      	mov	r6, r2
 800ccd6:	d50f      	bpl.n	800ccf8 <_svfiprintf_r+0x34>
 800ccd8:	690b      	ldr	r3, [r1, #16]
 800ccda:	b96b      	cbnz	r3, 800ccf8 <_svfiprintf_r+0x34>
 800ccdc:	2140      	movs	r1, #64	; 0x40
 800ccde:	f000 fae3 	bl	800d2a8 <_malloc_r>
 800cce2:	6020      	str	r0, [r4, #0]
 800cce4:	6120      	str	r0, [r4, #16]
 800cce6:	b928      	cbnz	r0, 800ccf4 <_svfiprintf_r+0x30>
 800cce8:	230c      	movs	r3, #12
 800ccea:	f8c8 3000 	str.w	r3, [r8]
 800ccee:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf2:	e0c8      	b.n	800ce86 <_svfiprintf_r+0x1c2>
 800ccf4:	2340      	movs	r3, #64	; 0x40
 800ccf6:	6163      	str	r3, [r4, #20]
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	9309      	str	r3, [sp, #36]	; 0x24
 800ccfc:	2320      	movs	r3, #32
 800ccfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd02:	2330      	movs	r3, #48	; 0x30
 800cd04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd08:	9503      	str	r5, [sp, #12]
 800cd0a:	f04f 0b01 	mov.w	fp, #1
 800cd0e:	4637      	mov	r7, r6
 800cd10:	463d      	mov	r5, r7
 800cd12:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cd16:	b10b      	cbz	r3, 800cd1c <_svfiprintf_r+0x58>
 800cd18:	2b25      	cmp	r3, #37	; 0x25
 800cd1a:	d13e      	bne.n	800cd9a <_svfiprintf_r+0xd6>
 800cd1c:	ebb7 0a06 	subs.w	sl, r7, r6
 800cd20:	d00b      	beq.n	800cd3a <_svfiprintf_r+0x76>
 800cd22:	4653      	mov	r3, sl
 800cd24:	4632      	mov	r2, r6
 800cd26:	4621      	mov	r1, r4
 800cd28:	4640      	mov	r0, r8
 800cd2a:	f7ff ff71 	bl	800cc10 <__ssputs_r>
 800cd2e:	3001      	adds	r0, #1
 800cd30:	f000 80a4 	beq.w	800ce7c <_svfiprintf_r+0x1b8>
 800cd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd36:	4453      	add	r3, sl
 800cd38:	9309      	str	r3, [sp, #36]	; 0x24
 800cd3a:	783b      	ldrb	r3, [r7, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f000 809d 	beq.w	800ce7c <_svfiprintf_r+0x1b8>
 800cd42:	2300      	movs	r3, #0
 800cd44:	f04f 32ff 	mov.w	r2, #4294967295
 800cd48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd4c:	9304      	str	r3, [sp, #16]
 800cd4e:	9307      	str	r3, [sp, #28]
 800cd50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd54:	931a      	str	r3, [sp, #104]	; 0x68
 800cd56:	462f      	mov	r7, r5
 800cd58:	2205      	movs	r2, #5
 800cd5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cd5e:	4850      	ldr	r0, [pc, #320]	; (800cea0 <_svfiprintf_r+0x1dc>)
 800cd60:	f7f3 fa46 	bl	80001f0 <memchr>
 800cd64:	9b04      	ldr	r3, [sp, #16]
 800cd66:	b9d0      	cbnz	r0, 800cd9e <_svfiprintf_r+0xda>
 800cd68:	06d9      	lsls	r1, r3, #27
 800cd6a:	bf44      	itt	mi
 800cd6c:	2220      	movmi	r2, #32
 800cd6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd72:	071a      	lsls	r2, r3, #28
 800cd74:	bf44      	itt	mi
 800cd76:	222b      	movmi	r2, #43	; 0x2b
 800cd78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd7c:	782a      	ldrb	r2, [r5, #0]
 800cd7e:	2a2a      	cmp	r2, #42	; 0x2a
 800cd80:	d015      	beq.n	800cdae <_svfiprintf_r+0xea>
 800cd82:	9a07      	ldr	r2, [sp, #28]
 800cd84:	462f      	mov	r7, r5
 800cd86:	2000      	movs	r0, #0
 800cd88:	250a      	movs	r5, #10
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd90:	3b30      	subs	r3, #48	; 0x30
 800cd92:	2b09      	cmp	r3, #9
 800cd94:	d94d      	bls.n	800ce32 <_svfiprintf_r+0x16e>
 800cd96:	b1b8      	cbz	r0, 800cdc8 <_svfiprintf_r+0x104>
 800cd98:	e00f      	b.n	800cdba <_svfiprintf_r+0xf6>
 800cd9a:	462f      	mov	r7, r5
 800cd9c:	e7b8      	b.n	800cd10 <_svfiprintf_r+0x4c>
 800cd9e:	4a40      	ldr	r2, [pc, #256]	; (800cea0 <_svfiprintf_r+0x1dc>)
 800cda0:	1a80      	subs	r0, r0, r2
 800cda2:	fa0b f000 	lsl.w	r0, fp, r0
 800cda6:	4318      	orrs	r0, r3
 800cda8:	9004      	str	r0, [sp, #16]
 800cdaa:	463d      	mov	r5, r7
 800cdac:	e7d3      	b.n	800cd56 <_svfiprintf_r+0x92>
 800cdae:	9a03      	ldr	r2, [sp, #12]
 800cdb0:	1d11      	adds	r1, r2, #4
 800cdb2:	6812      	ldr	r2, [r2, #0]
 800cdb4:	9103      	str	r1, [sp, #12]
 800cdb6:	2a00      	cmp	r2, #0
 800cdb8:	db01      	blt.n	800cdbe <_svfiprintf_r+0xfa>
 800cdba:	9207      	str	r2, [sp, #28]
 800cdbc:	e004      	b.n	800cdc8 <_svfiprintf_r+0x104>
 800cdbe:	4252      	negs	r2, r2
 800cdc0:	f043 0302 	orr.w	r3, r3, #2
 800cdc4:	9207      	str	r2, [sp, #28]
 800cdc6:	9304      	str	r3, [sp, #16]
 800cdc8:	783b      	ldrb	r3, [r7, #0]
 800cdca:	2b2e      	cmp	r3, #46	; 0x2e
 800cdcc:	d10c      	bne.n	800cde8 <_svfiprintf_r+0x124>
 800cdce:	787b      	ldrb	r3, [r7, #1]
 800cdd0:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd2:	d133      	bne.n	800ce3c <_svfiprintf_r+0x178>
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	1d1a      	adds	r2, r3, #4
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	9203      	str	r2, [sp, #12]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	bfb8      	it	lt
 800cde0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cde4:	3702      	adds	r7, #2
 800cde6:	9305      	str	r3, [sp, #20]
 800cde8:	4d2e      	ldr	r5, [pc, #184]	; (800cea4 <_svfiprintf_r+0x1e0>)
 800cdea:	7839      	ldrb	r1, [r7, #0]
 800cdec:	2203      	movs	r2, #3
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f7f3 f9fe 	bl	80001f0 <memchr>
 800cdf4:	b138      	cbz	r0, 800ce06 <_svfiprintf_r+0x142>
 800cdf6:	2340      	movs	r3, #64	; 0x40
 800cdf8:	1b40      	subs	r0, r0, r5
 800cdfa:	fa03 f000 	lsl.w	r0, r3, r0
 800cdfe:	9b04      	ldr	r3, [sp, #16]
 800ce00:	4303      	orrs	r3, r0
 800ce02:	3701      	adds	r7, #1
 800ce04:	9304      	str	r3, [sp, #16]
 800ce06:	7839      	ldrb	r1, [r7, #0]
 800ce08:	4827      	ldr	r0, [pc, #156]	; (800cea8 <_svfiprintf_r+0x1e4>)
 800ce0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce0e:	2206      	movs	r2, #6
 800ce10:	1c7e      	adds	r6, r7, #1
 800ce12:	f7f3 f9ed 	bl	80001f0 <memchr>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d038      	beq.n	800ce8c <_svfiprintf_r+0x1c8>
 800ce1a:	4b24      	ldr	r3, [pc, #144]	; (800ceac <_svfiprintf_r+0x1e8>)
 800ce1c:	bb13      	cbnz	r3, 800ce64 <_svfiprintf_r+0x1a0>
 800ce1e:	9b03      	ldr	r3, [sp, #12]
 800ce20:	3307      	adds	r3, #7
 800ce22:	f023 0307 	bic.w	r3, r3, #7
 800ce26:	3308      	adds	r3, #8
 800ce28:	9303      	str	r3, [sp, #12]
 800ce2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce2c:	444b      	add	r3, r9
 800ce2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce30:	e76d      	b.n	800cd0e <_svfiprintf_r+0x4a>
 800ce32:	fb05 3202 	mla	r2, r5, r2, r3
 800ce36:	2001      	movs	r0, #1
 800ce38:	460f      	mov	r7, r1
 800ce3a:	e7a6      	b.n	800cd8a <_svfiprintf_r+0xc6>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	3701      	adds	r7, #1
 800ce40:	9305      	str	r3, [sp, #20]
 800ce42:	4619      	mov	r1, r3
 800ce44:	250a      	movs	r5, #10
 800ce46:	4638      	mov	r0, r7
 800ce48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce4c:	3a30      	subs	r2, #48	; 0x30
 800ce4e:	2a09      	cmp	r2, #9
 800ce50:	d903      	bls.n	800ce5a <_svfiprintf_r+0x196>
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d0c8      	beq.n	800cde8 <_svfiprintf_r+0x124>
 800ce56:	9105      	str	r1, [sp, #20]
 800ce58:	e7c6      	b.n	800cde8 <_svfiprintf_r+0x124>
 800ce5a:	fb05 2101 	mla	r1, r5, r1, r2
 800ce5e:	2301      	movs	r3, #1
 800ce60:	4607      	mov	r7, r0
 800ce62:	e7f0      	b.n	800ce46 <_svfiprintf_r+0x182>
 800ce64:	ab03      	add	r3, sp, #12
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	4622      	mov	r2, r4
 800ce6a:	4b11      	ldr	r3, [pc, #68]	; (800ceb0 <_svfiprintf_r+0x1ec>)
 800ce6c:	a904      	add	r1, sp, #16
 800ce6e:	4640      	mov	r0, r8
 800ce70:	f3af 8000 	nop.w
 800ce74:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ce78:	4681      	mov	r9, r0
 800ce7a:	d1d6      	bne.n	800ce2a <_svfiprintf_r+0x166>
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	065b      	lsls	r3, r3, #25
 800ce80:	f53f af35 	bmi.w	800ccee <_svfiprintf_r+0x2a>
 800ce84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce86:	b01d      	add	sp, #116	; 0x74
 800ce88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce8c:	ab03      	add	r3, sp, #12
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	4622      	mov	r2, r4
 800ce92:	4b07      	ldr	r3, [pc, #28]	; (800ceb0 <_svfiprintf_r+0x1ec>)
 800ce94:	a904      	add	r1, sp, #16
 800ce96:	4640      	mov	r0, r8
 800ce98:	f000 f882 	bl	800cfa0 <_printf_i>
 800ce9c:	e7ea      	b.n	800ce74 <_svfiprintf_r+0x1b0>
 800ce9e:	bf00      	nop
 800cea0:	0800e5a8 	.word	0x0800e5a8
 800cea4:	0800e5ae 	.word	0x0800e5ae
 800cea8:	0800e5b2 	.word	0x0800e5b2
 800ceac:	00000000 	.word	0x00000000
 800ceb0:	0800cc11 	.word	0x0800cc11

0800ceb4 <_printf_common>:
 800ceb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb8:	4691      	mov	r9, r2
 800ceba:	461f      	mov	r7, r3
 800cebc:	688a      	ldr	r2, [r1, #8]
 800cebe:	690b      	ldr	r3, [r1, #16]
 800cec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cec4:	4293      	cmp	r3, r2
 800cec6:	bfb8      	it	lt
 800cec8:	4613      	movlt	r3, r2
 800ceca:	f8c9 3000 	str.w	r3, [r9]
 800cece:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ced2:	4606      	mov	r6, r0
 800ced4:	460c      	mov	r4, r1
 800ced6:	b112      	cbz	r2, 800cede <_printf_common+0x2a>
 800ced8:	3301      	adds	r3, #1
 800ceda:	f8c9 3000 	str.w	r3, [r9]
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	0699      	lsls	r1, r3, #26
 800cee2:	bf42      	ittt	mi
 800cee4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cee8:	3302      	addmi	r3, #2
 800ceea:	f8c9 3000 	strmi.w	r3, [r9]
 800ceee:	6825      	ldr	r5, [r4, #0]
 800cef0:	f015 0506 	ands.w	r5, r5, #6
 800cef4:	d107      	bne.n	800cf06 <_printf_common+0x52>
 800cef6:	f104 0a19 	add.w	sl, r4, #25
 800cefa:	68e3      	ldr	r3, [r4, #12]
 800cefc:	f8d9 2000 	ldr.w	r2, [r9]
 800cf00:	1a9b      	subs	r3, r3, r2
 800cf02:	42ab      	cmp	r3, r5
 800cf04:	dc28      	bgt.n	800cf58 <_printf_common+0xa4>
 800cf06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cf0a:	6822      	ldr	r2, [r4, #0]
 800cf0c:	3300      	adds	r3, #0
 800cf0e:	bf18      	it	ne
 800cf10:	2301      	movne	r3, #1
 800cf12:	0692      	lsls	r2, r2, #26
 800cf14:	d42d      	bmi.n	800cf72 <_printf_common+0xbe>
 800cf16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf1a:	4639      	mov	r1, r7
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	47c0      	blx	r8
 800cf20:	3001      	adds	r0, #1
 800cf22:	d020      	beq.n	800cf66 <_printf_common+0xb2>
 800cf24:	6823      	ldr	r3, [r4, #0]
 800cf26:	68e5      	ldr	r5, [r4, #12]
 800cf28:	f8d9 2000 	ldr.w	r2, [r9]
 800cf2c:	f003 0306 	and.w	r3, r3, #6
 800cf30:	2b04      	cmp	r3, #4
 800cf32:	bf08      	it	eq
 800cf34:	1aad      	subeq	r5, r5, r2
 800cf36:	68a3      	ldr	r3, [r4, #8]
 800cf38:	6922      	ldr	r2, [r4, #16]
 800cf3a:	bf0c      	ite	eq
 800cf3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf40:	2500      	movne	r5, #0
 800cf42:	4293      	cmp	r3, r2
 800cf44:	bfc4      	itt	gt
 800cf46:	1a9b      	subgt	r3, r3, r2
 800cf48:	18ed      	addgt	r5, r5, r3
 800cf4a:	f04f 0900 	mov.w	r9, #0
 800cf4e:	341a      	adds	r4, #26
 800cf50:	454d      	cmp	r5, r9
 800cf52:	d11a      	bne.n	800cf8a <_printf_common+0xd6>
 800cf54:	2000      	movs	r0, #0
 800cf56:	e008      	b.n	800cf6a <_printf_common+0xb6>
 800cf58:	2301      	movs	r3, #1
 800cf5a:	4652      	mov	r2, sl
 800cf5c:	4639      	mov	r1, r7
 800cf5e:	4630      	mov	r0, r6
 800cf60:	47c0      	blx	r8
 800cf62:	3001      	adds	r0, #1
 800cf64:	d103      	bne.n	800cf6e <_printf_common+0xba>
 800cf66:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6e:	3501      	adds	r5, #1
 800cf70:	e7c3      	b.n	800cefa <_printf_common+0x46>
 800cf72:	18e1      	adds	r1, r4, r3
 800cf74:	1c5a      	adds	r2, r3, #1
 800cf76:	2030      	movs	r0, #48	; 0x30
 800cf78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf7c:	4422      	add	r2, r4
 800cf7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf86:	3302      	adds	r3, #2
 800cf88:	e7c5      	b.n	800cf16 <_printf_common+0x62>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	4622      	mov	r2, r4
 800cf8e:	4639      	mov	r1, r7
 800cf90:	4630      	mov	r0, r6
 800cf92:	47c0      	blx	r8
 800cf94:	3001      	adds	r0, #1
 800cf96:	d0e6      	beq.n	800cf66 <_printf_common+0xb2>
 800cf98:	f109 0901 	add.w	r9, r9, #1
 800cf9c:	e7d8      	b.n	800cf50 <_printf_common+0x9c>
	...

0800cfa0 <_printf_i>:
 800cfa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfa4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cfa8:	460c      	mov	r4, r1
 800cfaa:	7e09      	ldrb	r1, [r1, #24]
 800cfac:	b085      	sub	sp, #20
 800cfae:	296e      	cmp	r1, #110	; 0x6e
 800cfb0:	4617      	mov	r7, r2
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	4698      	mov	r8, r3
 800cfb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfb8:	f000 80b3 	beq.w	800d122 <_printf_i+0x182>
 800cfbc:	d822      	bhi.n	800d004 <_printf_i+0x64>
 800cfbe:	2963      	cmp	r1, #99	; 0x63
 800cfc0:	d036      	beq.n	800d030 <_printf_i+0x90>
 800cfc2:	d80a      	bhi.n	800cfda <_printf_i+0x3a>
 800cfc4:	2900      	cmp	r1, #0
 800cfc6:	f000 80b9 	beq.w	800d13c <_printf_i+0x19c>
 800cfca:	2958      	cmp	r1, #88	; 0x58
 800cfcc:	f000 8083 	beq.w	800d0d6 <_printf_i+0x136>
 800cfd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cfd8:	e032      	b.n	800d040 <_printf_i+0xa0>
 800cfda:	2964      	cmp	r1, #100	; 0x64
 800cfdc:	d001      	beq.n	800cfe2 <_printf_i+0x42>
 800cfde:	2969      	cmp	r1, #105	; 0x69
 800cfe0:	d1f6      	bne.n	800cfd0 <_printf_i+0x30>
 800cfe2:	6820      	ldr	r0, [r4, #0]
 800cfe4:	6813      	ldr	r3, [r2, #0]
 800cfe6:	0605      	lsls	r5, r0, #24
 800cfe8:	f103 0104 	add.w	r1, r3, #4
 800cfec:	d52a      	bpl.n	800d044 <_printf_i+0xa4>
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	6011      	str	r1, [r2, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	da03      	bge.n	800cffe <_printf_i+0x5e>
 800cff6:	222d      	movs	r2, #45	; 0x2d
 800cff8:	425b      	negs	r3, r3
 800cffa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cffe:	486f      	ldr	r0, [pc, #444]	; (800d1bc <_printf_i+0x21c>)
 800d000:	220a      	movs	r2, #10
 800d002:	e039      	b.n	800d078 <_printf_i+0xd8>
 800d004:	2973      	cmp	r1, #115	; 0x73
 800d006:	f000 809d 	beq.w	800d144 <_printf_i+0x1a4>
 800d00a:	d808      	bhi.n	800d01e <_printf_i+0x7e>
 800d00c:	296f      	cmp	r1, #111	; 0x6f
 800d00e:	d020      	beq.n	800d052 <_printf_i+0xb2>
 800d010:	2970      	cmp	r1, #112	; 0x70
 800d012:	d1dd      	bne.n	800cfd0 <_printf_i+0x30>
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	f043 0320 	orr.w	r3, r3, #32
 800d01a:	6023      	str	r3, [r4, #0]
 800d01c:	e003      	b.n	800d026 <_printf_i+0x86>
 800d01e:	2975      	cmp	r1, #117	; 0x75
 800d020:	d017      	beq.n	800d052 <_printf_i+0xb2>
 800d022:	2978      	cmp	r1, #120	; 0x78
 800d024:	d1d4      	bne.n	800cfd0 <_printf_i+0x30>
 800d026:	2378      	movs	r3, #120	; 0x78
 800d028:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d02c:	4864      	ldr	r0, [pc, #400]	; (800d1c0 <_printf_i+0x220>)
 800d02e:	e055      	b.n	800d0dc <_printf_i+0x13c>
 800d030:	6813      	ldr	r3, [r2, #0]
 800d032:	1d19      	adds	r1, r3, #4
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	6011      	str	r1, [r2, #0]
 800d038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d03c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d040:	2301      	movs	r3, #1
 800d042:	e08c      	b.n	800d15e <_printf_i+0x1be>
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	6011      	str	r1, [r2, #0]
 800d048:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d04c:	bf18      	it	ne
 800d04e:	b21b      	sxthne	r3, r3
 800d050:	e7cf      	b.n	800cff2 <_printf_i+0x52>
 800d052:	6813      	ldr	r3, [r2, #0]
 800d054:	6825      	ldr	r5, [r4, #0]
 800d056:	1d18      	adds	r0, r3, #4
 800d058:	6010      	str	r0, [r2, #0]
 800d05a:	0628      	lsls	r0, r5, #24
 800d05c:	d501      	bpl.n	800d062 <_printf_i+0xc2>
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	e002      	b.n	800d068 <_printf_i+0xc8>
 800d062:	0668      	lsls	r0, r5, #25
 800d064:	d5fb      	bpl.n	800d05e <_printf_i+0xbe>
 800d066:	881b      	ldrh	r3, [r3, #0]
 800d068:	4854      	ldr	r0, [pc, #336]	; (800d1bc <_printf_i+0x21c>)
 800d06a:	296f      	cmp	r1, #111	; 0x6f
 800d06c:	bf14      	ite	ne
 800d06e:	220a      	movne	r2, #10
 800d070:	2208      	moveq	r2, #8
 800d072:	2100      	movs	r1, #0
 800d074:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d078:	6865      	ldr	r5, [r4, #4]
 800d07a:	60a5      	str	r5, [r4, #8]
 800d07c:	2d00      	cmp	r5, #0
 800d07e:	f2c0 8095 	blt.w	800d1ac <_printf_i+0x20c>
 800d082:	6821      	ldr	r1, [r4, #0]
 800d084:	f021 0104 	bic.w	r1, r1, #4
 800d088:	6021      	str	r1, [r4, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d13d      	bne.n	800d10a <_printf_i+0x16a>
 800d08e:	2d00      	cmp	r5, #0
 800d090:	f040 808e 	bne.w	800d1b0 <_printf_i+0x210>
 800d094:	4665      	mov	r5, ip
 800d096:	2a08      	cmp	r2, #8
 800d098:	d10b      	bne.n	800d0b2 <_printf_i+0x112>
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	07db      	lsls	r3, r3, #31
 800d09e:	d508      	bpl.n	800d0b2 <_printf_i+0x112>
 800d0a0:	6923      	ldr	r3, [r4, #16]
 800d0a2:	6862      	ldr	r2, [r4, #4]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	bfde      	ittt	le
 800d0a8:	2330      	movle	r3, #48	; 0x30
 800d0aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0b2:	ebac 0305 	sub.w	r3, ip, r5
 800d0b6:	6123      	str	r3, [r4, #16]
 800d0b8:	f8cd 8000 	str.w	r8, [sp]
 800d0bc:	463b      	mov	r3, r7
 800d0be:	aa03      	add	r2, sp, #12
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f7ff fef6 	bl	800ceb4 <_printf_common>
 800d0c8:	3001      	adds	r0, #1
 800d0ca:	d14d      	bne.n	800d168 <_printf_i+0x1c8>
 800d0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d0:	b005      	add	sp, #20
 800d0d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0d6:	4839      	ldr	r0, [pc, #228]	; (800d1bc <_printf_i+0x21c>)
 800d0d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d0dc:	6813      	ldr	r3, [r2, #0]
 800d0de:	6821      	ldr	r1, [r4, #0]
 800d0e0:	1d1d      	adds	r5, r3, #4
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	6015      	str	r5, [r2, #0]
 800d0e6:	060a      	lsls	r2, r1, #24
 800d0e8:	d50b      	bpl.n	800d102 <_printf_i+0x162>
 800d0ea:	07ca      	lsls	r2, r1, #31
 800d0ec:	bf44      	itt	mi
 800d0ee:	f041 0120 	orrmi.w	r1, r1, #32
 800d0f2:	6021      	strmi	r1, [r4, #0]
 800d0f4:	b91b      	cbnz	r3, 800d0fe <_printf_i+0x15e>
 800d0f6:	6822      	ldr	r2, [r4, #0]
 800d0f8:	f022 0220 	bic.w	r2, r2, #32
 800d0fc:	6022      	str	r2, [r4, #0]
 800d0fe:	2210      	movs	r2, #16
 800d100:	e7b7      	b.n	800d072 <_printf_i+0xd2>
 800d102:	064d      	lsls	r5, r1, #25
 800d104:	bf48      	it	mi
 800d106:	b29b      	uxthmi	r3, r3
 800d108:	e7ef      	b.n	800d0ea <_printf_i+0x14a>
 800d10a:	4665      	mov	r5, ip
 800d10c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d110:	fb02 3311 	mls	r3, r2, r1, r3
 800d114:	5cc3      	ldrb	r3, [r0, r3]
 800d116:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d11a:	460b      	mov	r3, r1
 800d11c:	2900      	cmp	r1, #0
 800d11e:	d1f5      	bne.n	800d10c <_printf_i+0x16c>
 800d120:	e7b9      	b.n	800d096 <_printf_i+0xf6>
 800d122:	6813      	ldr	r3, [r2, #0]
 800d124:	6825      	ldr	r5, [r4, #0]
 800d126:	6961      	ldr	r1, [r4, #20]
 800d128:	1d18      	adds	r0, r3, #4
 800d12a:	6010      	str	r0, [r2, #0]
 800d12c:	0628      	lsls	r0, r5, #24
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	d501      	bpl.n	800d136 <_printf_i+0x196>
 800d132:	6019      	str	r1, [r3, #0]
 800d134:	e002      	b.n	800d13c <_printf_i+0x19c>
 800d136:	066a      	lsls	r2, r5, #25
 800d138:	d5fb      	bpl.n	800d132 <_printf_i+0x192>
 800d13a:	8019      	strh	r1, [r3, #0]
 800d13c:	2300      	movs	r3, #0
 800d13e:	6123      	str	r3, [r4, #16]
 800d140:	4665      	mov	r5, ip
 800d142:	e7b9      	b.n	800d0b8 <_printf_i+0x118>
 800d144:	6813      	ldr	r3, [r2, #0]
 800d146:	1d19      	adds	r1, r3, #4
 800d148:	6011      	str	r1, [r2, #0]
 800d14a:	681d      	ldr	r5, [r3, #0]
 800d14c:	6862      	ldr	r2, [r4, #4]
 800d14e:	2100      	movs	r1, #0
 800d150:	4628      	mov	r0, r5
 800d152:	f7f3 f84d 	bl	80001f0 <memchr>
 800d156:	b108      	cbz	r0, 800d15c <_printf_i+0x1bc>
 800d158:	1b40      	subs	r0, r0, r5
 800d15a:	6060      	str	r0, [r4, #4]
 800d15c:	6863      	ldr	r3, [r4, #4]
 800d15e:	6123      	str	r3, [r4, #16]
 800d160:	2300      	movs	r3, #0
 800d162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d166:	e7a7      	b.n	800d0b8 <_printf_i+0x118>
 800d168:	6923      	ldr	r3, [r4, #16]
 800d16a:	462a      	mov	r2, r5
 800d16c:	4639      	mov	r1, r7
 800d16e:	4630      	mov	r0, r6
 800d170:	47c0      	blx	r8
 800d172:	3001      	adds	r0, #1
 800d174:	d0aa      	beq.n	800d0cc <_printf_i+0x12c>
 800d176:	6823      	ldr	r3, [r4, #0]
 800d178:	079b      	lsls	r3, r3, #30
 800d17a:	d413      	bmi.n	800d1a4 <_printf_i+0x204>
 800d17c:	68e0      	ldr	r0, [r4, #12]
 800d17e:	9b03      	ldr	r3, [sp, #12]
 800d180:	4298      	cmp	r0, r3
 800d182:	bfb8      	it	lt
 800d184:	4618      	movlt	r0, r3
 800d186:	e7a3      	b.n	800d0d0 <_printf_i+0x130>
 800d188:	2301      	movs	r3, #1
 800d18a:	464a      	mov	r2, r9
 800d18c:	4639      	mov	r1, r7
 800d18e:	4630      	mov	r0, r6
 800d190:	47c0      	blx	r8
 800d192:	3001      	adds	r0, #1
 800d194:	d09a      	beq.n	800d0cc <_printf_i+0x12c>
 800d196:	3501      	adds	r5, #1
 800d198:	68e3      	ldr	r3, [r4, #12]
 800d19a:	9a03      	ldr	r2, [sp, #12]
 800d19c:	1a9b      	subs	r3, r3, r2
 800d19e:	42ab      	cmp	r3, r5
 800d1a0:	dcf2      	bgt.n	800d188 <_printf_i+0x1e8>
 800d1a2:	e7eb      	b.n	800d17c <_printf_i+0x1dc>
 800d1a4:	2500      	movs	r5, #0
 800d1a6:	f104 0919 	add.w	r9, r4, #25
 800d1aa:	e7f5      	b.n	800d198 <_printf_i+0x1f8>
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d1ac      	bne.n	800d10a <_printf_i+0x16a>
 800d1b0:	7803      	ldrb	r3, [r0, #0]
 800d1b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1ba:	e76c      	b.n	800d096 <_printf_i+0xf6>
 800d1bc:	0800e5b9 	.word	0x0800e5b9
 800d1c0:	0800e5ca 	.word	0x0800e5ca

0800d1c4 <memcpy>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	1e43      	subs	r3, r0, #1
 800d1c8:	440a      	add	r2, r1
 800d1ca:	4291      	cmp	r1, r2
 800d1cc:	d100      	bne.n	800d1d0 <memcpy+0xc>
 800d1ce:	bd10      	pop	{r4, pc}
 800d1d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1d8:	e7f7      	b.n	800d1ca <memcpy+0x6>

0800d1da <memmove>:
 800d1da:	4288      	cmp	r0, r1
 800d1dc:	b510      	push	{r4, lr}
 800d1de:	eb01 0302 	add.w	r3, r1, r2
 800d1e2:	d807      	bhi.n	800d1f4 <memmove+0x1a>
 800d1e4:	1e42      	subs	r2, r0, #1
 800d1e6:	4299      	cmp	r1, r3
 800d1e8:	d00a      	beq.n	800d200 <memmove+0x26>
 800d1ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d1f2:	e7f8      	b.n	800d1e6 <memmove+0xc>
 800d1f4:	4283      	cmp	r3, r0
 800d1f6:	d9f5      	bls.n	800d1e4 <memmove+0xa>
 800d1f8:	1881      	adds	r1, r0, r2
 800d1fa:	1ad2      	subs	r2, r2, r3
 800d1fc:	42d3      	cmn	r3, r2
 800d1fe:	d100      	bne.n	800d202 <memmove+0x28>
 800d200:	bd10      	pop	{r4, pc}
 800d202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d206:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d20a:	e7f7      	b.n	800d1fc <memmove+0x22>

0800d20c <_free_r>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	4605      	mov	r5, r0
 800d210:	2900      	cmp	r1, #0
 800d212:	d045      	beq.n	800d2a0 <_free_r+0x94>
 800d214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d218:	1f0c      	subs	r4, r1, #4
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	bfb8      	it	lt
 800d21e:	18e4      	addlt	r4, r4, r3
 800d220:	f000 f8d2 	bl	800d3c8 <__malloc_lock>
 800d224:	4a1f      	ldr	r2, [pc, #124]	; (800d2a4 <_free_r+0x98>)
 800d226:	6813      	ldr	r3, [r2, #0]
 800d228:	4610      	mov	r0, r2
 800d22a:	b933      	cbnz	r3, 800d23a <_free_r+0x2e>
 800d22c:	6063      	str	r3, [r4, #4]
 800d22e:	6014      	str	r4, [r2, #0]
 800d230:	4628      	mov	r0, r5
 800d232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d236:	f000 b8c8 	b.w	800d3ca <__malloc_unlock>
 800d23a:	42a3      	cmp	r3, r4
 800d23c:	d90c      	bls.n	800d258 <_free_r+0x4c>
 800d23e:	6821      	ldr	r1, [r4, #0]
 800d240:	1862      	adds	r2, r4, r1
 800d242:	4293      	cmp	r3, r2
 800d244:	bf04      	itt	eq
 800d246:	681a      	ldreq	r2, [r3, #0]
 800d248:	685b      	ldreq	r3, [r3, #4]
 800d24a:	6063      	str	r3, [r4, #4]
 800d24c:	bf04      	itt	eq
 800d24e:	1852      	addeq	r2, r2, r1
 800d250:	6022      	streq	r2, [r4, #0]
 800d252:	6004      	str	r4, [r0, #0]
 800d254:	e7ec      	b.n	800d230 <_free_r+0x24>
 800d256:	4613      	mov	r3, r2
 800d258:	685a      	ldr	r2, [r3, #4]
 800d25a:	b10a      	cbz	r2, 800d260 <_free_r+0x54>
 800d25c:	42a2      	cmp	r2, r4
 800d25e:	d9fa      	bls.n	800d256 <_free_r+0x4a>
 800d260:	6819      	ldr	r1, [r3, #0]
 800d262:	1858      	adds	r0, r3, r1
 800d264:	42a0      	cmp	r0, r4
 800d266:	d10b      	bne.n	800d280 <_free_r+0x74>
 800d268:	6820      	ldr	r0, [r4, #0]
 800d26a:	4401      	add	r1, r0
 800d26c:	1858      	adds	r0, r3, r1
 800d26e:	4282      	cmp	r2, r0
 800d270:	6019      	str	r1, [r3, #0]
 800d272:	d1dd      	bne.n	800d230 <_free_r+0x24>
 800d274:	6810      	ldr	r0, [r2, #0]
 800d276:	6852      	ldr	r2, [r2, #4]
 800d278:	605a      	str	r2, [r3, #4]
 800d27a:	4401      	add	r1, r0
 800d27c:	6019      	str	r1, [r3, #0]
 800d27e:	e7d7      	b.n	800d230 <_free_r+0x24>
 800d280:	d902      	bls.n	800d288 <_free_r+0x7c>
 800d282:	230c      	movs	r3, #12
 800d284:	602b      	str	r3, [r5, #0]
 800d286:	e7d3      	b.n	800d230 <_free_r+0x24>
 800d288:	6820      	ldr	r0, [r4, #0]
 800d28a:	1821      	adds	r1, r4, r0
 800d28c:	428a      	cmp	r2, r1
 800d28e:	bf04      	itt	eq
 800d290:	6811      	ldreq	r1, [r2, #0]
 800d292:	6852      	ldreq	r2, [r2, #4]
 800d294:	6062      	str	r2, [r4, #4]
 800d296:	bf04      	itt	eq
 800d298:	1809      	addeq	r1, r1, r0
 800d29a:	6021      	streq	r1, [r4, #0]
 800d29c:	605c      	str	r4, [r3, #4]
 800d29e:	e7c7      	b.n	800d230 <_free_r+0x24>
 800d2a0:	bd38      	pop	{r3, r4, r5, pc}
 800d2a2:	bf00      	nop
 800d2a4:	200000b8 	.word	0x200000b8

0800d2a8 <_malloc_r>:
 800d2a8:	b570      	push	{r4, r5, r6, lr}
 800d2aa:	1ccd      	adds	r5, r1, #3
 800d2ac:	f025 0503 	bic.w	r5, r5, #3
 800d2b0:	3508      	adds	r5, #8
 800d2b2:	2d0c      	cmp	r5, #12
 800d2b4:	bf38      	it	cc
 800d2b6:	250c      	movcc	r5, #12
 800d2b8:	2d00      	cmp	r5, #0
 800d2ba:	4606      	mov	r6, r0
 800d2bc:	db01      	blt.n	800d2c2 <_malloc_r+0x1a>
 800d2be:	42a9      	cmp	r1, r5
 800d2c0:	d903      	bls.n	800d2ca <_malloc_r+0x22>
 800d2c2:	230c      	movs	r3, #12
 800d2c4:	6033      	str	r3, [r6, #0]
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	bd70      	pop	{r4, r5, r6, pc}
 800d2ca:	f000 f87d 	bl	800d3c8 <__malloc_lock>
 800d2ce:	4a21      	ldr	r2, [pc, #132]	; (800d354 <_malloc_r+0xac>)
 800d2d0:	6814      	ldr	r4, [r2, #0]
 800d2d2:	4621      	mov	r1, r4
 800d2d4:	b991      	cbnz	r1, 800d2fc <_malloc_r+0x54>
 800d2d6:	4c20      	ldr	r4, [pc, #128]	; (800d358 <_malloc_r+0xb0>)
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	b91b      	cbnz	r3, 800d2e4 <_malloc_r+0x3c>
 800d2dc:	4630      	mov	r0, r6
 800d2de:	f000 f863 	bl	800d3a8 <_sbrk_r>
 800d2e2:	6020      	str	r0, [r4, #0]
 800d2e4:	4629      	mov	r1, r5
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	f000 f85e 	bl	800d3a8 <_sbrk_r>
 800d2ec:	1c43      	adds	r3, r0, #1
 800d2ee:	d124      	bne.n	800d33a <_malloc_r+0x92>
 800d2f0:	230c      	movs	r3, #12
 800d2f2:	6033      	str	r3, [r6, #0]
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f000 f868 	bl	800d3ca <__malloc_unlock>
 800d2fa:	e7e4      	b.n	800d2c6 <_malloc_r+0x1e>
 800d2fc:	680b      	ldr	r3, [r1, #0]
 800d2fe:	1b5b      	subs	r3, r3, r5
 800d300:	d418      	bmi.n	800d334 <_malloc_r+0x8c>
 800d302:	2b0b      	cmp	r3, #11
 800d304:	d90f      	bls.n	800d326 <_malloc_r+0x7e>
 800d306:	600b      	str	r3, [r1, #0]
 800d308:	50cd      	str	r5, [r1, r3]
 800d30a:	18cc      	adds	r4, r1, r3
 800d30c:	4630      	mov	r0, r6
 800d30e:	f000 f85c 	bl	800d3ca <__malloc_unlock>
 800d312:	f104 000b 	add.w	r0, r4, #11
 800d316:	1d23      	adds	r3, r4, #4
 800d318:	f020 0007 	bic.w	r0, r0, #7
 800d31c:	1ac3      	subs	r3, r0, r3
 800d31e:	d0d3      	beq.n	800d2c8 <_malloc_r+0x20>
 800d320:	425a      	negs	r2, r3
 800d322:	50e2      	str	r2, [r4, r3]
 800d324:	e7d0      	b.n	800d2c8 <_malloc_r+0x20>
 800d326:	428c      	cmp	r4, r1
 800d328:	684b      	ldr	r3, [r1, #4]
 800d32a:	bf16      	itet	ne
 800d32c:	6063      	strne	r3, [r4, #4]
 800d32e:	6013      	streq	r3, [r2, #0]
 800d330:	460c      	movne	r4, r1
 800d332:	e7eb      	b.n	800d30c <_malloc_r+0x64>
 800d334:	460c      	mov	r4, r1
 800d336:	6849      	ldr	r1, [r1, #4]
 800d338:	e7cc      	b.n	800d2d4 <_malloc_r+0x2c>
 800d33a:	1cc4      	adds	r4, r0, #3
 800d33c:	f024 0403 	bic.w	r4, r4, #3
 800d340:	42a0      	cmp	r0, r4
 800d342:	d005      	beq.n	800d350 <_malloc_r+0xa8>
 800d344:	1a21      	subs	r1, r4, r0
 800d346:	4630      	mov	r0, r6
 800d348:	f000 f82e 	bl	800d3a8 <_sbrk_r>
 800d34c:	3001      	adds	r0, #1
 800d34e:	d0cf      	beq.n	800d2f0 <_malloc_r+0x48>
 800d350:	6025      	str	r5, [r4, #0]
 800d352:	e7db      	b.n	800d30c <_malloc_r+0x64>
 800d354:	200000b8 	.word	0x200000b8
 800d358:	200000bc 	.word	0x200000bc

0800d35c <_realloc_r>:
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35e:	4607      	mov	r7, r0
 800d360:	4614      	mov	r4, r2
 800d362:	460e      	mov	r6, r1
 800d364:	b921      	cbnz	r1, 800d370 <_realloc_r+0x14>
 800d366:	4611      	mov	r1, r2
 800d368:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d36c:	f7ff bf9c 	b.w	800d2a8 <_malloc_r>
 800d370:	b922      	cbnz	r2, 800d37c <_realloc_r+0x20>
 800d372:	f7ff ff4b 	bl	800d20c <_free_r>
 800d376:	4625      	mov	r5, r4
 800d378:	4628      	mov	r0, r5
 800d37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d37c:	f000 f826 	bl	800d3cc <_malloc_usable_size_r>
 800d380:	42a0      	cmp	r0, r4
 800d382:	d20f      	bcs.n	800d3a4 <_realloc_r+0x48>
 800d384:	4621      	mov	r1, r4
 800d386:	4638      	mov	r0, r7
 800d388:	f7ff ff8e 	bl	800d2a8 <_malloc_r>
 800d38c:	4605      	mov	r5, r0
 800d38e:	2800      	cmp	r0, #0
 800d390:	d0f2      	beq.n	800d378 <_realloc_r+0x1c>
 800d392:	4631      	mov	r1, r6
 800d394:	4622      	mov	r2, r4
 800d396:	f7ff ff15 	bl	800d1c4 <memcpy>
 800d39a:	4631      	mov	r1, r6
 800d39c:	4638      	mov	r0, r7
 800d39e:	f7ff ff35 	bl	800d20c <_free_r>
 800d3a2:	e7e9      	b.n	800d378 <_realloc_r+0x1c>
 800d3a4:	4635      	mov	r5, r6
 800d3a6:	e7e7      	b.n	800d378 <_realloc_r+0x1c>

0800d3a8 <_sbrk_r>:
 800d3a8:	b538      	push	{r3, r4, r5, lr}
 800d3aa:	4c06      	ldr	r4, [pc, #24]	; (800d3c4 <_sbrk_r+0x1c>)
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	4605      	mov	r5, r0
 800d3b0:	4608      	mov	r0, r1
 800d3b2:	6023      	str	r3, [r4, #0]
 800d3b4:	f7f8 fdbe 	bl	8005f34 <_sbrk>
 800d3b8:	1c43      	adds	r3, r0, #1
 800d3ba:	d102      	bne.n	800d3c2 <_sbrk_r+0x1a>
 800d3bc:	6823      	ldr	r3, [r4, #0]
 800d3be:	b103      	cbz	r3, 800d3c2 <_sbrk_r+0x1a>
 800d3c0:	602b      	str	r3, [r5, #0]
 800d3c2:	bd38      	pop	{r3, r4, r5, pc}
 800d3c4:	20001670 	.word	0x20001670

0800d3c8 <__malloc_lock>:
 800d3c8:	4770      	bx	lr

0800d3ca <__malloc_unlock>:
 800d3ca:	4770      	bx	lr

0800d3cc <_malloc_usable_size_r>:
 800d3cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3d0:	1f18      	subs	r0, r3, #4
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	bfbc      	itt	lt
 800d3d6:	580b      	ldrlt	r3, [r1, r0]
 800d3d8:	18c0      	addlt	r0, r0, r3
 800d3da:	4770      	bx	lr
 800d3dc:	0000      	movs	r0, r0
	...

0800d3e0 <sin>:
 800d3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3e2:	ec51 0b10 	vmov	r0, r1, d0
 800d3e6:	4a20      	ldr	r2, [pc, #128]	; (800d468 <sin+0x88>)
 800d3e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	dc07      	bgt.n	800d400 <sin+0x20>
 800d3f0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800d460 <sin+0x80>
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	f000 fe37 	bl	800e068 <__kernel_sin>
 800d3fa:	ec51 0b10 	vmov	r0, r1, d0
 800d3fe:	e007      	b.n	800d410 <sin+0x30>
 800d400:	4a1a      	ldr	r2, [pc, #104]	; (800d46c <sin+0x8c>)
 800d402:	4293      	cmp	r3, r2
 800d404:	dd09      	ble.n	800d41a <sin+0x3a>
 800d406:	ee10 2a10 	vmov	r2, s0
 800d40a:	460b      	mov	r3, r1
 800d40c:	f7f2 ff44 	bl	8000298 <__aeabi_dsub>
 800d410:	ec41 0b10 	vmov	d0, r0, r1
 800d414:	b005      	add	sp, #20
 800d416:	f85d fb04 	ldr.w	pc, [sp], #4
 800d41a:	4668      	mov	r0, sp
 800d41c:	f000 f828 	bl	800d470 <__ieee754_rem_pio2>
 800d420:	f000 0003 	and.w	r0, r0, #3
 800d424:	2801      	cmp	r0, #1
 800d426:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d42a:	ed9d 0b00 	vldr	d0, [sp]
 800d42e:	d004      	beq.n	800d43a <sin+0x5a>
 800d430:	2802      	cmp	r0, #2
 800d432:	d005      	beq.n	800d440 <sin+0x60>
 800d434:	b970      	cbnz	r0, 800d454 <sin+0x74>
 800d436:	2001      	movs	r0, #1
 800d438:	e7dd      	b.n	800d3f6 <sin+0x16>
 800d43a:	f000 fa0d 	bl	800d858 <__kernel_cos>
 800d43e:	e7dc      	b.n	800d3fa <sin+0x1a>
 800d440:	2001      	movs	r0, #1
 800d442:	f000 fe11 	bl	800e068 <__kernel_sin>
 800d446:	ec53 2b10 	vmov	r2, r3, d0
 800d44a:	ee10 0a10 	vmov	r0, s0
 800d44e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d452:	e7dd      	b.n	800d410 <sin+0x30>
 800d454:	f000 fa00 	bl	800d858 <__kernel_cos>
 800d458:	e7f5      	b.n	800d446 <sin+0x66>
 800d45a:	bf00      	nop
 800d45c:	f3af 8000 	nop.w
	...
 800d468:	3fe921fb 	.word	0x3fe921fb
 800d46c:	7fefffff 	.word	0x7fefffff

0800d470 <__ieee754_rem_pio2>:
 800d470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d474:	ec57 6b10 	vmov	r6, r7, d0
 800d478:	4bc3      	ldr	r3, [pc, #780]	; (800d788 <__ieee754_rem_pio2+0x318>)
 800d47a:	b08d      	sub	sp, #52	; 0x34
 800d47c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d480:	4598      	cmp	r8, r3
 800d482:	4604      	mov	r4, r0
 800d484:	9704      	str	r7, [sp, #16]
 800d486:	dc07      	bgt.n	800d498 <__ieee754_rem_pio2+0x28>
 800d488:	2200      	movs	r2, #0
 800d48a:	2300      	movs	r3, #0
 800d48c:	ed84 0b00 	vstr	d0, [r4]
 800d490:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d494:	2500      	movs	r5, #0
 800d496:	e027      	b.n	800d4e8 <__ieee754_rem_pio2+0x78>
 800d498:	4bbc      	ldr	r3, [pc, #752]	; (800d78c <__ieee754_rem_pio2+0x31c>)
 800d49a:	4598      	cmp	r8, r3
 800d49c:	dc75      	bgt.n	800d58a <__ieee754_rem_pio2+0x11a>
 800d49e:	9b04      	ldr	r3, [sp, #16]
 800d4a0:	4dbb      	ldr	r5, [pc, #748]	; (800d790 <__ieee754_rem_pio2+0x320>)
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	ee10 0a10 	vmov	r0, s0
 800d4a8:	a3a9      	add	r3, pc, #676	; (adr r3, 800d750 <__ieee754_rem_pio2+0x2e0>)
 800d4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ae:	4639      	mov	r1, r7
 800d4b0:	dd36      	ble.n	800d520 <__ieee754_rem_pio2+0xb0>
 800d4b2:	f7f2 fef1 	bl	8000298 <__aeabi_dsub>
 800d4b6:	45a8      	cmp	r8, r5
 800d4b8:	4606      	mov	r6, r0
 800d4ba:	460f      	mov	r7, r1
 800d4bc:	d018      	beq.n	800d4f0 <__ieee754_rem_pio2+0x80>
 800d4be:	a3a6      	add	r3, pc, #664	; (adr r3, 800d758 <__ieee754_rem_pio2+0x2e8>)
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	f7f2 fee8 	bl	8000298 <__aeabi_dsub>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	e9c4 2300 	strd	r2, r3, [r4]
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	f7f2 fee0 	bl	8000298 <__aeabi_dsub>
 800d4d8:	a39f      	add	r3, pc, #636	; (adr r3, 800d758 <__ieee754_rem_pio2+0x2e8>)
 800d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4de:	f7f2 fedb 	bl	8000298 <__aeabi_dsub>
 800d4e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d4e6:	2501      	movs	r5, #1
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	b00d      	add	sp, #52	; 0x34
 800d4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f0:	a39b      	add	r3, pc, #620	; (adr r3, 800d760 <__ieee754_rem_pio2+0x2f0>)
 800d4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f6:	f7f2 fecf 	bl	8000298 <__aeabi_dsub>
 800d4fa:	a39b      	add	r3, pc, #620	; (adr r3, 800d768 <__ieee754_rem_pio2+0x2f8>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	4606      	mov	r6, r0
 800d502:	460f      	mov	r7, r1
 800d504:	f7f2 fec8 	bl	8000298 <__aeabi_dsub>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	e9c4 2300 	strd	r2, r3, [r4]
 800d510:	4630      	mov	r0, r6
 800d512:	4639      	mov	r1, r7
 800d514:	f7f2 fec0 	bl	8000298 <__aeabi_dsub>
 800d518:	a393      	add	r3, pc, #588	; (adr r3, 800d768 <__ieee754_rem_pio2+0x2f8>)
 800d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51e:	e7de      	b.n	800d4de <__ieee754_rem_pio2+0x6e>
 800d520:	f7f2 febc 	bl	800029c <__adddf3>
 800d524:	45a8      	cmp	r8, r5
 800d526:	4606      	mov	r6, r0
 800d528:	460f      	mov	r7, r1
 800d52a:	d016      	beq.n	800d55a <__ieee754_rem_pio2+0xea>
 800d52c:	a38a      	add	r3, pc, #552	; (adr r3, 800d758 <__ieee754_rem_pio2+0x2e8>)
 800d52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d532:	f7f2 feb3 	bl	800029c <__adddf3>
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	e9c4 2300 	strd	r2, r3, [r4]
 800d53e:	4630      	mov	r0, r6
 800d540:	4639      	mov	r1, r7
 800d542:	f7f2 fea9 	bl	8000298 <__aeabi_dsub>
 800d546:	a384      	add	r3, pc, #528	; (adr r3, 800d758 <__ieee754_rem_pio2+0x2e8>)
 800d548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54c:	f7f2 fea6 	bl	800029c <__adddf3>
 800d550:	f04f 35ff 	mov.w	r5, #4294967295
 800d554:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d558:	e7c6      	b.n	800d4e8 <__ieee754_rem_pio2+0x78>
 800d55a:	a381      	add	r3, pc, #516	; (adr r3, 800d760 <__ieee754_rem_pio2+0x2f0>)
 800d55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d560:	f7f2 fe9c 	bl	800029c <__adddf3>
 800d564:	a380      	add	r3, pc, #512	; (adr r3, 800d768 <__ieee754_rem_pio2+0x2f8>)
 800d566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56a:	4606      	mov	r6, r0
 800d56c:	460f      	mov	r7, r1
 800d56e:	f7f2 fe95 	bl	800029c <__adddf3>
 800d572:	4602      	mov	r2, r0
 800d574:	460b      	mov	r3, r1
 800d576:	e9c4 2300 	strd	r2, r3, [r4]
 800d57a:	4630      	mov	r0, r6
 800d57c:	4639      	mov	r1, r7
 800d57e:	f7f2 fe8b 	bl	8000298 <__aeabi_dsub>
 800d582:	a379      	add	r3, pc, #484	; (adr r3, 800d768 <__ieee754_rem_pio2+0x2f8>)
 800d584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d588:	e7e0      	b.n	800d54c <__ieee754_rem_pio2+0xdc>
 800d58a:	4b82      	ldr	r3, [pc, #520]	; (800d794 <__ieee754_rem_pio2+0x324>)
 800d58c:	4598      	cmp	r8, r3
 800d58e:	f300 80d0 	bgt.w	800d732 <__ieee754_rem_pio2+0x2c2>
 800d592:	f000 fe23 	bl	800e1dc <fabs>
 800d596:	ec57 6b10 	vmov	r6, r7, d0
 800d59a:	ee10 0a10 	vmov	r0, s0
 800d59e:	a374      	add	r3, pc, #464	; (adr r3, 800d770 <__ieee754_rem_pio2+0x300>)
 800d5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a4:	4639      	mov	r1, r7
 800d5a6:	f7f3 f82f 	bl	8000608 <__aeabi_dmul>
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	4b7a      	ldr	r3, [pc, #488]	; (800d798 <__ieee754_rem_pio2+0x328>)
 800d5ae:	f7f2 fe75 	bl	800029c <__adddf3>
 800d5b2:	f7f3 fac3 	bl	8000b3c <__aeabi_d2iz>
 800d5b6:	4605      	mov	r5, r0
 800d5b8:	f7f2 ffbc 	bl	8000534 <__aeabi_i2d>
 800d5bc:	a364      	add	r3, pc, #400	; (adr r3, 800d750 <__ieee754_rem_pio2+0x2e0>)
 800d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5c6:	f7f3 f81f 	bl	8000608 <__aeabi_dmul>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	4639      	mov	r1, r7
 800d5d2:	f7f2 fe61 	bl	8000298 <__aeabi_dsub>
 800d5d6:	a360      	add	r3, pc, #384	; (adr r3, 800d758 <__ieee754_rem_pio2+0x2e8>)
 800d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5dc:	4682      	mov	sl, r0
 800d5de:	468b      	mov	fp, r1
 800d5e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5e4:	f7f3 f810 	bl	8000608 <__aeabi_dmul>
 800d5e8:	2d1f      	cmp	r5, #31
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	460f      	mov	r7, r1
 800d5ee:	dc0c      	bgt.n	800d60a <__ieee754_rem_pio2+0x19a>
 800d5f0:	1e6a      	subs	r2, r5, #1
 800d5f2:	4b6a      	ldr	r3, [pc, #424]	; (800d79c <__ieee754_rem_pio2+0x32c>)
 800d5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5f8:	4543      	cmp	r3, r8
 800d5fa:	d006      	beq.n	800d60a <__ieee754_rem_pio2+0x19a>
 800d5fc:	4632      	mov	r2, r6
 800d5fe:	463b      	mov	r3, r7
 800d600:	4650      	mov	r0, sl
 800d602:	4659      	mov	r1, fp
 800d604:	f7f2 fe48 	bl	8000298 <__aeabi_dsub>
 800d608:	e00e      	b.n	800d628 <__ieee754_rem_pio2+0x1b8>
 800d60a:	4632      	mov	r2, r6
 800d60c:	463b      	mov	r3, r7
 800d60e:	4650      	mov	r0, sl
 800d610:	4659      	mov	r1, fp
 800d612:	f7f2 fe41 	bl	8000298 <__aeabi_dsub>
 800d616:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d61a:	9305      	str	r3, [sp, #20]
 800d61c:	9a05      	ldr	r2, [sp, #20]
 800d61e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d622:	1ad3      	subs	r3, r2, r3
 800d624:	2b10      	cmp	r3, #16
 800d626:	dc02      	bgt.n	800d62e <__ieee754_rem_pio2+0x1be>
 800d628:	e9c4 0100 	strd	r0, r1, [r4]
 800d62c:	e039      	b.n	800d6a2 <__ieee754_rem_pio2+0x232>
 800d62e:	a34c      	add	r3, pc, #304	; (adr r3, 800d760 <__ieee754_rem_pio2+0x2f0>)
 800d630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d638:	f7f2 ffe6 	bl	8000608 <__aeabi_dmul>
 800d63c:	4606      	mov	r6, r0
 800d63e:	460f      	mov	r7, r1
 800d640:	4602      	mov	r2, r0
 800d642:	460b      	mov	r3, r1
 800d644:	4650      	mov	r0, sl
 800d646:	4659      	mov	r1, fp
 800d648:	f7f2 fe26 	bl	8000298 <__aeabi_dsub>
 800d64c:	4602      	mov	r2, r0
 800d64e:	460b      	mov	r3, r1
 800d650:	4680      	mov	r8, r0
 800d652:	4689      	mov	r9, r1
 800d654:	4650      	mov	r0, sl
 800d656:	4659      	mov	r1, fp
 800d658:	f7f2 fe1e 	bl	8000298 <__aeabi_dsub>
 800d65c:	4632      	mov	r2, r6
 800d65e:	463b      	mov	r3, r7
 800d660:	f7f2 fe1a 	bl	8000298 <__aeabi_dsub>
 800d664:	a340      	add	r3, pc, #256	; (adr r3, 800d768 <__ieee754_rem_pio2+0x2f8>)
 800d666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66a:	4606      	mov	r6, r0
 800d66c:	460f      	mov	r7, r1
 800d66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d672:	f7f2 ffc9 	bl	8000608 <__aeabi_dmul>
 800d676:	4632      	mov	r2, r6
 800d678:	463b      	mov	r3, r7
 800d67a:	f7f2 fe0d 	bl	8000298 <__aeabi_dsub>
 800d67e:	4602      	mov	r2, r0
 800d680:	460b      	mov	r3, r1
 800d682:	4606      	mov	r6, r0
 800d684:	460f      	mov	r7, r1
 800d686:	4640      	mov	r0, r8
 800d688:	4649      	mov	r1, r9
 800d68a:	f7f2 fe05 	bl	8000298 <__aeabi_dsub>
 800d68e:	9a05      	ldr	r2, [sp, #20]
 800d690:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d694:	1ad3      	subs	r3, r2, r3
 800d696:	2b31      	cmp	r3, #49	; 0x31
 800d698:	dc20      	bgt.n	800d6dc <__ieee754_rem_pio2+0x26c>
 800d69a:	e9c4 0100 	strd	r0, r1, [r4]
 800d69e:	46c2      	mov	sl, r8
 800d6a0:	46cb      	mov	fp, r9
 800d6a2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d6a6:	4650      	mov	r0, sl
 800d6a8:	4642      	mov	r2, r8
 800d6aa:	464b      	mov	r3, r9
 800d6ac:	4659      	mov	r1, fp
 800d6ae:	f7f2 fdf3 	bl	8000298 <__aeabi_dsub>
 800d6b2:	463b      	mov	r3, r7
 800d6b4:	4632      	mov	r2, r6
 800d6b6:	f7f2 fdef 	bl	8000298 <__aeabi_dsub>
 800d6ba:	9b04      	ldr	r3, [sp, #16]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d6c2:	f6bf af11 	bge.w	800d4e8 <__ieee754_rem_pio2+0x78>
 800d6c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d6ca:	6063      	str	r3, [r4, #4]
 800d6cc:	f8c4 8000 	str.w	r8, [r4]
 800d6d0:	60a0      	str	r0, [r4, #8]
 800d6d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6d6:	60e3      	str	r3, [r4, #12]
 800d6d8:	426d      	negs	r5, r5
 800d6da:	e705      	b.n	800d4e8 <__ieee754_rem_pio2+0x78>
 800d6dc:	a326      	add	r3, pc, #152	; (adr r3, 800d778 <__ieee754_rem_pio2+0x308>)
 800d6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6e6:	f7f2 ff8f 	bl	8000608 <__aeabi_dmul>
 800d6ea:	4606      	mov	r6, r0
 800d6ec:	460f      	mov	r7, r1
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	4640      	mov	r0, r8
 800d6f4:	4649      	mov	r1, r9
 800d6f6:	f7f2 fdcf 	bl	8000298 <__aeabi_dsub>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	4682      	mov	sl, r0
 800d700:	468b      	mov	fp, r1
 800d702:	4640      	mov	r0, r8
 800d704:	4649      	mov	r1, r9
 800d706:	f7f2 fdc7 	bl	8000298 <__aeabi_dsub>
 800d70a:	4632      	mov	r2, r6
 800d70c:	463b      	mov	r3, r7
 800d70e:	f7f2 fdc3 	bl	8000298 <__aeabi_dsub>
 800d712:	a31b      	add	r3, pc, #108	; (adr r3, 800d780 <__ieee754_rem_pio2+0x310>)
 800d714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d718:	4606      	mov	r6, r0
 800d71a:	460f      	mov	r7, r1
 800d71c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d720:	f7f2 ff72 	bl	8000608 <__aeabi_dmul>
 800d724:	4632      	mov	r2, r6
 800d726:	463b      	mov	r3, r7
 800d728:	f7f2 fdb6 	bl	8000298 <__aeabi_dsub>
 800d72c:	4606      	mov	r6, r0
 800d72e:	460f      	mov	r7, r1
 800d730:	e764      	b.n	800d5fc <__ieee754_rem_pio2+0x18c>
 800d732:	4b1b      	ldr	r3, [pc, #108]	; (800d7a0 <__ieee754_rem_pio2+0x330>)
 800d734:	4598      	cmp	r8, r3
 800d736:	dd35      	ble.n	800d7a4 <__ieee754_rem_pio2+0x334>
 800d738:	ee10 2a10 	vmov	r2, s0
 800d73c:	463b      	mov	r3, r7
 800d73e:	4630      	mov	r0, r6
 800d740:	4639      	mov	r1, r7
 800d742:	f7f2 fda9 	bl	8000298 <__aeabi_dsub>
 800d746:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d74a:	e9c4 0100 	strd	r0, r1, [r4]
 800d74e:	e6a1      	b.n	800d494 <__ieee754_rem_pio2+0x24>
 800d750:	54400000 	.word	0x54400000
 800d754:	3ff921fb 	.word	0x3ff921fb
 800d758:	1a626331 	.word	0x1a626331
 800d75c:	3dd0b461 	.word	0x3dd0b461
 800d760:	1a600000 	.word	0x1a600000
 800d764:	3dd0b461 	.word	0x3dd0b461
 800d768:	2e037073 	.word	0x2e037073
 800d76c:	3ba3198a 	.word	0x3ba3198a
 800d770:	6dc9c883 	.word	0x6dc9c883
 800d774:	3fe45f30 	.word	0x3fe45f30
 800d778:	2e000000 	.word	0x2e000000
 800d77c:	3ba3198a 	.word	0x3ba3198a
 800d780:	252049c1 	.word	0x252049c1
 800d784:	397b839a 	.word	0x397b839a
 800d788:	3fe921fb 	.word	0x3fe921fb
 800d78c:	4002d97b 	.word	0x4002d97b
 800d790:	3ff921fb 	.word	0x3ff921fb
 800d794:	413921fb 	.word	0x413921fb
 800d798:	3fe00000 	.word	0x3fe00000
 800d79c:	0800e5dc 	.word	0x0800e5dc
 800d7a0:	7fefffff 	.word	0x7fefffff
 800d7a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d7a8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d7ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	460f      	mov	r7, r1
 800d7b4:	f7f3 f9c2 	bl	8000b3c <__aeabi_d2iz>
 800d7b8:	f7f2 febc 	bl	8000534 <__aeabi_i2d>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	460b      	mov	r3, r1
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	4639      	mov	r1, r7
 800d7c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d7c8:	f7f2 fd66 	bl	8000298 <__aeabi_dsub>
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	4b1f      	ldr	r3, [pc, #124]	; (800d84c <__ieee754_rem_pio2+0x3dc>)
 800d7d0:	f7f2 ff1a 	bl	8000608 <__aeabi_dmul>
 800d7d4:	460f      	mov	r7, r1
 800d7d6:	4606      	mov	r6, r0
 800d7d8:	f7f3 f9b0 	bl	8000b3c <__aeabi_d2iz>
 800d7dc:	f7f2 feaa 	bl	8000534 <__aeabi_i2d>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	4639      	mov	r1, r7
 800d7e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d7ec:	f7f2 fd54 	bl	8000298 <__aeabi_dsub>
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	4b16      	ldr	r3, [pc, #88]	; (800d84c <__ieee754_rem_pio2+0x3dc>)
 800d7f4:	f7f2 ff08 	bl	8000608 <__aeabi_dmul>
 800d7f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d7fc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d800:	f04f 0803 	mov.w	r8, #3
 800d804:	2600      	movs	r6, #0
 800d806:	2700      	movs	r7, #0
 800d808:	4632      	mov	r2, r6
 800d80a:	463b      	mov	r3, r7
 800d80c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d810:	f108 3aff 	add.w	sl, r8, #4294967295
 800d814:	f7f3 f960 	bl	8000ad8 <__aeabi_dcmpeq>
 800d818:	b9b0      	cbnz	r0, 800d848 <__ieee754_rem_pio2+0x3d8>
 800d81a:	4b0d      	ldr	r3, [pc, #52]	; (800d850 <__ieee754_rem_pio2+0x3e0>)
 800d81c:	9301      	str	r3, [sp, #4]
 800d81e:	2302      	movs	r3, #2
 800d820:	9300      	str	r3, [sp, #0]
 800d822:	462a      	mov	r2, r5
 800d824:	4643      	mov	r3, r8
 800d826:	4621      	mov	r1, r4
 800d828:	a806      	add	r0, sp, #24
 800d82a:	f000 f8dd 	bl	800d9e8 <__kernel_rem_pio2>
 800d82e:	9b04      	ldr	r3, [sp, #16]
 800d830:	2b00      	cmp	r3, #0
 800d832:	4605      	mov	r5, r0
 800d834:	f6bf ae58 	bge.w	800d4e8 <__ieee754_rem_pio2+0x78>
 800d838:	6863      	ldr	r3, [r4, #4]
 800d83a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d83e:	6063      	str	r3, [r4, #4]
 800d840:	68e3      	ldr	r3, [r4, #12]
 800d842:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d846:	e746      	b.n	800d6d6 <__ieee754_rem_pio2+0x266>
 800d848:	46d0      	mov	r8, sl
 800d84a:	e7dd      	b.n	800d808 <__ieee754_rem_pio2+0x398>
 800d84c:	41700000 	.word	0x41700000
 800d850:	0800e65c 	.word	0x0800e65c
 800d854:	00000000 	.word	0x00000000

0800d858 <__kernel_cos>:
 800d858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d85c:	ec59 8b10 	vmov	r8, r9, d0
 800d860:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800d864:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d868:	ed2d 8b02 	vpush	{d8}
 800d86c:	eeb0 8a41 	vmov.f32	s16, s2
 800d870:	eef0 8a61 	vmov.f32	s17, s3
 800d874:	da07      	bge.n	800d886 <__kernel_cos+0x2e>
 800d876:	ee10 0a10 	vmov	r0, s0
 800d87a:	4649      	mov	r1, r9
 800d87c:	f7f3 f95e 	bl	8000b3c <__aeabi_d2iz>
 800d880:	2800      	cmp	r0, #0
 800d882:	f000 8089 	beq.w	800d998 <__kernel_cos+0x140>
 800d886:	4642      	mov	r2, r8
 800d888:	464b      	mov	r3, r9
 800d88a:	4640      	mov	r0, r8
 800d88c:	4649      	mov	r1, r9
 800d88e:	f7f2 febb 	bl	8000608 <__aeabi_dmul>
 800d892:	2200      	movs	r2, #0
 800d894:	4b4e      	ldr	r3, [pc, #312]	; (800d9d0 <__kernel_cos+0x178>)
 800d896:	4604      	mov	r4, r0
 800d898:	460d      	mov	r5, r1
 800d89a:	f7f2 feb5 	bl	8000608 <__aeabi_dmul>
 800d89e:	a340      	add	r3, pc, #256	; (adr r3, 800d9a0 <__kernel_cos+0x148>)
 800d8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a4:	4682      	mov	sl, r0
 800d8a6:	468b      	mov	fp, r1
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	f7f2 feac 	bl	8000608 <__aeabi_dmul>
 800d8b0:	a33d      	add	r3, pc, #244	; (adr r3, 800d9a8 <__kernel_cos+0x150>)
 800d8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b6:	f7f2 fcf1 	bl	800029c <__adddf3>
 800d8ba:	4622      	mov	r2, r4
 800d8bc:	462b      	mov	r3, r5
 800d8be:	f7f2 fea3 	bl	8000608 <__aeabi_dmul>
 800d8c2:	a33b      	add	r3, pc, #236	; (adr r3, 800d9b0 <__kernel_cos+0x158>)
 800d8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c8:	f7f2 fce6 	bl	8000298 <__aeabi_dsub>
 800d8cc:	4622      	mov	r2, r4
 800d8ce:	462b      	mov	r3, r5
 800d8d0:	f7f2 fe9a 	bl	8000608 <__aeabi_dmul>
 800d8d4:	a338      	add	r3, pc, #224	; (adr r3, 800d9b8 <__kernel_cos+0x160>)
 800d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8da:	f7f2 fcdf 	bl	800029c <__adddf3>
 800d8de:	4622      	mov	r2, r4
 800d8e0:	462b      	mov	r3, r5
 800d8e2:	f7f2 fe91 	bl	8000608 <__aeabi_dmul>
 800d8e6:	a336      	add	r3, pc, #216	; (adr r3, 800d9c0 <__kernel_cos+0x168>)
 800d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ec:	f7f2 fcd4 	bl	8000298 <__aeabi_dsub>
 800d8f0:	4622      	mov	r2, r4
 800d8f2:	462b      	mov	r3, r5
 800d8f4:	f7f2 fe88 	bl	8000608 <__aeabi_dmul>
 800d8f8:	a333      	add	r3, pc, #204	; (adr r3, 800d9c8 <__kernel_cos+0x170>)
 800d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fe:	f7f2 fccd 	bl	800029c <__adddf3>
 800d902:	4622      	mov	r2, r4
 800d904:	462b      	mov	r3, r5
 800d906:	f7f2 fe7f 	bl	8000608 <__aeabi_dmul>
 800d90a:	4622      	mov	r2, r4
 800d90c:	462b      	mov	r3, r5
 800d90e:	f7f2 fe7b 	bl	8000608 <__aeabi_dmul>
 800d912:	ec53 2b18 	vmov	r2, r3, d8
 800d916:	4604      	mov	r4, r0
 800d918:	460d      	mov	r5, r1
 800d91a:	4640      	mov	r0, r8
 800d91c:	4649      	mov	r1, r9
 800d91e:	f7f2 fe73 	bl	8000608 <__aeabi_dmul>
 800d922:	460b      	mov	r3, r1
 800d924:	4602      	mov	r2, r0
 800d926:	4629      	mov	r1, r5
 800d928:	4620      	mov	r0, r4
 800d92a:	f7f2 fcb5 	bl	8000298 <__aeabi_dsub>
 800d92e:	4b29      	ldr	r3, [pc, #164]	; (800d9d4 <__kernel_cos+0x17c>)
 800d930:	429e      	cmp	r6, r3
 800d932:	4680      	mov	r8, r0
 800d934:	4689      	mov	r9, r1
 800d936:	dc11      	bgt.n	800d95c <__kernel_cos+0x104>
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	4650      	mov	r0, sl
 800d93e:	4659      	mov	r1, fp
 800d940:	f7f2 fcaa 	bl	8000298 <__aeabi_dsub>
 800d944:	460b      	mov	r3, r1
 800d946:	4924      	ldr	r1, [pc, #144]	; (800d9d8 <__kernel_cos+0x180>)
 800d948:	4602      	mov	r2, r0
 800d94a:	2000      	movs	r0, #0
 800d94c:	f7f2 fca4 	bl	8000298 <__aeabi_dsub>
 800d950:	ecbd 8b02 	vpop	{d8}
 800d954:	ec41 0b10 	vmov	d0, r0, r1
 800d958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d95c:	4b1f      	ldr	r3, [pc, #124]	; (800d9dc <__kernel_cos+0x184>)
 800d95e:	491e      	ldr	r1, [pc, #120]	; (800d9d8 <__kernel_cos+0x180>)
 800d960:	429e      	cmp	r6, r3
 800d962:	bfcc      	ite	gt
 800d964:	4d1e      	ldrgt	r5, [pc, #120]	; (800d9e0 <__kernel_cos+0x188>)
 800d966:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d96a:	2400      	movs	r4, #0
 800d96c:	4622      	mov	r2, r4
 800d96e:	462b      	mov	r3, r5
 800d970:	2000      	movs	r0, #0
 800d972:	f7f2 fc91 	bl	8000298 <__aeabi_dsub>
 800d976:	4622      	mov	r2, r4
 800d978:	4606      	mov	r6, r0
 800d97a:	460f      	mov	r7, r1
 800d97c:	462b      	mov	r3, r5
 800d97e:	4650      	mov	r0, sl
 800d980:	4659      	mov	r1, fp
 800d982:	f7f2 fc89 	bl	8000298 <__aeabi_dsub>
 800d986:	4642      	mov	r2, r8
 800d988:	464b      	mov	r3, r9
 800d98a:	f7f2 fc85 	bl	8000298 <__aeabi_dsub>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	4630      	mov	r0, r6
 800d994:	4639      	mov	r1, r7
 800d996:	e7d9      	b.n	800d94c <__kernel_cos+0xf4>
 800d998:	2000      	movs	r0, #0
 800d99a:	490f      	ldr	r1, [pc, #60]	; (800d9d8 <__kernel_cos+0x180>)
 800d99c:	e7d8      	b.n	800d950 <__kernel_cos+0xf8>
 800d99e:	bf00      	nop
 800d9a0:	be8838d4 	.word	0xbe8838d4
 800d9a4:	bda8fae9 	.word	0xbda8fae9
 800d9a8:	bdb4b1c4 	.word	0xbdb4b1c4
 800d9ac:	3e21ee9e 	.word	0x3e21ee9e
 800d9b0:	809c52ad 	.word	0x809c52ad
 800d9b4:	3e927e4f 	.word	0x3e927e4f
 800d9b8:	19cb1590 	.word	0x19cb1590
 800d9bc:	3efa01a0 	.word	0x3efa01a0
 800d9c0:	16c15177 	.word	0x16c15177
 800d9c4:	3f56c16c 	.word	0x3f56c16c
 800d9c8:	5555554c 	.word	0x5555554c
 800d9cc:	3fa55555 	.word	0x3fa55555
 800d9d0:	3fe00000 	.word	0x3fe00000
 800d9d4:	3fd33332 	.word	0x3fd33332
 800d9d8:	3ff00000 	.word	0x3ff00000
 800d9dc:	3fe90000 	.word	0x3fe90000
 800d9e0:	3fd20000 	.word	0x3fd20000
 800d9e4:	00000000 	.word	0x00000000

0800d9e8 <__kernel_rem_pio2>:
 800d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ec:	ed2d 8b02 	vpush	{d8}
 800d9f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d9f4:	1ed4      	subs	r4, r2, #3
 800d9f6:	9308      	str	r3, [sp, #32]
 800d9f8:	9101      	str	r1, [sp, #4]
 800d9fa:	4bc5      	ldr	r3, [pc, #788]	; (800dd10 <__kernel_rem_pio2+0x328>)
 800d9fc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d9fe:	9009      	str	r0, [sp, #36]	; 0x24
 800da00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da04:	9304      	str	r3, [sp, #16]
 800da06:	9b08      	ldr	r3, [sp, #32]
 800da08:	3b01      	subs	r3, #1
 800da0a:	9307      	str	r3, [sp, #28]
 800da0c:	2318      	movs	r3, #24
 800da0e:	fb94 f4f3 	sdiv	r4, r4, r3
 800da12:	f06f 0317 	mvn.w	r3, #23
 800da16:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800da1a:	fb04 3303 	mla	r3, r4, r3, r3
 800da1e:	eb03 0a02 	add.w	sl, r3, r2
 800da22:	9b04      	ldr	r3, [sp, #16]
 800da24:	9a07      	ldr	r2, [sp, #28]
 800da26:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800dd00 <__kernel_rem_pio2+0x318>
 800da2a:	eb03 0802 	add.w	r8, r3, r2
 800da2e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800da30:	1aa7      	subs	r7, r4, r2
 800da32:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800da36:	ae22      	add	r6, sp, #136	; 0x88
 800da38:	2500      	movs	r5, #0
 800da3a:	4545      	cmp	r5, r8
 800da3c:	dd13      	ble.n	800da66 <__kernel_rem_pio2+0x7e>
 800da3e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800dd00 <__kernel_rem_pio2+0x318>
 800da42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800da46:	2600      	movs	r6, #0
 800da48:	9b04      	ldr	r3, [sp, #16]
 800da4a:	429e      	cmp	r6, r3
 800da4c:	dc32      	bgt.n	800dab4 <__kernel_rem_pio2+0xcc>
 800da4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da50:	9302      	str	r3, [sp, #8]
 800da52:	9b08      	ldr	r3, [sp, #32]
 800da54:	199d      	adds	r5, r3, r6
 800da56:	ab22      	add	r3, sp, #136	; 0x88
 800da58:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800da5c:	9306      	str	r3, [sp, #24]
 800da5e:	ec59 8b18 	vmov	r8, r9, d8
 800da62:	2700      	movs	r7, #0
 800da64:	e01f      	b.n	800daa6 <__kernel_rem_pio2+0xbe>
 800da66:	42ef      	cmn	r7, r5
 800da68:	d407      	bmi.n	800da7a <__kernel_rem_pio2+0x92>
 800da6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800da6e:	f7f2 fd61 	bl	8000534 <__aeabi_i2d>
 800da72:	e8e6 0102 	strd	r0, r1, [r6], #8
 800da76:	3501      	adds	r5, #1
 800da78:	e7df      	b.n	800da3a <__kernel_rem_pio2+0x52>
 800da7a:	ec51 0b18 	vmov	r0, r1, d8
 800da7e:	e7f8      	b.n	800da72 <__kernel_rem_pio2+0x8a>
 800da80:	9906      	ldr	r1, [sp, #24]
 800da82:	9d02      	ldr	r5, [sp, #8]
 800da84:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800da88:	9106      	str	r1, [sp, #24]
 800da8a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800da8e:	9502      	str	r5, [sp, #8]
 800da90:	f7f2 fdba 	bl	8000608 <__aeabi_dmul>
 800da94:	4602      	mov	r2, r0
 800da96:	460b      	mov	r3, r1
 800da98:	4640      	mov	r0, r8
 800da9a:	4649      	mov	r1, r9
 800da9c:	f7f2 fbfe 	bl	800029c <__adddf3>
 800daa0:	3701      	adds	r7, #1
 800daa2:	4680      	mov	r8, r0
 800daa4:	4689      	mov	r9, r1
 800daa6:	9b07      	ldr	r3, [sp, #28]
 800daa8:	429f      	cmp	r7, r3
 800daaa:	dde9      	ble.n	800da80 <__kernel_rem_pio2+0x98>
 800daac:	e8eb 8902 	strd	r8, r9, [fp], #8
 800dab0:	3601      	adds	r6, #1
 800dab2:	e7c9      	b.n	800da48 <__kernel_rem_pio2+0x60>
 800dab4:	9b04      	ldr	r3, [sp, #16]
 800dab6:	aa0e      	add	r2, sp, #56	; 0x38
 800dab8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dabc:	930c      	str	r3, [sp, #48]	; 0x30
 800dabe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800dac0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dac4:	9c04      	ldr	r4, [sp, #16]
 800dac6:	930b      	str	r3, [sp, #44]	; 0x2c
 800dac8:	ab9a      	add	r3, sp, #616	; 0x268
 800daca:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800dace:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dad2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dad6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800dada:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800dade:	ab9a      	add	r3, sp, #616	; 0x268
 800dae0:	445b      	add	r3, fp
 800dae2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800dae6:	2500      	movs	r5, #0
 800dae8:	1b63      	subs	r3, r4, r5
 800daea:	2b00      	cmp	r3, #0
 800daec:	dc78      	bgt.n	800dbe0 <__kernel_rem_pio2+0x1f8>
 800daee:	4650      	mov	r0, sl
 800daf0:	ec49 8b10 	vmov	d0, r8, r9
 800daf4:	f000 fc00 	bl	800e2f8 <scalbn>
 800daf8:	ec57 6b10 	vmov	r6, r7, d0
 800dafc:	2200      	movs	r2, #0
 800dafe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800db02:	ee10 0a10 	vmov	r0, s0
 800db06:	4639      	mov	r1, r7
 800db08:	f7f2 fd7e 	bl	8000608 <__aeabi_dmul>
 800db0c:	ec41 0b10 	vmov	d0, r0, r1
 800db10:	f000 fb6e 	bl	800e1f0 <floor>
 800db14:	2200      	movs	r2, #0
 800db16:	ec51 0b10 	vmov	r0, r1, d0
 800db1a:	4b7e      	ldr	r3, [pc, #504]	; (800dd14 <__kernel_rem_pio2+0x32c>)
 800db1c:	f7f2 fd74 	bl	8000608 <__aeabi_dmul>
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	4630      	mov	r0, r6
 800db26:	4639      	mov	r1, r7
 800db28:	f7f2 fbb6 	bl	8000298 <__aeabi_dsub>
 800db2c:	460f      	mov	r7, r1
 800db2e:	4606      	mov	r6, r0
 800db30:	f7f3 f804 	bl	8000b3c <__aeabi_d2iz>
 800db34:	9006      	str	r0, [sp, #24]
 800db36:	f7f2 fcfd 	bl	8000534 <__aeabi_i2d>
 800db3a:	4602      	mov	r2, r0
 800db3c:	460b      	mov	r3, r1
 800db3e:	4630      	mov	r0, r6
 800db40:	4639      	mov	r1, r7
 800db42:	f7f2 fba9 	bl	8000298 <__aeabi_dsub>
 800db46:	f1ba 0f00 	cmp.w	sl, #0
 800db4a:	4606      	mov	r6, r0
 800db4c:	460f      	mov	r7, r1
 800db4e:	dd6c      	ble.n	800dc2a <__kernel_rem_pio2+0x242>
 800db50:	1e62      	subs	r2, r4, #1
 800db52:	ab0e      	add	r3, sp, #56	; 0x38
 800db54:	f1ca 0118 	rsb	r1, sl, #24
 800db58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800db5c:	9d06      	ldr	r5, [sp, #24]
 800db5e:	fa40 f301 	asr.w	r3, r0, r1
 800db62:	441d      	add	r5, r3
 800db64:	408b      	lsls	r3, r1
 800db66:	1ac0      	subs	r0, r0, r3
 800db68:	ab0e      	add	r3, sp, #56	; 0x38
 800db6a:	9506      	str	r5, [sp, #24]
 800db6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800db70:	f1ca 0317 	rsb	r3, sl, #23
 800db74:	fa40 f303 	asr.w	r3, r0, r3
 800db78:	9302      	str	r3, [sp, #8]
 800db7a:	9b02      	ldr	r3, [sp, #8]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	dd62      	ble.n	800dc46 <__kernel_rem_pio2+0x25e>
 800db80:	9b06      	ldr	r3, [sp, #24]
 800db82:	2200      	movs	r2, #0
 800db84:	3301      	adds	r3, #1
 800db86:	9306      	str	r3, [sp, #24]
 800db88:	4615      	mov	r5, r2
 800db8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800db8e:	4294      	cmp	r4, r2
 800db90:	f300 8095 	bgt.w	800dcbe <__kernel_rem_pio2+0x2d6>
 800db94:	f1ba 0f00 	cmp.w	sl, #0
 800db98:	dd07      	ble.n	800dbaa <__kernel_rem_pio2+0x1c2>
 800db9a:	f1ba 0f01 	cmp.w	sl, #1
 800db9e:	f000 80a2 	beq.w	800dce6 <__kernel_rem_pio2+0x2fe>
 800dba2:	f1ba 0f02 	cmp.w	sl, #2
 800dba6:	f000 80c1 	beq.w	800dd2c <__kernel_rem_pio2+0x344>
 800dbaa:	9b02      	ldr	r3, [sp, #8]
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d14a      	bne.n	800dc46 <__kernel_rem_pio2+0x25e>
 800dbb0:	4632      	mov	r2, r6
 800dbb2:	463b      	mov	r3, r7
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	4958      	ldr	r1, [pc, #352]	; (800dd18 <__kernel_rem_pio2+0x330>)
 800dbb8:	f7f2 fb6e 	bl	8000298 <__aeabi_dsub>
 800dbbc:	4606      	mov	r6, r0
 800dbbe:	460f      	mov	r7, r1
 800dbc0:	2d00      	cmp	r5, #0
 800dbc2:	d040      	beq.n	800dc46 <__kernel_rem_pio2+0x25e>
 800dbc4:	4650      	mov	r0, sl
 800dbc6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800dd08 <__kernel_rem_pio2+0x320>
 800dbca:	f000 fb95 	bl	800e2f8 <scalbn>
 800dbce:	4630      	mov	r0, r6
 800dbd0:	4639      	mov	r1, r7
 800dbd2:	ec53 2b10 	vmov	r2, r3, d0
 800dbd6:	f7f2 fb5f 	bl	8000298 <__aeabi_dsub>
 800dbda:	4606      	mov	r6, r0
 800dbdc:	460f      	mov	r7, r1
 800dbde:	e032      	b.n	800dc46 <__kernel_rem_pio2+0x25e>
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	4b4e      	ldr	r3, [pc, #312]	; (800dd1c <__kernel_rem_pio2+0x334>)
 800dbe4:	4640      	mov	r0, r8
 800dbe6:	4649      	mov	r1, r9
 800dbe8:	f7f2 fd0e 	bl	8000608 <__aeabi_dmul>
 800dbec:	f7f2 ffa6 	bl	8000b3c <__aeabi_d2iz>
 800dbf0:	f7f2 fca0 	bl	8000534 <__aeabi_i2d>
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	4b4a      	ldr	r3, [pc, #296]	; (800dd20 <__kernel_rem_pio2+0x338>)
 800dbf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbfc:	f7f2 fd04 	bl	8000608 <__aeabi_dmul>
 800dc00:	4602      	mov	r2, r0
 800dc02:	460b      	mov	r3, r1
 800dc04:	4640      	mov	r0, r8
 800dc06:	4649      	mov	r1, r9
 800dc08:	f7f2 fb46 	bl	8000298 <__aeabi_dsub>
 800dc0c:	f7f2 ff96 	bl	8000b3c <__aeabi_d2iz>
 800dc10:	ab0e      	add	r3, sp, #56	; 0x38
 800dc12:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800dc16:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800dc1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc1e:	f7f2 fb3d 	bl	800029c <__adddf3>
 800dc22:	3501      	adds	r5, #1
 800dc24:	4680      	mov	r8, r0
 800dc26:	4689      	mov	r9, r1
 800dc28:	e75e      	b.n	800dae8 <__kernel_rem_pio2+0x100>
 800dc2a:	d105      	bne.n	800dc38 <__kernel_rem_pio2+0x250>
 800dc2c:	1e63      	subs	r3, r4, #1
 800dc2e:	aa0e      	add	r2, sp, #56	; 0x38
 800dc30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dc34:	15c3      	asrs	r3, r0, #23
 800dc36:	e79f      	b.n	800db78 <__kernel_rem_pio2+0x190>
 800dc38:	2200      	movs	r2, #0
 800dc3a:	4b3a      	ldr	r3, [pc, #232]	; (800dd24 <__kernel_rem_pio2+0x33c>)
 800dc3c:	f7f2 ff6a 	bl	8000b14 <__aeabi_dcmpge>
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d139      	bne.n	800dcb8 <__kernel_rem_pio2+0x2d0>
 800dc44:	9002      	str	r0, [sp, #8]
 800dc46:	2200      	movs	r2, #0
 800dc48:	2300      	movs	r3, #0
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	4639      	mov	r1, r7
 800dc4e:	f7f2 ff43 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc52:	2800      	cmp	r0, #0
 800dc54:	f000 80c7 	beq.w	800dde6 <__kernel_rem_pio2+0x3fe>
 800dc58:	1e65      	subs	r5, r4, #1
 800dc5a:	462b      	mov	r3, r5
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	9904      	ldr	r1, [sp, #16]
 800dc60:	428b      	cmp	r3, r1
 800dc62:	da6a      	bge.n	800dd3a <__kernel_rem_pio2+0x352>
 800dc64:	2a00      	cmp	r2, #0
 800dc66:	f000 8088 	beq.w	800dd7a <__kernel_rem_pio2+0x392>
 800dc6a:	ab0e      	add	r3, sp, #56	; 0x38
 800dc6c:	f1aa 0a18 	sub.w	sl, sl, #24
 800dc70:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	f000 80b4 	beq.w	800dde2 <__kernel_rem_pio2+0x3fa>
 800dc7a:	4650      	mov	r0, sl
 800dc7c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800dd08 <__kernel_rem_pio2+0x320>
 800dc80:	f000 fb3a 	bl	800e2f8 <scalbn>
 800dc84:	00ec      	lsls	r4, r5, #3
 800dc86:	ab72      	add	r3, sp, #456	; 0x1c8
 800dc88:	191e      	adds	r6, r3, r4
 800dc8a:	ec59 8b10 	vmov	r8, r9, d0
 800dc8e:	f106 0a08 	add.w	sl, r6, #8
 800dc92:	462f      	mov	r7, r5
 800dc94:	2f00      	cmp	r7, #0
 800dc96:	f280 80df 	bge.w	800de58 <__kernel_rem_pio2+0x470>
 800dc9a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800dd00 <__kernel_rem_pio2+0x318>
 800dc9e:	f04f 0a00 	mov.w	sl, #0
 800dca2:	eba5 030a 	sub.w	r3, r5, sl
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f2c0 810a 	blt.w	800dec0 <__kernel_rem_pio2+0x4d8>
 800dcac:	f8df b078 	ldr.w	fp, [pc, #120]	; 800dd28 <__kernel_rem_pio2+0x340>
 800dcb0:	ec59 8b18 	vmov	r8, r9, d8
 800dcb4:	2700      	movs	r7, #0
 800dcb6:	e0f5      	b.n	800dea4 <__kernel_rem_pio2+0x4bc>
 800dcb8:	2302      	movs	r3, #2
 800dcba:	9302      	str	r3, [sp, #8]
 800dcbc:	e760      	b.n	800db80 <__kernel_rem_pio2+0x198>
 800dcbe:	ab0e      	add	r3, sp, #56	; 0x38
 800dcc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcc4:	b94d      	cbnz	r5, 800dcda <__kernel_rem_pio2+0x2f2>
 800dcc6:	b12b      	cbz	r3, 800dcd4 <__kernel_rem_pio2+0x2ec>
 800dcc8:	a80e      	add	r0, sp, #56	; 0x38
 800dcca:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800dcce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	3201      	adds	r2, #1
 800dcd6:	461d      	mov	r5, r3
 800dcd8:	e759      	b.n	800db8e <__kernel_rem_pio2+0x1a6>
 800dcda:	a80e      	add	r0, sp, #56	; 0x38
 800dcdc:	1acb      	subs	r3, r1, r3
 800dcde:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800dce2:	462b      	mov	r3, r5
 800dce4:	e7f6      	b.n	800dcd4 <__kernel_rem_pio2+0x2ec>
 800dce6:	1e62      	subs	r2, r4, #1
 800dce8:	ab0e      	add	r3, sp, #56	; 0x38
 800dcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dcf2:	a90e      	add	r1, sp, #56	; 0x38
 800dcf4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dcf8:	e757      	b.n	800dbaa <__kernel_rem_pio2+0x1c2>
 800dcfa:	bf00      	nop
 800dcfc:	f3af 8000 	nop.w
	...
 800dd0c:	3ff00000 	.word	0x3ff00000
 800dd10:	0800e7a8 	.word	0x0800e7a8
 800dd14:	40200000 	.word	0x40200000
 800dd18:	3ff00000 	.word	0x3ff00000
 800dd1c:	3e700000 	.word	0x3e700000
 800dd20:	41700000 	.word	0x41700000
 800dd24:	3fe00000 	.word	0x3fe00000
 800dd28:	0800e768 	.word	0x0800e768
 800dd2c:	1e62      	subs	r2, r4, #1
 800dd2e:	ab0e      	add	r3, sp, #56	; 0x38
 800dd30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd34:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dd38:	e7db      	b.n	800dcf2 <__kernel_rem_pio2+0x30a>
 800dd3a:	a90e      	add	r1, sp, #56	; 0x38
 800dd3c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dd40:	3b01      	subs	r3, #1
 800dd42:	430a      	orrs	r2, r1
 800dd44:	e78b      	b.n	800dc5e <__kernel_rem_pio2+0x276>
 800dd46:	3301      	adds	r3, #1
 800dd48:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800dd4c:	2900      	cmp	r1, #0
 800dd4e:	d0fa      	beq.n	800dd46 <__kernel_rem_pio2+0x35e>
 800dd50:	9a08      	ldr	r2, [sp, #32]
 800dd52:	4422      	add	r2, r4
 800dd54:	00d2      	lsls	r2, r2, #3
 800dd56:	a922      	add	r1, sp, #136	; 0x88
 800dd58:	18e3      	adds	r3, r4, r3
 800dd5a:	9206      	str	r2, [sp, #24]
 800dd5c:	440a      	add	r2, r1
 800dd5e:	9302      	str	r3, [sp, #8]
 800dd60:	f10b 0108 	add.w	r1, fp, #8
 800dd64:	f102 0308 	add.w	r3, r2, #8
 800dd68:	1c66      	adds	r6, r4, #1
 800dd6a:	910a      	str	r1, [sp, #40]	; 0x28
 800dd6c:	2500      	movs	r5, #0
 800dd6e:	930d      	str	r3, [sp, #52]	; 0x34
 800dd70:	9b02      	ldr	r3, [sp, #8]
 800dd72:	42b3      	cmp	r3, r6
 800dd74:	da04      	bge.n	800dd80 <__kernel_rem_pio2+0x398>
 800dd76:	461c      	mov	r4, r3
 800dd78:	e6a6      	b.n	800dac8 <__kernel_rem_pio2+0xe0>
 800dd7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e7e3      	b.n	800dd48 <__kernel_rem_pio2+0x360>
 800dd80:	9b06      	ldr	r3, [sp, #24]
 800dd82:	18ef      	adds	r7, r5, r3
 800dd84:	ab22      	add	r3, sp, #136	; 0x88
 800dd86:	441f      	add	r7, r3
 800dd88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd8a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dd8e:	f7f2 fbd1 	bl	8000534 <__aeabi_i2d>
 800dd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd94:	461c      	mov	r4, r3
 800dd96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd98:	e9c7 0100 	strd	r0, r1, [r7]
 800dd9c:	eb03 0b05 	add.w	fp, r3, r5
 800dda0:	2700      	movs	r7, #0
 800dda2:	f04f 0800 	mov.w	r8, #0
 800dda6:	f04f 0900 	mov.w	r9, #0
 800ddaa:	9b07      	ldr	r3, [sp, #28]
 800ddac:	429f      	cmp	r7, r3
 800ddae:	dd08      	ble.n	800ddc2 <__kernel_rem_pio2+0x3da>
 800ddb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb2:	aa72      	add	r2, sp, #456	; 0x1c8
 800ddb4:	18eb      	adds	r3, r5, r3
 800ddb6:	4413      	add	r3, r2
 800ddb8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800ddbc:	3601      	adds	r6, #1
 800ddbe:	3508      	adds	r5, #8
 800ddc0:	e7d6      	b.n	800dd70 <__kernel_rem_pio2+0x388>
 800ddc2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ddc6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ddca:	f7f2 fc1d 	bl	8000608 <__aeabi_dmul>
 800ddce:	4602      	mov	r2, r0
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	4640      	mov	r0, r8
 800ddd4:	4649      	mov	r1, r9
 800ddd6:	f7f2 fa61 	bl	800029c <__adddf3>
 800ddda:	3701      	adds	r7, #1
 800dddc:	4680      	mov	r8, r0
 800ddde:	4689      	mov	r9, r1
 800dde0:	e7e3      	b.n	800ddaa <__kernel_rem_pio2+0x3c2>
 800dde2:	3d01      	subs	r5, #1
 800dde4:	e741      	b.n	800dc6a <__kernel_rem_pio2+0x282>
 800dde6:	f1ca 0000 	rsb	r0, sl, #0
 800ddea:	ec47 6b10 	vmov	d0, r6, r7
 800ddee:	f000 fa83 	bl	800e2f8 <scalbn>
 800ddf2:	ec57 6b10 	vmov	r6, r7, d0
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	4b99      	ldr	r3, [pc, #612]	; (800e060 <__kernel_rem_pio2+0x678>)
 800ddfa:	ee10 0a10 	vmov	r0, s0
 800ddfe:	4639      	mov	r1, r7
 800de00:	f7f2 fe88 	bl	8000b14 <__aeabi_dcmpge>
 800de04:	b1f8      	cbz	r0, 800de46 <__kernel_rem_pio2+0x45e>
 800de06:	2200      	movs	r2, #0
 800de08:	4b96      	ldr	r3, [pc, #600]	; (800e064 <__kernel_rem_pio2+0x67c>)
 800de0a:	4630      	mov	r0, r6
 800de0c:	4639      	mov	r1, r7
 800de0e:	f7f2 fbfb 	bl	8000608 <__aeabi_dmul>
 800de12:	f7f2 fe93 	bl	8000b3c <__aeabi_d2iz>
 800de16:	4680      	mov	r8, r0
 800de18:	f7f2 fb8c 	bl	8000534 <__aeabi_i2d>
 800de1c:	2200      	movs	r2, #0
 800de1e:	4b90      	ldr	r3, [pc, #576]	; (800e060 <__kernel_rem_pio2+0x678>)
 800de20:	f7f2 fbf2 	bl	8000608 <__aeabi_dmul>
 800de24:	460b      	mov	r3, r1
 800de26:	4602      	mov	r2, r0
 800de28:	4639      	mov	r1, r7
 800de2a:	4630      	mov	r0, r6
 800de2c:	f7f2 fa34 	bl	8000298 <__aeabi_dsub>
 800de30:	f7f2 fe84 	bl	8000b3c <__aeabi_d2iz>
 800de34:	1c65      	adds	r5, r4, #1
 800de36:	ab0e      	add	r3, sp, #56	; 0x38
 800de38:	f10a 0a18 	add.w	sl, sl, #24
 800de3c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800de40:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800de44:	e719      	b.n	800dc7a <__kernel_rem_pio2+0x292>
 800de46:	4630      	mov	r0, r6
 800de48:	4639      	mov	r1, r7
 800de4a:	f7f2 fe77 	bl	8000b3c <__aeabi_d2iz>
 800de4e:	ab0e      	add	r3, sp, #56	; 0x38
 800de50:	4625      	mov	r5, r4
 800de52:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800de56:	e710      	b.n	800dc7a <__kernel_rem_pio2+0x292>
 800de58:	ab0e      	add	r3, sp, #56	; 0x38
 800de5a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800de5e:	f7f2 fb69 	bl	8000534 <__aeabi_i2d>
 800de62:	4642      	mov	r2, r8
 800de64:	464b      	mov	r3, r9
 800de66:	f7f2 fbcf 	bl	8000608 <__aeabi_dmul>
 800de6a:	2200      	movs	r2, #0
 800de6c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800de70:	4b7c      	ldr	r3, [pc, #496]	; (800e064 <__kernel_rem_pio2+0x67c>)
 800de72:	4640      	mov	r0, r8
 800de74:	4649      	mov	r1, r9
 800de76:	f7f2 fbc7 	bl	8000608 <__aeabi_dmul>
 800de7a:	3f01      	subs	r7, #1
 800de7c:	4680      	mov	r8, r0
 800de7e:	4689      	mov	r9, r1
 800de80:	e708      	b.n	800dc94 <__kernel_rem_pio2+0x2ac>
 800de82:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800de86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800de8e:	f7f2 fbbb 	bl	8000608 <__aeabi_dmul>
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	4640      	mov	r0, r8
 800de98:	4649      	mov	r1, r9
 800de9a:	f7f2 f9ff 	bl	800029c <__adddf3>
 800de9e:	3701      	adds	r7, #1
 800dea0:	4680      	mov	r8, r0
 800dea2:	4689      	mov	r9, r1
 800dea4:	9b04      	ldr	r3, [sp, #16]
 800dea6:	429f      	cmp	r7, r3
 800dea8:	dc01      	bgt.n	800deae <__kernel_rem_pio2+0x4c6>
 800deaa:	45ba      	cmp	sl, r7
 800deac:	dae9      	bge.n	800de82 <__kernel_rem_pio2+0x49a>
 800deae:	ab4a      	add	r3, sp, #296	; 0x128
 800deb0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800deb4:	e9c3 8900 	strd	r8, r9, [r3]
 800deb8:	f10a 0a01 	add.w	sl, sl, #1
 800debc:	3e08      	subs	r6, #8
 800debe:	e6f0      	b.n	800dca2 <__kernel_rem_pio2+0x2ba>
 800dec0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dec2:	2b03      	cmp	r3, #3
 800dec4:	d85b      	bhi.n	800df7e <__kernel_rem_pio2+0x596>
 800dec6:	e8df f003 	tbb	[pc, r3]
 800deca:	264a      	.short	0x264a
 800decc:	0226      	.short	0x0226
 800dece:	ab9a      	add	r3, sp, #616	; 0x268
 800ded0:	441c      	add	r4, r3
 800ded2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ded6:	46a2      	mov	sl, r4
 800ded8:	46ab      	mov	fp, r5
 800deda:	f1bb 0f00 	cmp.w	fp, #0
 800dede:	dc6c      	bgt.n	800dfba <__kernel_rem_pio2+0x5d2>
 800dee0:	46a2      	mov	sl, r4
 800dee2:	46ab      	mov	fp, r5
 800dee4:	f1bb 0f01 	cmp.w	fp, #1
 800dee8:	f300 8086 	bgt.w	800dff8 <__kernel_rem_pio2+0x610>
 800deec:	2000      	movs	r0, #0
 800deee:	2100      	movs	r1, #0
 800def0:	2d01      	cmp	r5, #1
 800def2:	f300 80a0 	bgt.w	800e036 <__kernel_rem_pio2+0x64e>
 800def6:	9b02      	ldr	r3, [sp, #8]
 800def8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800defc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800df00:	2b00      	cmp	r3, #0
 800df02:	f040 809e 	bne.w	800e042 <__kernel_rem_pio2+0x65a>
 800df06:	9b01      	ldr	r3, [sp, #4]
 800df08:	e9c3 7800 	strd	r7, r8, [r3]
 800df0c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800df10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800df14:	e033      	b.n	800df7e <__kernel_rem_pio2+0x596>
 800df16:	3408      	adds	r4, #8
 800df18:	ab4a      	add	r3, sp, #296	; 0x128
 800df1a:	441c      	add	r4, r3
 800df1c:	462e      	mov	r6, r5
 800df1e:	2000      	movs	r0, #0
 800df20:	2100      	movs	r1, #0
 800df22:	2e00      	cmp	r6, #0
 800df24:	da3a      	bge.n	800df9c <__kernel_rem_pio2+0x5b4>
 800df26:	9b02      	ldr	r3, [sp, #8]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d03d      	beq.n	800dfa8 <__kernel_rem_pio2+0x5c0>
 800df2c:	4602      	mov	r2, r0
 800df2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df32:	9c01      	ldr	r4, [sp, #4]
 800df34:	e9c4 2300 	strd	r2, r3, [r4]
 800df38:	4602      	mov	r2, r0
 800df3a:	460b      	mov	r3, r1
 800df3c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800df40:	f7f2 f9aa 	bl	8000298 <__aeabi_dsub>
 800df44:	ae4c      	add	r6, sp, #304	; 0x130
 800df46:	2401      	movs	r4, #1
 800df48:	42a5      	cmp	r5, r4
 800df4a:	da30      	bge.n	800dfae <__kernel_rem_pio2+0x5c6>
 800df4c:	9b02      	ldr	r3, [sp, #8]
 800df4e:	b113      	cbz	r3, 800df56 <__kernel_rem_pio2+0x56e>
 800df50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df54:	4619      	mov	r1, r3
 800df56:	9b01      	ldr	r3, [sp, #4]
 800df58:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800df5c:	e00f      	b.n	800df7e <__kernel_rem_pio2+0x596>
 800df5e:	ab9a      	add	r3, sp, #616	; 0x268
 800df60:	441c      	add	r4, r3
 800df62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800df66:	2000      	movs	r0, #0
 800df68:	2100      	movs	r1, #0
 800df6a:	2d00      	cmp	r5, #0
 800df6c:	da10      	bge.n	800df90 <__kernel_rem_pio2+0x5a8>
 800df6e:	9b02      	ldr	r3, [sp, #8]
 800df70:	b113      	cbz	r3, 800df78 <__kernel_rem_pio2+0x590>
 800df72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df76:	4619      	mov	r1, r3
 800df78:	9b01      	ldr	r3, [sp, #4]
 800df7a:	e9c3 0100 	strd	r0, r1, [r3]
 800df7e:	9b06      	ldr	r3, [sp, #24]
 800df80:	f003 0007 	and.w	r0, r3, #7
 800df84:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800df88:	ecbd 8b02 	vpop	{d8}
 800df8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df90:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800df94:	f7f2 f982 	bl	800029c <__adddf3>
 800df98:	3d01      	subs	r5, #1
 800df9a:	e7e6      	b.n	800df6a <__kernel_rem_pio2+0x582>
 800df9c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dfa0:	f7f2 f97c 	bl	800029c <__adddf3>
 800dfa4:	3e01      	subs	r6, #1
 800dfa6:	e7bc      	b.n	800df22 <__kernel_rem_pio2+0x53a>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	e7c1      	b.n	800df32 <__kernel_rem_pio2+0x54a>
 800dfae:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800dfb2:	f7f2 f973 	bl	800029c <__adddf3>
 800dfb6:	3401      	adds	r4, #1
 800dfb8:	e7c6      	b.n	800df48 <__kernel_rem_pio2+0x560>
 800dfba:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800dfbe:	ed3a 7b02 	vldmdb	sl!, {d7}
 800dfc2:	4640      	mov	r0, r8
 800dfc4:	ec53 2b17 	vmov	r2, r3, d7
 800dfc8:	4649      	mov	r1, r9
 800dfca:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dfce:	f7f2 f965 	bl	800029c <__adddf3>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	460f      	mov	r7, r1
 800dfda:	4640      	mov	r0, r8
 800dfdc:	4649      	mov	r1, r9
 800dfde:	f7f2 f95b 	bl	8000298 <__aeabi_dsub>
 800dfe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfe6:	f7f2 f959 	bl	800029c <__adddf3>
 800dfea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dfee:	e9ca 0100 	strd	r0, r1, [sl]
 800dff2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800dff6:	e770      	b.n	800deda <__kernel_rem_pio2+0x4f2>
 800dff8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800dffc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e000:	4630      	mov	r0, r6
 800e002:	ec53 2b17 	vmov	r2, r3, d7
 800e006:	4639      	mov	r1, r7
 800e008:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e00c:	f7f2 f946 	bl	800029c <__adddf3>
 800e010:	4602      	mov	r2, r0
 800e012:	460b      	mov	r3, r1
 800e014:	4680      	mov	r8, r0
 800e016:	4689      	mov	r9, r1
 800e018:	4630      	mov	r0, r6
 800e01a:	4639      	mov	r1, r7
 800e01c:	f7f2 f93c 	bl	8000298 <__aeabi_dsub>
 800e020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e024:	f7f2 f93a 	bl	800029c <__adddf3>
 800e028:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e02c:	e9ca 0100 	strd	r0, r1, [sl]
 800e030:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800e034:	e756      	b.n	800dee4 <__kernel_rem_pio2+0x4fc>
 800e036:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e03a:	f7f2 f92f 	bl	800029c <__adddf3>
 800e03e:	3d01      	subs	r5, #1
 800e040:	e756      	b.n	800def0 <__kernel_rem_pio2+0x508>
 800e042:	9b01      	ldr	r3, [sp, #4]
 800e044:	9a01      	ldr	r2, [sp, #4]
 800e046:	601f      	str	r7, [r3, #0]
 800e048:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e04c:	605c      	str	r4, [r3, #4]
 800e04e:	609d      	str	r5, [r3, #8]
 800e050:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e054:	60d3      	str	r3, [r2, #12]
 800e056:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e05a:	6110      	str	r0, [r2, #16]
 800e05c:	6153      	str	r3, [r2, #20]
 800e05e:	e78e      	b.n	800df7e <__kernel_rem_pio2+0x596>
 800e060:	41700000 	.word	0x41700000
 800e064:	3e700000 	.word	0x3e700000

0800e068 <__kernel_sin>:
 800e068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e06c:	ec55 4b10 	vmov	r4, r5, d0
 800e070:	b085      	sub	sp, #20
 800e072:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e076:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e07a:	ed8d 1b00 	vstr	d1, [sp]
 800e07e:	9002      	str	r0, [sp, #8]
 800e080:	da06      	bge.n	800e090 <__kernel_sin+0x28>
 800e082:	ee10 0a10 	vmov	r0, s0
 800e086:	4629      	mov	r1, r5
 800e088:	f7f2 fd58 	bl	8000b3c <__aeabi_d2iz>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	d051      	beq.n	800e134 <__kernel_sin+0xcc>
 800e090:	4622      	mov	r2, r4
 800e092:	462b      	mov	r3, r5
 800e094:	4620      	mov	r0, r4
 800e096:	4629      	mov	r1, r5
 800e098:	f7f2 fab6 	bl	8000608 <__aeabi_dmul>
 800e09c:	4682      	mov	sl, r0
 800e09e:	468b      	mov	fp, r1
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	4629      	mov	r1, r5
 800e0a8:	f7f2 faae 	bl	8000608 <__aeabi_dmul>
 800e0ac:	a341      	add	r3, pc, #260	; (adr r3, 800e1b4 <__kernel_sin+0x14c>)
 800e0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b2:	4680      	mov	r8, r0
 800e0b4:	4689      	mov	r9, r1
 800e0b6:	4650      	mov	r0, sl
 800e0b8:	4659      	mov	r1, fp
 800e0ba:	f7f2 faa5 	bl	8000608 <__aeabi_dmul>
 800e0be:	a33f      	add	r3, pc, #252	; (adr r3, 800e1bc <__kernel_sin+0x154>)
 800e0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c4:	f7f2 f8e8 	bl	8000298 <__aeabi_dsub>
 800e0c8:	4652      	mov	r2, sl
 800e0ca:	465b      	mov	r3, fp
 800e0cc:	f7f2 fa9c 	bl	8000608 <__aeabi_dmul>
 800e0d0:	a33c      	add	r3, pc, #240	; (adr r3, 800e1c4 <__kernel_sin+0x15c>)
 800e0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d6:	f7f2 f8e1 	bl	800029c <__adddf3>
 800e0da:	4652      	mov	r2, sl
 800e0dc:	465b      	mov	r3, fp
 800e0de:	f7f2 fa93 	bl	8000608 <__aeabi_dmul>
 800e0e2:	a33a      	add	r3, pc, #232	; (adr r3, 800e1cc <__kernel_sin+0x164>)
 800e0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e8:	f7f2 f8d6 	bl	8000298 <__aeabi_dsub>
 800e0ec:	4652      	mov	r2, sl
 800e0ee:	465b      	mov	r3, fp
 800e0f0:	f7f2 fa8a 	bl	8000608 <__aeabi_dmul>
 800e0f4:	a337      	add	r3, pc, #220	; (adr r3, 800e1d4 <__kernel_sin+0x16c>)
 800e0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fa:	f7f2 f8cf 	bl	800029c <__adddf3>
 800e0fe:	9b02      	ldr	r3, [sp, #8]
 800e100:	4606      	mov	r6, r0
 800e102:	460f      	mov	r7, r1
 800e104:	b9db      	cbnz	r3, 800e13e <__kernel_sin+0xd6>
 800e106:	4602      	mov	r2, r0
 800e108:	460b      	mov	r3, r1
 800e10a:	4650      	mov	r0, sl
 800e10c:	4659      	mov	r1, fp
 800e10e:	f7f2 fa7b 	bl	8000608 <__aeabi_dmul>
 800e112:	a325      	add	r3, pc, #148	; (adr r3, 800e1a8 <__kernel_sin+0x140>)
 800e114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e118:	f7f2 f8be 	bl	8000298 <__aeabi_dsub>
 800e11c:	4642      	mov	r2, r8
 800e11e:	464b      	mov	r3, r9
 800e120:	f7f2 fa72 	bl	8000608 <__aeabi_dmul>
 800e124:	4602      	mov	r2, r0
 800e126:	460b      	mov	r3, r1
 800e128:	4620      	mov	r0, r4
 800e12a:	4629      	mov	r1, r5
 800e12c:	f7f2 f8b6 	bl	800029c <__adddf3>
 800e130:	4604      	mov	r4, r0
 800e132:	460d      	mov	r5, r1
 800e134:	ec45 4b10 	vmov	d0, r4, r5
 800e138:	b005      	add	sp, #20
 800e13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e13e:	2200      	movs	r2, #0
 800e140:	4b1b      	ldr	r3, [pc, #108]	; (800e1b0 <__kernel_sin+0x148>)
 800e142:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e146:	f7f2 fa5f 	bl	8000608 <__aeabi_dmul>
 800e14a:	4632      	mov	r2, r6
 800e14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e150:	463b      	mov	r3, r7
 800e152:	4640      	mov	r0, r8
 800e154:	4649      	mov	r1, r9
 800e156:	f7f2 fa57 	bl	8000608 <__aeabi_dmul>
 800e15a:	4602      	mov	r2, r0
 800e15c:	460b      	mov	r3, r1
 800e15e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e162:	f7f2 f899 	bl	8000298 <__aeabi_dsub>
 800e166:	4652      	mov	r2, sl
 800e168:	465b      	mov	r3, fp
 800e16a:	f7f2 fa4d 	bl	8000608 <__aeabi_dmul>
 800e16e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e172:	f7f2 f891 	bl	8000298 <__aeabi_dsub>
 800e176:	a30c      	add	r3, pc, #48	; (adr r3, 800e1a8 <__kernel_sin+0x140>)
 800e178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17c:	4606      	mov	r6, r0
 800e17e:	460f      	mov	r7, r1
 800e180:	4640      	mov	r0, r8
 800e182:	4649      	mov	r1, r9
 800e184:	f7f2 fa40 	bl	8000608 <__aeabi_dmul>
 800e188:	4602      	mov	r2, r0
 800e18a:	460b      	mov	r3, r1
 800e18c:	4630      	mov	r0, r6
 800e18e:	4639      	mov	r1, r7
 800e190:	f7f2 f884 	bl	800029c <__adddf3>
 800e194:	4602      	mov	r2, r0
 800e196:	460b      	mov	r3, r1
 800e198:	4620      	mov	r0, r4
 800e19a:	4629      	mov	r1, r5
 800e19c:	f7f2 f87c 	bl	8000298 <__aeabi_dsub>
 800e1a0:	e7c6      	b.n	800e130 <__kernel_sin+0xc8>
 800e1a2:	bf00      	nop
 800e1a4:	f3af 8000 	nop.w
 800e1a8:	55555549 	.word	0x55555549
 800e1ac:	3fc55555 	.word	0x3fc55555
 800e1b0:	3fe00000 	.word	0x3fe00000
 800e1b4:	5acfd57c 	.word	0x5acfd57c
 800e1b8:	3de5d93a 	.word	0x3de5d93a
 800e1bc:	8a2b9ceb 	.word	0x8a2b9ceb
 800e1c0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e1c4:	57b1fe7d 	.word	0x57b1fe7d
 800e1c8:	3ec71de3 	.word	0x3ec71de3
 800e1cc:	19c161d5 	.word	0x19c161d5
 800e1d0:	3f2a01a0 	.word	0x3f2a01a0
 800e1d4:	1110f8a6 	.word	0x1110f8a6
 800e1d8:	3f811111 	.word	0x3f811111

0800e1dc <fabs>:
 800e1dc:	ec51 0b10 	vmov	r0, r1, d0
 800e1e0:	ee10 2a10 	vmov	r2, s0
 800e1e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e1e8:	ec43 2b10 	vmov	d0, r2, r3
 800e1ec:	4770      	bx	lr
	...

0800e1f0 <floor>:
 800e1f0:	ec51 0b10 	vmov	r0, r1, d0
 800e1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e1fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e200:	2e13      	cmp	r6, #19
 800e202:	460c      	mov	r4, r1
 800e204:	ee10 5a10 	vmov	r5, s0
 800e208:	4680      	mov	r8, r0
 800e20a:	dc34      	bgt.n	800e276 <floor+0x86>
 800e20c:	2e00      	cmp	r6, #0
 800e20e:	da16      	bge.n	800e23e <floor+0x4e>
 800e210:	a335      	add	r3, pc, #212	; (adr r3, 800e2e8 <floor+0xf8>)
 800e212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e216:	f7f2 f841 	bl	800029c <__adddf3>
 800e21a:	2200      	movs	r2, #0
 800e21c:	2300      	movs	r3, #0
 800e21e:	f7f2 fc83 	bl	8000b28 <__aeabi_dcmpgt>
 800e222:	b148      	cbz	r0, 800e238 <floor+0x48>
 800e224:	2c00      	cmp	r4, #0
 800e226:	da59      	bge.n	800e2dc <floor+0xec>
 800e228:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e22c:	4a30      	ldr	r2, [pc, #192]	; (800e2f0 <floor+0x100>)
 800e22e:	432b      	orrs	r3, r5
 800e230:	2500      	movs	r5, #0
 800e232:	42ab      	cmp	r3, r5
 800e234:	bf18      	it	ne
 800e236:	4614      	movne	r4, r2
 800e238:	4621      	mov	r1, r4
 800e23a:	4628      	mov	r0, r5
 800e23c:	e025      	b.n	800e28a <floor+0x9a>
 800e23e:	4f2d      	ldr	r7, [pc, #180]	; (800e2f4 <floor+0x104>)
 800e240:	4137      	asrs	r7, r6
 800e242:	ea01 0307 	and.w	r3, r1, r7
 800e246:	4303      	orrs	r3, r0
 800e248:	d01f      	beq.n	800e28a <floor+0x9a>
 800e24a:	a327      	add	r3, pc, #156	; (adr r3, 800e2e8 <floor+0xf8>)
 800e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e250:	f7f2 f824 	bl	800029c <__adddf3>
 800e254:	2200      	movs	r2, #0
 800e256:	2300      	movs	r3, #0
 800e258:	f7f2 fc66 	bl	8000b28 <__aeabi_dcmpgt>
 800e25c:	2800      	cmp	r0, #0
 800e25e:	d0eb      	beq.n	800e238 <floor+0x48>
 800e260:	2c00      	cmp	r4, #0
 800e262:	bfbe      	ittt	lt
 800e264:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e268:	fa43 f606 	asrlt.w	r6, r3, r6
 800e26c:	19a4      	addlt	r4, r4, r6
 800e26e:	ea24 0407 	bic.w	r4, r4, r7
 800e272:	2500      	movs	r5, #0
 800e274:	e7e0      	b.n	800e238 <floor+0x48>
 800e276:	2e33      	cmp	r6, #51	; 0x33
 800e278:	dd0b      	ble.n	800e292 <floor+0xa2>
 800e27a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e27e:	d104      	bne.n	800e28a <floor+0x9a>
 800e280:	ee10 2a10 	vmov	r2, s0
 800e284:	460b      	mov	r3, r1
 800e286:	f7f2 f809 	bl	800029c <__adddf3>
 800e28a:	ec41 0b10 	vmov	d0, r0, r1
 800e28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e292:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e296:	f04f 33ff 	mov.w	r3, #4294967295
 800e29a:	fa23 f707 	lsr.w	r7, r3, r7
 800e29e:	4207      	tst	r7, r0
 800e2a0:	d0f3      	beq.n	800e28a <floor+0x9a>
 800e2a2:	a311      	add	r3, pc, #68	; (adr r3, 800e2e8 <floor+0xf8>)
 800e2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a8:	f7f1 fff8 	bl	800029c <__adddf3>
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	f7f2 fc3a 	bl	8000b28 <__aeabi_dcmpgt>
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	d0bf      	beq.n	800e238 <floor+0x48>
 800e2b8:	2c00      	cmp	r4, #0
 800e2ba:	da02      	bge.n	800e2c2 <floor+0xd2>
 800e2bc:	2e14      	cmp	r6, #20
 800e2be:	d103      	bne.n	800e2c8 <floor+0xd8>
 800e2c0:	3401      	adds	r4, #1
 800e2c2:	ea25 0507 	bic.w	r5, r5, r7
 800e2c6:	e7b7      	b.n	800e238 <floor+0x48>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e2ce:	fa03 f606 	lsl.w	r6, r3, r6
 800e2d2:	4435      	add	r5, r6
 800e2d4:	4545      	cmp	r5, r8
 800e2d6:	bf38      	it	cc
 800e2d8:	18e4      	addcc	r4, r4, r3
 800e2da:	e7f2      	b.n	800e2c2 <floor+0xd2>
 800e2dc:	2500      	movs	r5, #0
 800e2de:	462c      	mov	r4, r5
 800e2e0:	e7aa      	b.n	800e238 <floor+0x48>
 800e2e2:	bf00      	nop
 800e2e4:	f3af 8000 	nop.w
 800e2e8:	8800759c 	.word	0x8800759c
 800e2ec:	7e37e43c 	.word	0x7e37e43c
 800e2f0:	bff00000 	.word	0xbff00000
 800e2f4:	000fffff 	.word	0x000fffff

0800e2f8 <scalbn>:
 800e2f8:	b570      	push	{r4, r5, r6, lr}
 800e2fa:	ec55 4b10 	vmov	r4, r5, d0
 800e2fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e302:	4606      	mov	r6, r0
 800e304:	462b      	mov	r3, r5
 800e306:	b9aa      	cbnz	r2, 800e334 <scalbn+0x3c>
 800e308:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e30c:	4323      	orrs	r3, r4
 800e30e:	d03b      	beq.n	800e388 <scalbn+0x90>
 800e310:	4b31      	ldr	r3, [pc, #196]	; (800e3d8 <scalbn+0xe0>)
 800e312:	4629      	mov	r1, r5
 800e314:	2200      	movs	r2, #0
 800e316:	ee10 0a10 	vmov	r0, s0
 800e31a:	f7f2 f975 	bl	8000608 <__aeabi_dmul>
 800e31e:	4b2f      	ldr	r3, [pc, #188]	; (800e3dc <scalbn+0xe4>)
 800e320:	429e      	cmp	r6, r3
 800e322:	4604      	mov	r4, r0
 800e324:	460d      	mov	r5, r1
 800e326:	da12      	bge.n	800e34e <scalbn+0x56>
 800e328:	a327      	add	r3, pc, #156	; (adr r3, 800e3c8 <scalbn+0xd0>)
 800e32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32e:	f7f2 f96b 	bl	8000608 <__aeabi_dmul>
 800e332:	e009      	b.n	800e348 <scalbn+0x50>
 800e334:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e338:	428a      	cmp	r2, r1
 800e33a:	d10c      	bne.n	800e356 <scalbn+0x5e>
 800e33c:	ee10 2a10 	vmov	r2, s0
 800e340:	4620      	mov	r0, r4
 800e342:	4629      	mov	r1, r5
 800e344:	f7f1 ffaa 	bl	800029c <__adddf3>
 800e348:	4604      	mov	r4, r0
 800e34a:	460d      	mov	r5, r1
 800e34c:	e01c      	b.n	800e388 <scalbn+0x90>
 800e34e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e352:	460b      	mov	r3, r1
 800e354:	3a36      	subs	r2, #54	; 0x36
 800e356:	4432      	add	r2, r6
 800e358:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e35c:	428a      	cmp	r2, r1
 800e35e:	dd0b      	ble.n	800e378 <scalbn+0x80>
 800e360:	ec45 4b11 	vmov	d1, r4, r5
 800e364:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e3d0 <scalbn+0xd8>
 800e368:	f000 f83c 	bl	800e3e4 <copysign>
 800e36c:	a318      	add	r3, pc, #96	; (adr r3, 800e3d0 <scalbn+0xd8>)
 800e36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e372:	ec51 0b10 	vmov	r0, r1, d0
 800e376:	e7da      	b.n	800e32e <scalbn+0x36>
 800e378:	2a00      	cmp	r2, #0
 800e37a:	dd08      	ble.n	800e38e <scalbn+0x96>
 800e37c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e380:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e384:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e388:	ec45 4b10 	vmov	d0, r4, r5
 800e38c:	bd70      	pop	{r4, r5, r6, pc}
 800e38e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e392:	da0d      	bge.n	800e3b0 <scalbn+0xb8>
 800e394:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e398:	429e      	cmp	r6, r3
 800e39a:	ec45 4b11 	vmov	d1, r4, r5
 800e39e:	dce1      	bgt.n	800e364 <scalbn+0x6c>
 800e3a0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e3c8 <scalbn+0xd0>
 800e3a4:	f000 f81e 	bl	800e3e4 <copysign>
 800e3a8:	a307      	add	r3, pc, #28	; (adr r3, 800e3c8 <scalbn+0xd0>)
 800e3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ae:	e7e0      	b.n	800e372 <scalbn+0x7a>
 800e3b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e3b4:	3236      	adds	r2, #54	; 0x36
 800e3b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e3ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e3be:	4620      	mov	r0, r4
 800e3c0:	4629      	mov	r1, r5
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	4b06      	ldr	r3, [pc, #24]	; (800e3e0 <scalbn+0xe8>)
 800e3c6:	e7b2      	b.n	800e32e <scalbn+0x36>
 800e3c8:	c2f8f359 	.word	0xc2f8f359
 800e3cc:	01a56e1f 	.word	0x01a56e1f
 800e3d0:	8800759c 	.word	0x8800759c
 800e3d4:	7e37e43c 	.word	0x7e37e43c
 800e3d8:	43500000 	.word	0x43500000
 800e3dc:	ffff3cb0 	.word	0xffff3cb0
 800e3e0:	3c900000 	.word	0x3c900000

0800e3e4 <copysign>:
 800e3e4:	ec51 0b10 	vmov	r0, r1, d0
 800e3e8:	ee11 0a90 	vmov	r0, s3
 800e3ec:	ee10 2a10 	vmov	r2, s0
 800e3f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e3f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e3f8:	ea41 0300 	orr.w	r3, r1, r0
 800e3fc:	ec43 2b10 	vmov	d0, r2, r3
 800e400:	4770      	bx	lr
	...

0800e404 <_init>:
 800e404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e406:	bf00      	nop
 800e408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e40a:	bc08      	pop	{r3}
 800e40c:	469e      	mov	lr, r3
 800e40e:	4770      	bx	lr

0800e410 <_fini>:
 800e410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e412:	bf00      	nop
 800e414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e416:	bc08      	pop	{r3}
 800e418:	469e      	mov	lr, r3
 800e41a:	4770      	bx	lr
